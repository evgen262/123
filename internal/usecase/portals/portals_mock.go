// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=./portals_mock.go -package=portals
//

// Package portals is a generated GoMock package.
package portals

import (
	context "context"
	reflect "reflect"

	entity "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity"
	portal "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity/portal"
	gomock "go.uber.org/mock/gomock"
)

// MockPortalRepository is a mock of PortalRepository interface.
type MockPortalRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPortalRepositoryMockRecorder
	isgomock struct{}
}

// MockPortalRepositoryMockRecorder is the mock recorder for MockPortalRepository.
type MockPortalRepositoryMockRecorder struct {
	mock *MockPortalRepository
}

// NewMockPortalRepository creates a new mock instance.
func NewMockPortalRepository(ctrl *gomock.Controller) *MockPortalRepository {
	mock := &MockPortalRepository{ctrl: ctrl}
	mock.recorder = &MockPortalRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalRepository) EXPECT() *MockPortalRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockPortalRepository) Add(ctx context.Context, newPortal []*portal.Portal) ([]*portal.Portal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, newPortal)
	ret0, _ := ret[0].([]*portal.Portal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockPortalRepositoryMockRecorder) Add(ctx, newPortal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPortalRepository)(nil).Add), ctx, newPortal)
}

// Delete mocks base method.
func (m *MockPortalRepository) Delete(ctx context.Context, id portal.PortalID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPortalRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPortalRepository)(nil).Delete), ctx, id)
}

// Filter mocks base method.
func (m *MockPortalRepository) Filter(ctx context.Context, options portal.PortalsFilterOptions) ([]*portal.Portal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", ctx, options)
	ret0, _ := ret[0].([]*portal.Portal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter.
func (mr *MockPortalRepositoryMockRecorder) Filter(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockPortalRepository)(nil).Filter), ctx, options)
}

// Update mocks base method.
func (m *MockPortalRepository) Update(ctx context.Context, newPortal *portal.Portal) (*portal.Portal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, newPortal)
	ret0, _ := ret[0].(*portal.Portal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPortalRepositoryMockRecorder) Update(ctx, newPortal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPortalRepository)(nil).Update), ctx, newPortal)
}

// MockQuestionsRepository is a mock of QuestionsRepository interface.
type MockQuestionsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockQuestionsRepositoryMockRecorder
	isgomock struct{}
}

// MockQuestionsRepositoryMockRecorder is the mock recorder for MockQuestionsRepository.
type MockQuestionsRepositoryMockRecorder struct {
	mock *MockQuestionsRepository
}

// NewMockQuestionsRepository creates a new mock instance.
func NewMockQuestionsRepository(ctrl *gomock.Controller) *MockQuestionsRepository {
	mock := &MockQuestionsRepository{ctrl: ctrl}
	mock.recorder = &MockQuestionsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuestionsRepository) EXPECT() *MockQuestionsRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockQuestionsRepository) Add(ctx context.Context, questions []*portal.Question) ([]*portal.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, questions)
	ret0, _ := ret[0].([]*portal.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockQuestionsRepositoryMockRecorder) Add(ctx, questions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockQuestionsRepository)(nil).Add), ctx, questions)
}

// All mocks base method.
func (m *MockQuestionsRepository) All(ctx context.Context, withDeleted bool) (*portal.Questions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, withDeleted)
	ret0, _ := ret[0].(*portal.Questions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockQuestionsRepositoryMockRecorder) All(ctx, withDeleted any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockQuestionsRepository)(nil).All), ctx, withDeleted)
}

// Delete mocks base method.
func (m *MockQuestionsRepository) Delete(ctx context.Context, questionId portal.QuestionId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, questionId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockQuestionsRepositoryMockRecorder) Delete(ctx, questionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockQuestionsRepository)(nil).Delete), ctx, questionId)
}

// Get mocks base method.
func (m *MockQuestionsRepository) Get(ctx context.Context, questionId portal.QuestionId, withDeleted bool) (*portal.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, questionId, withDeleted)
	ret0, _ := ret[0].(*portal.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockQuestionsRepositoryMockRecorder) Get(ctx, questionId, withDeleted any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockQuestionsRepository)(nil).Get), ctx, questionId, withDeleted)
}

// Update mocks base method.
func (m *MockQuestionsRepository) Update(ctx context.Context, question *portal.Question) (*portal.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, question)
	ret0, _ := ret[0].(*portal.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockQuestionsRepositoryMockRecorder) Update(ctx, question any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockQuestionsRepository)(nil).Update), ctx, question)
}

// MockImagesRepository is a mock of ImagesRepository interface.
type MockImagesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockImagesRepositoryMockRecorder
	isgomock struct{}
}

// MockImagesRepositoryMockRecorder is the mock recorder for MockImagesRepository.
type MockImagesRepositoryMockRecorder struct {
	mock *MockImagesRepository
}

// NewMockImagesRepository creates a new mock instance.
func NewMockImagesRepository(ctrl *gomock.Controller) *MockImagesRepository {
	mock := &MockImagesRepository{ctrl: ctrl}
	mock.recorder = &MockImagesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImagesRepository) EXPECT() *MockImagesRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockImagesRepository) Add(ctx context.Context, image *portal.Image) (*portal.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, image)
	ret0, _ := ret[0].(*portal.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockImagesRepositoryMockRecorder) Add(ctx, image any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockImagesRepository)(nil).Add), ctx, image)
}

// All mocks base method.
func (m *MockImagesRepository) All(ctx context.Context) ([]*portal.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx)
	ret0, _ := ret[0].([]*portal.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockImagesRepositoryMockRecorder) All(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockImagesRepository)(nil).All), ctx)
}

// Delete mocks base method.
func (m *MockImagesRepository) Delete(ctx context.Context, imageId portal.ImageId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, imageId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockImagesRepositoryMockRecorder) Delete(ctx, imageId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockImagesRepository)(nil).Delete), ctx, imageId)
}

// Get mocks base method.
func (m *MockImagesRepository) Get(ctx context.Context, imageId portal.ImageId) (*portal.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, imageId)
	ret0, _ := ret[0].(*portal.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockImagesRepositoryMockRecorder) Get(ctx, imageId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockImagesRepository)(nil).Get), ctx, imageId)
}

// GetImageData mocks base method.
func (m *MockImagesRepository) GetImageData(ctx context.Context, path string) (portal.ImageData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageData", ctx, path)
	ret0, _ := ret[0].(portal.ImageData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageData indicates an expected call of GetImageData.
func (mr *MockImagesRepositoryMockRecorder) GetImageData(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageData", reflect.TypeOf((*MockImagesRepository)(nil).GetImageData), ctx, path)
}

// MockFeaturesRepository is a mock of FeaturesRepository interface.
type MockFeaturesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFeaturesRepositoryMockRecorder
	isgomock struct{}
}

// MockFeaturesRepositoryMockRecorder is the mock recorder for MockFeaturesRepository.
type MockFeaturesRepositoryMockRecorder struct {
	mock *MockFeaturesRepository
}

// NewMockFeaturesRepository creates a new mock instance.
func NewMockFeaturesRepository(ctrl *gomock.Controller) *MockFeaturesRepository {
	mock := &MockFeaturesRepository{ctrl: ctrl}
	mock.recorder = &MockFeaturesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeaturesRepository) EXPECT() *MockFeaturesRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockFeaturesRepository) Add(ctx context.Context, features []*portal.Feature) ([]*portal.Feature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, features)
	ret0, _ := ret[0].([]*portal.Feature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockFeaturesRepositoryMockRecorder) Add(ctx, features any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockFeaturesRepository)(nil).Add), ctx, features)
}

// All mocks base method.
func (m *MockFeaturesRepository) All(ctx context.Context, withDisabled bool) ([]*portal.Feature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, withDisabled)
	ret0, _ := ret[0].([]*portal.Feature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockFeaturesRepositoryMockRecorder) All(ctx, withDisabled any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockFeaturesRepository)(nil).All), ctx, withDisabled)
}

// Delete mocks base method.
func (m *MockFeaturesRepository) Delete(ctx context.Context, featureId portal.FeatureId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, featureId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockFeaturesRepositoryMockRecorder) Delete(ctx, featureId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFeaturesRepository)(nil).Delete), ctx, featureId)
}

// Get mocks base method.
func (m *MockFeaturesRepository) Get(ctx context.Context, featureId portal.FeatureId, withDisabled bool) (*portal.Feature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, featureId, withDisabled)
	ret0, _ := ret[0].(*portal.Feature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockFeaturesRepositoryMockRecorder) Get(ctx, featureId, withDisabled any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFeaturesRepository)(nil).Get), ctx, featureId, withDisabled)
}

// Update mocks base method.
func (m *MockFeaturesRepository) Update(ctx context.Context, feature *portal.Feature) (*portal.Feature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, feature)
	ret0, _ := ret[0].(*portal.Feature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockFeaturesRepositoryMockRecorder) Update(ctx, feature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFeaturesRepository)(nil).Update), ctx, feature)
}

// MockOrganizationsRepository is a mock of OrganizationsRepository interface.
type MockOrganizationsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationsRepositoryMockRecorder
	isgomock struct{}
}

// MockOrganizationsRepositoryMockRecorder is the mock recorder for MockOrganizationsRepository.
type MockOrganizationsRepositoryMockRecorder struct {
	mock *MockOrganizationsRepository
}

// NewMockOrganizationsRepository creates a new mock instance.
func NewMockOrganizationsRepository(ctrl *gomock.Controller) *MockOrganizationsRepository {
	mock := &MockOrganizationsRepository{ctrl: ctrl}
	mock.recorder = &MockOrganizationsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationsRepository) EXPECT() *MockOrganizationsRepositoryMockRecorder {
	return m.recorder
}

// Filter mocks base method.
func (m *MockOrganizationsRepository) Filter(ctx context.Context, filters portal.OrganizationsFilters, pagination *entity.StringPagination, options portal.OrganizationsFilterOptions) (*portal.OrganizationsWithPagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", ctx, filters, pagination, options)
	ret0, _ := ret[0].(*portal.OrganizationsWithPagination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter.
func (mr *MockOrganizationsRepositoryMockRecorder) Filter(ctx, filters, pagination, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockOrganizationsRepository)(nil).Filter), ctx, filters, pagination, options)
}

// LinkOrganizationsToPortal mocks base method.
func (m *MockOrganizationsRepository) LinkOrganizationsToPortal(ctx context.Context, portalId portal.PortalID, ids portal.OrganizationIDs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkOrganizationsToPortal", ctx, portalId, ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// LinkOrganizationsToPortal indicates an expected call of LinkOrganizationsToPortal.
func (mr *MockOrganizationsRepositoryMockRecorder) LinkOrganizationsToPortal(ctx, portalId, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkOrganizationsToPortal", reflect.TypeOf((*MockOrganizationsRepository)(nil).LinkOrganizationsToPortal), ctx, portalId, ids)
}

// UnlinkOrganizations mocks base method.
func (m *MockOrganizationsRepository) UnlinkOrganizations(ctx context.Context, ids portal.OrganizationIDs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlinkOrganizations", ctx, ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlinkOrganizations indicates an expected call of UnlinkOrganizations.
func (mr *MockOrganizationsRepositoryMockRecorder) UnlinkOrganizations(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlinkOrganizations", reflect.TypeOf((*MockOrganizationsRepository)(nil).UnlinkOrganizations), ctx, ids)
}
