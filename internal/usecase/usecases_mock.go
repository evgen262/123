// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=./usecases_mock.go -package=usecase
//

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"

	kadry "git.mos.ru/buch-cloud/moscow-team-2.0/pud/auth.git/internal/client/http/kadry"
	sudir "git.mos.ru/buch-cloud/moscow-team-2.0/pud/auth.git/internal/client/http/sudir"
	entity "git.mos.ru/buch-cloud/moscow-team-2.0/pud/auth.git/internal/entity"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockKadryClient is a mock of KadryClient interface.
type MockKadryClient struct {
	ctrl     *gomock.Controller
	recorder *MockKadryClientMockRecorder
	isgomock struct{}
}

// MockKadryClientMockRecorder is the mock recorder for MockKadryClient.
type MockKadryClientMockRecorder struct {
	mock *MockKadryClient
}

// NewMockKadryClient creates a new mock instance.
func NewMockKadryClient(ctrl *gomock.Controller) *MockKadryClient {
	mock := &MockKadryClient{ctrl: ctrl}
	mock.recorder = &MockKadryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKadryClient) EXPECT() *MockKadryClientMockRecorder {
	return m.recorder
}

// GetEmployeesInfo mocks base method.
func (m *MockKadryClient) GetEmployeesInfo(ctx context.Context, cloudId string, attributes ...kadry.AttributeName) ([]entity.EmployeeInfo, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, cloudId}
	for _, a := range attributes {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEmployeesInfo", varargs...)
	ret0, _ := ret[0].([]entity.EmployeeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeesInfo indicates an expected call of GetEmployeesInfo.
func (mr *MockKadryClientMockRecorder) GetEmployeesInfo(ctx, cloudId any, attributes ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, cloudId}, attributes...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeesInfo", reflect.TypeOf((*MockKadryClient)(nil).GetEmployeesInfo), varargs...)
}

// MockSudirClient is a mock of SudirClient interface.
type MockSudirClient struct {
	ctrl     *gomock.Controller
	recorder *MockSudirClientMockRecorder
	isgomock struct{}
}

// MockSudirClientMockRecorder is the mock recorder for MockSudirClient.
type MockSudirClientMockRecorder struct {
	mock *MockSudirClient
}

// NewMockSudirClient creates a new mock instance.
func NewMockSudirClient(ctrl *gomock.Controller) *MockSudirClient {
	mock := &MockSudirClient{ctrl: ctrl}
	mock.recorder = &MockSudirClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSudirClient) EXPECT() *MockSudirClientMockRecorder {
	return m.recorder
}

// AuthURL mocks base method.
func (m *MockSudirClient) AuthURL(options sudir.AuthURLOptions) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthURL", options)
	ret0, _ := ret[0].(string)
	return ret0
}

// AuthURL indicates an expected call of AuthURL.
func (mr *MockSudirClientMockRecorder) AuthURL(options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthURL", reflect.TypeOf((*MockSudirClient)(nil).AuthURL), options)
}

// CodeExchange mocks base method.
func (m *MockSudirClient) CodeExchange(ctx context.Context, code string, options sudir.CodeExchangeOptions) (*sudir.OAuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CodeExchange", ctx, code, options)
	ret0, _ := ret[0].(*sudir.OAuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CodeExchange indicates an expected call of CodeExchange.
func (mr *MockSudirClientMockRecorder) CodeExchange(ctx, code, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CodeExchange", reflect.TypeOf((*MockSudirClient)(nil).CodeExchange), ctx, code, options)
}

// GetUserInfo mocks base method.
func (m *MockSudirClient) GetUserInfo(ctx context.Context, accessToken string) (*sudir.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", ctx, accessToken)
	ret0, _ := ret[0].(*sudir.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockSudirClientMockRecorder) GetUserInfo(ctx, accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockSudirClient)(nil).GetUserInfo), ctx, accessToken)
}

// LoginCredentials mocks base method.
func (m *MockSudirClient) LoginCredentials(ctx context.Context, options sudir.LoginOptions) (*sudir.OAuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginCredentials", ctx, options)
	ret0, _ := ret[0].(*sudir.OAuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginCredentials indicates an expected call of LoginCredentials.
func (mr *MockSudirClientMockRecorder) LoginCredentials(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginCredentials", reflect.TypeOf((*MockSudirClient)(nil).LoginCredentials), ctx, options)
}

// Logout mocks base method.
func (m *MockSudirClient) Logout(ctx context.Context, clientID, registrationToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, clientID, registrationToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockSudirClientMockRecorder) Logout(ctx, clientID, registrationToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockSudirClient)(nil).Logout), ctx, clientID, registrationToken)
}

// ParseToken mocks base method.
func (m *MockSudirClient) ParseToken(token string) (*sudir.JWTPayload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(*sudir.JWTPayload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockSudirClientMockRecorder) ParseToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockSudirClient)(nil).ParseToken), token)
}

// RefreshToken mocks base method.
func (m *MockSudirClient) RefreshToken(ctx context.Context, refreshToken string) (*sudir.OAuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", ctx, refreshToken)
	ret0, _ := ret[0].(*sudir.OAuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockSudirClientMockRecorder) RefreshToken(ctx, refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockSudirClient)(nil).RefreshToken), ctx, refreshToken)
}

// ValidateToken mocks base method.
func (m *MockSudirClient) ValidateToken(ctx context.Context, accessToken string) (*sudir.ValidationInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", ctx, accessToken)
	ret0, _ := ret[0].(*sudir.ValidationInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockSudirClientMockRecorder) ValidateToken(ctx, accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockSudirClient)(nil).ValidateToken), ctx, accessToken)
}

// MockStateRepository is a mock of StateRepository interface.
type MockStateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStateRepositoryMockRecorder
	isgomock struct{}
}

// MockStateRepositoryMockRecorder is the mock recorder for MockStateRepository.
type MockStateRepositoryMockRecorder struct {
	mock *MockStateRepository
}

// NewMockStateRepository creates a new mock instance.
func NewMockStateRepository(ctrl *gomock.Controller) *MockStateRepository {
	mock := &MockStateRepository{ctrl: ctrl}
	mock.recorder = &MockStateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateRepository) EXPECT() *MockStateRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockStateRepository) Delete(ctx context.Context, stateID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", ctx, stateID)
}

// Delete indicates an expected call of Delete.
func (mr *MockStateRepositoryMockRecorder) Delete(ctx, stateID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStateRepository)(nil).Delete), ctx, stateID)
}

// Get mocks base method.
func (m *MockStateRepository) Get(ctx context.Context, stateID string) (*entity.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, stateID)
	ret0, _ := ret[0].(*entity.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStateRepositoryMockRecorder) Get(ctx, stateID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStateRepository)(nil).Get), ctx, stateID)
}

// IsExists mocks base method.
func (m *MockStateRepository) IsExists(ctx context.Context, stateID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExists", ctx, stateID)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsExists indicates an expected call of IsExists.
func (mr *MockStateRepositoryMockRecorder) IsExists(ctx, stateID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExists", reflect.TypeOf((*MockStateRepository)(nil).IsExists), ctx, stateID)
}

// New mocks base method.
func (m *MockStateRepository) New(ctx context.Context, options *entity.StateOptions) (*entity.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", ctx, options)
	ret0, _ := ret[0].(*entity.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New.
func (mr *MockStateRepositoryMockRecorder) New(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockStateRepository)(nil).New), ctx, options)
}

// MockTokenRepository is a mock of TokenRepository interface.
type MockTokenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTokenRepositoryMockRecorder
	isgomock struct{}
}

// MockTokenRepositoryMockRecorder is the mock recorder for MockTokenRepository.
type MockTokenRepositoryMockRecorder struct {
	mock *MockTokenRepository
}

// NewMockTokenRepository creates a new mock instance.
func NewMockTokenRepository(ctrl *gomock.Controller) *MockTokenRepository {
	mock := &MockTokenRepository{ctrl: ctrl}
	mock.recorder = &MockTokenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenRepository) EXPECT() *MockTokenRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockTokenRepository) Delete(ctx context.Context, id string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", ctx, id)
}

// Delete indicates an expected call of Delete.
func (mr *MockTokenRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTokenRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockTokenRepository) Get(ctx context.Context, id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTokenRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTokenRepository)(nil).Get), ctx, id)
}

// Save mocks base method.
func (m *MockTokenRepository) Save(ctx context.Context, id, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, id, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockTokenRepositoryMockRecorder) Save(ctx, id, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockTokenRepository)(nil).Save), ctx, id, token)
}

// MockEmployeeRepository is a mock of EmployeeRepository interface.
type MockEmployeeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeeRepositoryMockRecorder
	isgomock struct{}
}

// MockEmployeeRepositoryMockRecorder is the mock recorder for MockEmployeeRepository.
type MockEmployeeRepositoryMockRecorder struct {
	mock *MockEmployeeRepository
}

// NewMockEmployeeRepository creates a new mock instance.
func NewMockEmployeeRepository(ctrl *gomock.Controller) *MockEmployeeRepository {
	mock := &MockEmployeeRepository{ctrl: ctrl}
	mock.recorder = &MockEmployeeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeeRepository) EXPECT() *MockEmployeeRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockEmployeeRepository) Get(ctx context.Context, key string) ([]entity.EmployeeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].([]entity.EmployeeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockEmployeeRepositoryMockRecorder) Get(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEmployeeRepository)(nil).Get), ctx, key)
}

// GetEmployeesInfoByPersonID mocks base method.
func (m *MockEmployeeRepository) GetEmployeesInfoByPersonID(ctx context.Context, personID uuid.UUID) ([]entity.EmployeeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeesInfoByPersonID", ctx, personID)
	ret0, _ := ret[0].([]entity.EmployeeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeesInfoByPersonID indicates an expected call of GetEmployeesInfoByPersonID.
func (mr *MockEmployeeRepositoryMockRecorder) GetEmployeesInfoByPersonID(ctx, personID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeesInfoByPersonID", reflect.TypeOf((*MockEmployeeRepository)(nil).GetEmployeesInfoByPersonID), ctx, personID)
}

// GetPersonIDByEmployeeEmail mocks base method.
func (m *MockEmployeeRepository) GetPersonIDByEmployeeEmail(ctx context.Context, email string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonIDByEmployeeEmail", ctx, email)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersonIDByEmployeeEmail indicates an expected call of GetPersonIDByEmployeeEmail.
func (mr *MockEmployeeRepositoryMockRecorder) GetPersonIDByEmployeeEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonIDByEmployeeEmail", reflect.TypeOf((*MockEmployeeRepository)(nil).GetPersonIDByEmployeeEmail), ctx, email)
}

// Save mocks base method.
func (m *MockEmployeeRepository) Save(ctx context.Context, key string, employees []entity.EmployeeInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, key, employees)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockEmployeeRepositoryMockRecorder) Save(ctx, key, employees any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockEmployeeRepository)(nil).Save), ctx, key, employees)
}
