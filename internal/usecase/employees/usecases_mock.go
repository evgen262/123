// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=./usecases_mock.go -package=employees
//

// Package employees is a generated GoMock package.
package employees

import (
	context "context"
	reflect "reflect"

	employee "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity/employee"
	portal "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity/portal"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockEmployeesRepository is a mock of EmployeesRepository interface.
type MockEmployeesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeesRepositoryMockRecorder
	isgomock struct{}
}

// MockEmployeesRepositoryMockRecorder is the mock recorder for MockEmployeesRepository.
type MockEmployeesRepositoryMockRecorder struct {
	mock *MockEmployeesRepository
}

// NewMockEmployeesRepository creates a new mock instance.
func NewMockEmployeesRepository(ctrl *gomock.Controller) *MockEmployeesRepository {
	mock := &MockEmployeesRepository{ctrl: ctrl}
	mock.recorder = &MockEmployeesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeesRepository) EXPECT() *MockEmployeesRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockEmployeesRepository) Get(ctx context.Context, id uuid.UUID) (*employee.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*employee.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockEmployeesRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEmployeesRepository)(nil).Get), ctx, id)
}

// GetByExtIDAndPortalID mocks base method.
func (m *MockEmployeesRepository) GetByExtIDAndPortalID(ctx context.Context, extID string, portalID int) (*employee.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByExtIDAndPortalID", ctx, extID, portalID)
	ret0, _ := ret[0].(*employee.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByExtIDAndPortalID indicates an expected call of GetByExtIDAndPortalID.
func (mr *MockEmployeesRepositoryMockRecorder) GetByExtIDAndPortalID(ctx, extID, portalID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByExtIDAndPortalID", reflect.TypeOf((*MockEmployeesRepository)(nil).GetByExtIDAndPortalID), ctx, extID, portalID)
}

// MockPortalsRepository is a mock of PortalsRepository interface.
type MockPortalsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPortalsRepositoryMockRecorder
	isgomock struct{}
}

// MockPortalsRepositoryMockRecorder is the mock recorder for MockPortalsRepository.
type MockPortalsRepositoryMockRecorder struct {
	mock *MockPortalsRepository
}

// NewMockPortalsRepository creates a new mock instance.
func NewMockPortalsRepository(ctrl *gomock.Controller) *MockPortalsRepository {
	mock := &MockPortalsRepository{ctrl: ctrl}
	mock.recorder = &MockPortalsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalsRepository) EXPECT() *MockPortalsRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockPortalsRepository) Get(ctx context.Context, id int) (*portal.Portal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*portal.Portal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPortalsRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPortalsRepository)(nil).Get), ctx, id)
}
