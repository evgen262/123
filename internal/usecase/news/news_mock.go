// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=./news_mock.go -package=news
//

// Package news is a generated GoMock package.
package news

import (
	context "context"
	reflect "reflect"

	news "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/dto/news"
	employee "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity/employee"
	news0 "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity/news"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockCategoryRepository is a mock of CategoryRepository interface.
type MockCategoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryRepositoryMockRecorder
	isgomock struct{}
}

// MockCategoryRepositoryMockRecorder is the mock recorder for MockCategoryRepository.
type MockCategoryRepositoryMockRecorder struct {
	mock *MockCategoryRepository
}

// NewMockCategoryRepository creates a new mock instance.
func NewMockCategoryRepository(ctrl *gomock.Controller) *MockCategoryRepository {
	mock := &MockCategoryRepository{ctrl: ctrl}
	mock.recorder = &MockCategoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryRepository) EXPECT() *MockCategoryRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCategoryRepository) Create(ctx context.Context, nc *news.NewCategory) (*news0.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, nc)
	ret0, _ := ret[0].(*news0.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCategoryRepositoryMockRecorder) Create(ctx, nc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCategoryRepository)(nil).Create), ctx, nc)
}

// Delete mocks base method.
func (m *MockCategoryRepository) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCategoryRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCategoryRepository)(nil).Delete), ctx, id)
}

// Filter mocks base method.
func (m *MockCategoryRepository) Filter(ctx context.Context, filter *news.FilterCategory) (*news0.CategoriesWithPagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", ctx, filter)
	ret0, _ := ret[0].(*news0.CategoriesWithPagination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter.
func (mr *MockCategoryRepositoryMockRecorder) Filter(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockCategoryRepository)(nil).Filter), ctx, filter)
}

// Update mocks base method.
func (m *MockCategoryRepository) Update(ctx context.Context, c *news.UpdateCategory) (*news0.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, c)
	ret0, _ := ret[0].(*news0.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCategoryRepositoryMockRecorder) Update(ctx, c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCategoryRepository)(nil).Update), ctx, c)
}

// MockEmployeesRepository is a mock of EmployeesRepository interface.
type MockEmployeesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeesRepositoryMockRecorder
	isgomock struct{}
}

// MockEmployeesRepositoryMockRecorder is the mock recorder for MockEmployeesRepository.
type MockEmployeesRepositoryMockRecorder struct {
	mock *MockEmployeesRepository
}

// NewMockEmployeesRepository creates a new mock instance.
func NewMockEmployeesRepository(ctrl *gomock.Controller) *MockEmployeesRepository {
	mock := &MockEmployeesRepository{ctrl: ctrl}
	mock.recorder = &MockEmployeesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeesRepository) EXPECT() *MockEmployeesRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockEmployeesRepository) Get(ctx context.Context, id uuid.UUID) (*employee.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*employee.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockEmployeesRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEmployeesRepository)(nil).Get), ctx, id)
}

// GetByExtIDAndPortalID mocks base method.
func (m *MockEmployeesRepository) GetByExtIDAndPortalID(ctx context.Context, extID string, portalID int) (*employee.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByExtIDAndPortalID", ctx, extID, portalID)
	ret0, _ := ret[0].(*employee.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByExtIDAndPortalID indicates an expected call of GetByExtIDAndPortalID.
func (mr *MockEmployeesRepositoryMockRecorder) GetByExtIDAndPortalID(ctx, extID, portalID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByExtIDAndPortalID", reflect.TypeOf((*MockEmployeesRepository)(nil).GetByExtIDAndPortalID), ctx, extID, portalID)
}

// MockNewsRepository is a mock of NewsRepository interface.
type MockNewsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNewsRepositoryMockRecorder
	isgomock struct{}
}

// MockNewsRepositoryMockRecorder is the mock recorder for MockNewsRepository.
type MockNewsRepositoryMockRecorder struct {
	mock *MockNewsRepository
}

// NewMockNewsRepository creates a new mock instance.
func NewMockNewsRepository(ctrl *gomock.Controller) *MockNewsRepository {
	mock := &MockNewsRepository{ctrl: ctrl}
	mock.recorder = &MockNewsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNewsRepository) EXPECT() *MockNewsRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockNewsRepository) Create(ctx context.Context, news *news.NewNews) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, news)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockNewsRepositoryMockRecorder) Create(ctx, news any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNewsRepository)(nil).Create), ctx, news)
}

// Delete mocks base method.
func (m *MockNewsRepository) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockNewsRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNewsRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockNewsRepository) Get(ctx context.Context, id uuid.UUID) (*news0.NewsFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*news0.NewsFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockNewsRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNewsRepository)(nil).Get), ctx, id)
}

// GetBySlug mocks base method.
func (m *MockNewsRepository) GetBySlug(ctx context.Context, slug string) (*news0.NewsFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySlug", ctx, slug)
	ret0, _ := ret[0].(*news0.NewsFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySlug indicates an expected call of GetBySlug.
func (mr *MockNewsRepositoryMockRecorder) GetBySlug(ctx, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySlug", reflect.TypeOf((*MockNewsRepository)(nil).GetBySlug), ctx, slug)
}

// Search mocks base method.
func (m *MockNewsRepository) Search(ctx context.Context, search *news.SearchNews) (*news.SearchNewsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, search)
	ret0, _ := ret[0].(*news.SearchNewsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockNewsRepositoryMockRecorder) Search(ctx, search any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockNewsRepository)(nil).Search), ctx, search)
}

// Update mocks base method.
func (m *MockNewsRepository) Update(ctx context.Context, id uuid.UUID, news *news.UpdateNews) (*news0.News, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, news)
	ret0, _ := ret[0].(*news0.News)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockNewsRepositoryMockRecorder) Update(ctx, id, news any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNewsRepository)(nil).Update), ctx, id, news)
}

// MockCommentsRepository is a mock of CommentsRepository interface.
type MockCommentsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCommentsRepositoryMockRecorder
	isgomock struct{}
}

// MockCommentsRepositoryMockRecorder is the mock recorder for MockCommentsRepository.
type MockCommentsRepositoryMockRecorder struct {
	mock *MockCommentsRepository
}

// NewMockCommentsRepository creates a new mock instance.
func NewMockCommentsRepository(ctrl *gomock.Controller) *MockCommentsRepository {
	mock := &MockCommentsRepository{ctrl: ctrl}
	mock.recorder = &MockCommentsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentsRepository) EXPECT() *MockCommentsRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCommentsRepository) Create(ctx context.Context, in news.NewComment) (uuid.UUID, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockCommentsRepositoryMockRecorder) Create(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCommentsRepository)(nil).Create), ctx, in)
}

// List mocks base method.
func (m *MockCommentsRepository) List(ctx context.Context, params *news.FilterComments) ([]*news0.NewsComment, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, params)
	ret0, _ := ret[0].([]*news0.NewsComment)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockCommentsRepositoryMockRecorder) List(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCommentsRepository)(nil).List), ctx, params)
}
