// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=./analytics_mock.go -package=analytics
//

// Package analytics is a generated GoMock package.
package analytics

import (
	context "context"
	reflect "reflect"

	analytics "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity/analytics"
	gomock "go.uber.org/mock/gomock"
)

// MockAnalyticsRepository is a mock of AnalyticsRepository interface.
type MockAnalyticsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAnalyticsRepositoryMockRecorder
	isgomock struct{}
}

// MockAnalyticsRepositoryMockRecorder is the mock recorder for MockAnalyticsRepository.
type MockAnalyticsRepositoryMockRecorder struct {
	mock *MockAnalyticsRepository
}

// NewMockAnalyticsRepository creates a new mock instance.
func NewMockAnalyticsRepository(ctrl *gomock.Controller) *MockAnalyticsRepository {
	mock := &MockAnalyticsRepository{ctrl: ctrl}
	mock.recorder = &MockAnalyticsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnalyticsRepository) EXPECT() *MockAnalyticsRepositoryMockRecorder {
	return m.recorder
}

// AddMetrics mocks base method.
func (m *MockAnalyticsRepository) AddMetrics(ctx context.Context, headers analytics.CFCHeaders, body []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMetrics", ctx, headers, body)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMetrics indicates an expected call of AddMetrics.
func (mr *MockAnalyticsRepositoryMockRecorder) AddMetrics(ctx, headers, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMetrics", reflect.TypeOf((*MockAnalyticsRepository)(nil).AddMetrics), ctx, headers, body)
}
