// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=./surveys_mock.go -package=surveys
//

// Package surveys is a generated GoMock package.
package surveys

import (
	context "context"
	reflect "reflect"

	entitySurveys "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity/survey"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockSurveyRepository is a mock of SurveyRepository interface.
type MockSurveyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSurveyRepositoryMockRecorder
	isgomock struct{}
}

// MockSurveyRepositoryMockRecorder is the mock recorder for MockSurveyRepository.
type MockSurveyRepositoryMockRecorder struct {
	mock *MockSurveyRepository
}

// NewMockSurveyRepository creates a new mock instance.
func NewMockSurveyRepository(ctrl *gomock.Controller) *MockSurveyRepository {
	mock := &MockSurveyRepository{ctrl: ctrl}
	mock.recorder = &MockSurveyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSurveyRepository) EXPECT() *MockSurveyRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockSurveyRepository) Get(ctx context.Context, id entitySurveys.SurveyID, options entitySurveys.SurveyFilterOptions) (*entitySurveys.Survey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id, options)
	ret0, _ := ret[0].(*entitySurveys.Survey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSurveyRepositoryMockRecorder) Get(ctx, id, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSurveyRepository)(nil).Get), ctx, id, options)
}

// MockAnswersRepository is a mock of AnswersRepository interface.
type MockAnswersRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAnswersRepositoryMockRecorder
	isgomock struct{}
}

// MockAnswersRepositoryMockRecorder is the mock recorder for MockAnswersRepository.
type MockAnswersRepositoryMockRecorder struct {
	mock *MockAnswersRepository
}

// NewMockAnswersRepository creates a new mock instance.
func NewMockAnswersRepository(ctrl *gomock.Controller) *MockAnswersRepository {
	mock := &MockAnswersRepository{ctrl: ctrl}
	mock.recorder = &MockAnswersRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnswersRepository) EXPECT() *MockAnswersRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockAnswersRepository) Add(ctx context.Context, answers []*entitySurveys.RespondentAnswer) ([]uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, answers)
	ret0, _ := ret[0].([]uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockAnswersRepositoryMockRecorder) Add(ctx, answers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockAnswersRepository)(nil).Add), ctx, answers)
}

// MockImagesRepository is a mock of ImagesRepository interface.
type MockImagesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockImagesRepositoryMockRecorder
	isgomock struct{}
}

// MockImagesRepositoryMockRecorder is the mock recorder for MockImagesRepository.
type MockImagesRepositoryMockRecorder struct {
	mock *MockImagesRepository
}

// NewMockImagesRepository creates a new mock instance.
func NewMockImagesRepository(ctrl *gomock.Controller) *MockImagesRepository {
	mock := &MockImagesRepository{ctrl: ctrl}
	mock.recorder = &MockImagesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImagesRepository) EXPECT() *MockImagesRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockImagesRepository) Get(ctx context.Context, imageName string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, imageName)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockImagesRepositoryMockRecorder) Get(ctx, imageName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockImagesRepository)(nil).Get), ctx, imageName)
}
