// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=./proxy_mock.go -package=proxy
//

// Package proxy is a generated GoMock package.
package proxy

import (
	context "context"
	reflect "reflect"

	banner "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity/banner"
	event "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity/event"
	gomock "go.uber.org/mock/gomock"
)

// MockProxyRepository is a mock of ProxyRepository interface.
type MockProxyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProxyRepositoryMockRecorder
	isgomock struct{}
}

// MockProxyRepositoryMockRecorder is the mock recorder for MockProxyRepository.
type MockProxyRepositoryMockRecorder struct {
	mock *MockProxyRepository
}

// NewMockProxyRepository creates a new mock instance.
func NewMockProxyRepository(ctrl *gomock.Controller) *MockProxyRepository {
	mock := &MockProxyRepository{ctrl: ctrl}
	mock.recorder = &MockProxyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProxyRepository) EXPECT() *MockProxyRepositoryMockRecorder {
	return m.recorder
}

// ListCalendarEvents mocks base method.
func (m *MockProxyRepository) ListCalendarEvents(ctx context.Context, req event.CalendarEventRequest) (*event.CalendarEventsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCalendarEvents", ctx, req)
	ret0, _ := ret[0].(*event.CalendarEventsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCalendarEvents indicates an expected call of ListCalendarEvents.
func (mr *MockProxyRepositoryMockRecorder) ListCalendarEvents(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCalendarEvents", reflect.TypeOf((*MockProxyRepository)(nil).ListCalendarEvents), ctx, req)
}

// ListCalendarEventsLinks mocks base method.
func (m *MockProxyRepository) ListCalendarEventsLinks(ctx context.Context, req event.CalendarEventLinksRequest) ([]*event.CalendarEventLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCalendarEventsLinks", ctx, req)
	ret0, _ := ret[0].([]*event.CalendarEventLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCalendarEventsLinks indicates an expected call of ListCalendarEventsLinks.
func (mr *MockProxyRepositoryMockRecorder) ListCalendarEventsLinks(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCalendarEventsLinks", reflect.TypeOf((*MockProxyRepository)(nil).ListCalendarEventsLinks), ctx, req)
}

// ListHomeBanners mocks base method.
func (m *MockProxyRepository) ListHomeBanners(ctx context.Context, sessionID, portalURL string) (*banner.BannersList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHomeBanners", ctx, sessionID, portalURL)
	ret0, _ := ret[0].(*banner.BannersList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHomeBanners indicates an expected call of ListHomeBanners.
func (mr *MockProxyRepositoryMockRecorder) ListHomeBanners(ctx, sessionID, portalURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHomeBanners", reflect.TypeOf((*MockProxyRepository)(nil).ListHomeBanners), ctx, sessionID, portalURL)
}
