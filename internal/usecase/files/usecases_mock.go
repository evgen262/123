// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=./usecases_mock.go -package=files
//

// Package files is a generated GoMock package.
package files

import (
	context "context"
	reflect "reflect"

	auth "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity/auth"
	file "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity/file"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockFileRepository is a mock of FileRepository interface.
type MockFileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFileRepositoryMockRecorder
	isgomock struct{}
}

// MockFileRepositoryMockRecorder is the mock recorder for MockFileRepository.
type MockFileRepositoryMockRecorder struct {
	mock *MockFileRepository
}

// NewMockFileRepository creates a new mock instance.
func NewMockFileRepository(ctrl *gomock.Controller) *MockFileRepository {
	mock := &MockFileRepository{ctrl: ctrl}
	mock.recorder = &MockFileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileRepository) EXPECT() *MockFileRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockFileRepository) Get(ctx context.Context, fileId uuid.UUID, session *auth.Session) (*file.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, fileId, session)
	ret0, _ := ret[0].(*file.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockFileRepositoryMockRecorder) Get(ctx, fileId, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFileRepository)(nil).Get), ctx, fileId, session)
}
