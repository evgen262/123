// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=./usecase_mock.go -package=employees_search
//

// Package employees_search is a generated GoMock package.
package employees_search

import (
	context "context"
	reflect "reflect"

	employees_search "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity/employees-search"
	gomock "go.uber.org/mock/gomock"
)

// MockEmployeesSearchRepository is a mock of EmployeesSearchRepository interface.
type MockEmployeesSearchRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeesSearchRepositoryMockRecorder
	isgomock struct{}
}

// MockEmployeesSearchRepositoryMockRecorder is the mock recorder for MockEmployeesSearchRepository.
type MockEmployeesSearchRepositoryMockRecorder struct {
	mock *MockEmployeesSearchRepository
}

// NewMockEmployeesSearchRepository creates a new mock instance.
func NewMockEmployeesSearchRepository(ctrl *gomock.Controller) *MockEmployeesSearchRepository {
	mock := &MockEmployeesSearchRepository{ctrl: ctrl}
	mock.recorder = &MockEmployeesSearchRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeesSearchRepository) EXPECT() *MockEmployeesSearchRepositoryMockRecorder {
	return m.recorder
}

// Filters mocks base method.
func (m *MockEmployeesSearchRepository) Filters(ctx context.Context, request *employees_search.FiltersRequest) (*employees_search.FiltersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filters", ctx, request)
	ret0, _ := ret[0].(*employees_search.FiltersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filters indicates an expected call of Filters.
func (mr *MockEmployeesSearchRepositoryMockRecorder) Filters(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filters", reflect.TypeOf((*MockEmployeesSearchRepository)(nil).Filters), ctx, request)
}

// Search mocks base method.
func (m *MockEmployeesSearchRepository) Search(ctx context.Context, request *employees_search.SearchRequest) (*employees_search.SearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, request)
	ret0, _ := ret[0].(*employees_search.SearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockEmployeesSearchRepositoryMockRecorder) Search(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockEmployeesSearchRepository)(nil).Search), ctx, request)
}
