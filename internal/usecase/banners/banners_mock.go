// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=./banners_mock.go -package=usecaseBanners
//

// Package usecaseBanners is a generated GoMock package.
package usecaseBanners

import (
	context "context"
	reflect "reflect"

	dtoBanners "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/dto/banners"
	entityBanners "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity/banners"
	gomock "go.uber.org/mock/gomock"
)

// MockBannersRepository is a mock of BannersRepository interface.
type MockBannersRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBannersRepositoryMockRecorder
	isgomock struct{}
}

// MockBannersRepositoryMockRecorder is the mock recorder for MockBannersRepository.
type MockBannersRepositoryMockRecorder struct {
	mock *MockBannersRepository
}

// NewMockBannersRepository creates a new mock instance.
func NewMockBannersRepository(ctrl *gomock.Controller) *MockBannersRepository {
	mock := &MockBannersRepository{ctrl: ctrl}
	mock.recorder = &MockBannersRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBannersRepository) EXPECT() *MockBannersRepositoryMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockBannersRepository) List(ctx context.Context, portalID int) ([]*entityBanners.Banner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, portalID)
	ret0, _ := ret[0].([]*entityBanners.Banner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockBannersRepositoryMockRecorder) List(ctx, portalID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockBannersRepository)(nil).List), ctx, portalID)
}

// Set mocks base method.
func (m *MockBannersRepository) Set(ctx context.Context, authorID string, portalID int, banners []*dtoBanners.SetBanner) ([]*entityBanners.BannerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, authorID, portalID, banners)
	ret0, _ := ret[0].([]*entityBanners.BannerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set.
func (mr *MockBannersRepositoryMockRecorder) Set(ctx, authorID, portalID, banners any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockBannersRepository)(nil).Set), ctx, authorID, portalID, banners)
}
