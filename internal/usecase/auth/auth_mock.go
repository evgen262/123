// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=./auth_mock.go -package=auth
//

// Package auth is a generated GoMock package.
package auth

import (
	context "context"
	net "net"
	reflect "reflect"

	auth "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity/auth"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockRepository) Auth(ctx context.Context, code, state, callbackURI string) (*auth.AuthSudir, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", ctx, code, state, callbackURI)
	ret0, _ := ret[0].(*auth.AuthSudir)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Auth indicates an expected call of Auth.
func (mr *MockRepositoryMockRecorder) Auth(ctx, code, state, callbackURI any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockRepository)(nil).Auth), ctx, code, state, callbackURI)
}

// AuthPortal mocks base method.
func (m *MockRepository) AuthPortal(ctx context.Context, params auth.AuthPortalParams) (*auth.Auth1C, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthPortal", ctx, params)
	ret0, _ := ret[0].(*auth.Auth1C)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthPortal indicates an expected call of AuthPortal.
func (mr *MockRepositoryMockRecorder) AuthPortal(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthPortal", reflect.TypeOf((*MockRepository)(nil).AuthPortal), ctx, params)
}

// ChangePortal mocks base method.
func (m *MockRepository) ChangePortal(ctx context.Context, portalID int, session *auth.Session) ([]*auth.Portal, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePortal", ctx, portalID, session)
	ret0, _ := ret[0].([]*auth.Portal)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ChangePortal indicates an expected call of ChangePortal.
func (mr *MockRepositoryMockRecorder) ChangePortal(ctx, portalID, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePortal", reflect.TypeOf((*MockRepository)(nil).ChangePortal), ctx, portalID, session)
}

// CreateSession mocks base method.
func (m *MockRepository) CreateSession(ctx context.Context, user *auth.UserSudir, clientIP net.IP, device *auth.Device, arg4 *auth.Auth1C) (auth.TokensPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, user, clientIP, device, arg4)
	ret0, _ := ret[0].(auth.TokensPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockRepositoryMockRecorder) CreateSession(ctx, user, clientIP, device, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockRepository)(nil).CreateSession), ctx, user, clientIP, device, arg4)
}

// GetRedirectURL mocks base method.
func (m *MockRepository) GetRedirectURL(ctx context.Context, callbackURI string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRedirectURL", ctx, callbackURI)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRedirectURL indicates an expected call of GetRedirectURL.
func (mr *MockRepositoryMockRecorder) GetRedirectURL(ctx, callbackURI any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRedirectURL", reflect.TypeOf((*MockRepository)(nil).GetRedirectURL), ctx, callbackURI)
}

// GetSession mocks base method.
func (m *MockRepository) GetSession(ctx context.Context, accessToken string) (*auth.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", ctx, accessToken)
	ret0, _ := ret[0].(*auth.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockRepositoryMockRecorder) GetSession(ctx, accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockRepository)(nil).GetSession), ctx, accessToken)
}

// Logout mocks base method.
func (m *MockRepository) Logout(ctx context.Context, session *auth.Session, accessToken, refreshToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, session, accessToken, refreshToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockRepositoryMockRecorder) Logout(ctx, session, accessToken, refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockRepository)(nil).Logout), ctx, session, accessToken, refreshToken)
}

// RefreshTokensPair mocks base method.
func (m *MockRepository) RefreshTokensPair(ctx context.Context, accessToken, refreshToken string) (*auth.TokensPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshTokensPair", ctx, accessToken, refreshToken)
	ret0, _ := ret[0].(*auth.TokensPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshTokensPair indicates an expected call of RefreshTokensPair.
func (mr *MockRepositoryMockRecorder) RefreshTokensPair(ctx, accessToken, refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshTokensPair", reflect.TypeOf((*MockRepository)(nil).RefreshTokensPair), ctx, accessToken, refreshToken)
}

// MockRedirectSessionRepository is a mock of RedirectSessionRepository interface.
type MockRedirectSessionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRedirectSessionRepositoryMockRecorder
	isgomock struct{}
}

// MockRedirectSessionRepositoryMockRecorder is the mock recorder for MockRedirectSessionRepository.
type MockRedirectSessionRepositoryMockRecorder struct {
	mock *MockRedirectSessionRepository
}

// NewMockRedirectSessionRepository creates a new mock instance.
func NewMockRedirectSessionRepository(ctrl *gomock.Controller) *MockRedirectSessionRepository {
	mock := &MockRedirectSessionRepository{ctrl: ctrl}
	mock.recorder = &MockRedirectSessionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedirectSessionRepository) EXPECT() *MockRedirectSessionRepositoryMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockRedirectSessionRepository) CreateSession(ctx context.Context, userInfo *auth.RedirectSessionUserInfo) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, userInfo)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockRedirectSessionRepositoryMockRecorder) CreateSession(ctx, userInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockRedirectSessionRepository)(nil).CreateSession), ctx, userInfo)
}
