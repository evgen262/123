// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=./usecases_mock.go -package=portalsv2
//

// Package portalsv2 is a generated GoMock package.
package portalsv2

import (
	context "context"
	reflect "reflect"

	portalv2 "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity/portalv2"
	gomock "go.uber.org/mock/gomock"
)

// MockPortalsRepository is a mock of PortalsRepository interface.
type MockPortalsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPortalsRepositoryMockRecorder
	isgomock struct{}
}

// MockPortalsRepositoryMockRecorder is the mock recorder for MockPortalsRepository.
type MockPortalsRepositoryMockRecorder struct {
	mock *MockPortalsRepository
}

// NewMockPortalsRepository creates a new mock instance.
func NewMockPortalsRepository(ctrl *gomock.Controller) *MockPortalsRepository {
	mock := &MockPortalsRepository{ctrl: ctrl}
	mock.recorder = &MockPortalsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalsRepository) EXPECT() *MockPortalsRepositoryMockRecorder {
	return m.recorder
}

// Filter mocks base method.
func (m *MockPortalsRepository) Filter(ctx context.Context, filters *portalv2.FilterPortalsFilters, options *portalv2.FilterPortalsOptions) ([]*portalv2.PortalWithCounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", ctx, filters, options)
	ret0, _ := ret[0].([]*portalv2.PortalWithCounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter.
func (mr *MockPortalsRepositoryMockRecorder) Filter(ctx, filters, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockPortalsRepository)(nil).Filter), ctx, filters, options)
}

// MockComplexesRepository is a mock of ComplexesRepository interface.
type MockComplexesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockComplexesRepositoryMockRecorder
	isgomock struct{}
}

// MockComplexesRepositoryMockRecorder is the mock recorder for MockComplexesRepository.
type MockComplexesRepositoryMockRecorder struct {
	mock *MockComplexesRepository
}

// NewMockComplexesRepository creates a new mock instance.
func NewMockComplexesRepository(ctrl *gomock.Controller) *MockComplexesRepository {
	mock := &MockComplexesRepository{ctrl: ctrl}
	mock.recorder = &MockComplexesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComplexesRepository) EXPECT() *MockComplexesRepositoryMockRecorder {
	return m.recorder
}

// Filter mocks base method.
func (m *MockComplexesRepository) Filter(ctx context.Context, filters *portalv2.FilterComplexesFilters, options *portalv2.FilterComplexesOptions) ([]*portalv2.Complex, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", ctx, filters, options)
	ret0, _ := ret[0].([]*portalv2.Complex)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter.
func (mr *MockComplexesRepositoryMockRecorder) Filter(ctx, filters, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockComplexesRepository)(nil).Filter), ctx, filters, options)
}
