// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=./grpc_mock.go -package=grpc
//

// Package grpc is a generated GoMock package.
package grpc

import (
	context "context"
	reflect "reflect"

	authv1 "git.mos.ru/buch-cloud/moscow-team-2.0/pud/auth.git/internal/api/grpc/gen/infogorod/auth/auth/v1"
	entity "git.mos.ru/buch-cloud/moscow-team-2.0/pud/auth.git/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthInteractor is a mock of AuthInteractor interface.
type MockAuthInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockAuthInteractorMockRecorder
	isgomock struct{}
}

// MockAuthInteractorMockRecorder is the mock recorder for MockAuthInteractor.
type MockAuthInteractorMockRecorder struct {
	mock *MockAuthInteractor
}

// NewMockAuthInteractor creates a new mock instance.
func NewMockAuthInteractor(ctrl *gomock.Controller) *MockAuthInteractor {
	mock := &MockAuthInteractor{ctrl: ctrl}
	mock.recorder = &MockAuthInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthInteractor) EXPECT() *MockAuthInteractorMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockAuthInteractor) Auth(ctx context.Context, code, state, callbackURL string) (*entity.AuthInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", ctx, code, state, callbackURL)
	ret0, _ := ret[0].(*entity.AuthInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Auth indicates an expected call of Auth.
func (mr *MockAuthInteractorMockRecorder) Auth(ctx, code, state, callbackURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockAuthInteractor)(nil).Auth), ctx, code, state, callbackURL)
}

// GetAuthURL mocks base method.
func (m *MockAuthInteractor) GetAuthURL(ctx context.Context, callbackURL, clientID, clientSecret string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthURL", ctx, callbackURL, clientID, clientSecret)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthURL indicates an expected call of GetAuthURL.
func (mr *MockAuthInteractorMockRecorder) GetAuthURL(ctx, callbackURL, clientID, clientSecret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthURL", reflect.TypeOf((*MockAuthInteractor)(nil).GetAuthURL), ctx, callbackURL, clientID, clientSecret)
}

// GetEmployees mocks base method.
func (m *MockAuthInteractor) GetEmployees(ctx context.Context, params entity.EmployeeGetParams) ([]entity.EmployeeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployees", ctx, params)
	ret0, _ := ret[0].([]entity.EmployeeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployees indicates an expected call of GetEmployees.
func (mr *MockAuthInteractorMockRecorder) GetEmployees(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployees", reflect.TypeOf((*MockAuthInteractor)(nil).GetEmployees), ctx, params)
}

// GetUserInfo mocks base method.
func (m *MockAuthInteractor) GetUserInfo(ctx context.Context, accessToken string) (*entity.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", ctx, accessToken)
	ret0, _ := ret[0].(*entity.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockAuthInteractorMockRecorder) GetUserInfo(ctx, accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockAuthInteractor)(nil).GetUserInfo), ctx, accessToken)
}

// IsValidToken mocks base method.
func (m *MockAuthInteractor) IsValidToken(ctx context.Context, accessToken string) (*entity.TokenInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidToken", ctx, accessToken)
	ret0, _ := ret[0].(*entity.TokenInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsValidToken indicates an expected call of IsValidToken.
func (mr *MockAuthInteractorMockRecorder) IsValidToken(ctx, accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidToken", reflect.TypeOf((*MockAuthInteractor)(nil).IsValidToken), ctx, accessToken)
}

// LoginByCredentials mocks base method.
func (m *MockAuthInteractor) LoginByCredentials(ctx context.Context, clientID, clientSecret string) (*entity.AuthInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginByCredentials", ctx, clientID, clientSecret)
	ret0, _ := ret[0].(*entity.AuthInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginByCredentials indicates an expected call of LoginByCredentials.
func (mr *MockAuthInteractorMockRecorder) LoginByCredentials(ctx, clientID, clientSecret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginByCredentials", reflect.TypeOf((*MockAuthInteractor)(nil).LoginByCredentials), ctx, clientID, clientSecret)
}

// Logout mocks base method.
func (m *MockAuthInteractor) Logout(ctx context.Context, id, sessionID, registrationToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, id, sessionID, registrationToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockAuthInteractorMockRecorder) Logout(ctx, id, sessionID, registrationToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthInteractor)(nil).Logout), ctx, id, sessionID, registrationToken)
}

// RefreshToken mocks base method.
func (m *MockAuthInteractor) RefreshToken(ctx context.Context, id, sessionID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", ctx, id, sessionID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockAuthInteractorMockRecorder) RefreshToken(ctx, id, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockAuthInteractor)(nil).RefreshToken), ctx, id, sessionID)
}

// MockAuthPresenter is a mock of AuthPresenter interface.
type MockAuthPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockAuthPresenterMockRecorder
	isgomock struct{}
}

// MockAuthPresenterMockRecorder is the mock recorder for MockAuthPresenter.
type MockAuthPresenterMockRecorder struct {
	mock *MockAuthPresenter
}

// NewMockAuthPresenter creates a new mock instance.
func NewMockAuthPresenter(ctrl *gomock.Controller) *MockAuthPresenter {
	mock := &MockAuthPresenter{ctrl: ctrl}
	mock.recorder = &MockAuthPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthPresenter) EXPECT() *MockAuthPresenterMockRecorder {
	return m.recorder
}

// DeviceToPb mocks base method.
func (m *MockAuthPresenter) DeviceToPb(device *entity.Device) *authv1.AuthResponse_Device {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceToPb", device)
	ret0, _ := ret[0].(*authv1.AuthResponse_Device)
	return ret0
}

// DeviceToPb indicates an expected call of DeviceToPb.
func (mr *MockAuthPresenterMockRecorder) DeviceToPb(device any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceToPb", reflect.TypeOf((*MockAuthPresenter)(nil).DeviceToPb), device)
}

// EmployeesToPb mocks base method.
func (m *MockAuthPresenter) EmployeesToPb(entities []entity.EmployeeInfo) []*authv1.Employee {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmployeesToPb", entities)
	ret0, _ := ret[0].([]*authv1.Employee)
	return ret0
}

// EmployeesToPb indicates an expected call of EmployeesToPb.
func (mr *MockAuthPresenterMockRecorder) EmployeesToPb(entities any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmployeesToPb", reflect.TypeOf((*MockAuthPresenter)(nil).EmployeesToPb), entities)
}

// TokenInfoToPb mocks base method.
func (m *MockAuthPresenter) TokenInfoToPb(info *entity.TokenInfo) *authv1.TokenInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenInfoToPb", info)
	ret0, _ := ret[0].(*authv1.TokenInfo)
	return ret0
}

// TokenInfoToPb indicates an expected call of TokenInfoToPb.
func (mr *MockAuthPresenterMockRecorder) TokenInfoToPb(info any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenInfoToPb", reflect.TypeOf((*MockAuthPresenter)(nil).TokenInfoToPb), info)
}

// UserInfoToPb mocks base method.
func (m *MockAuthPresenter) UserInfoToPb(user *entity.UserInfo) *authv1.UserInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserInfoToPb", user)
	ret0, _ := ret[0].(*authv1.UserInfo)
	return ret0
}

// UserInfoToPb indicates an expected call of UserInfoToPb.
func (mr *MockAuthPresenterMockRecorder) UserInfoToPb(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserInfoToPb", reflect.TypeOf((*MockAuthPresenter)(nil).UserInfoToPb), user)
}

// UserToPb mocks base method.
func (m *MockAuthPresenter) UserToPb(user *entity.User) *authv1.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserToPb", user)
	ret0, _ := ret[0].(*authv1.User)
	return ret0
}

// UserToPb indicates an expected call of UserToPb.
func (mr *MockAuthPresenterMockRecorder) UserToPb(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserToPb", reflect.TypeOf((*MockAuthPresenter)(nil).UserToPb), user)
}
