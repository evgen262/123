// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=./http_mock.go -package=http
//

// Package http is a generated GoMock package.
package http

import (
	context "context"
	reflect "reflect"

	view "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/api/http/view"
	auth "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/api/http/view/auth"
	banners "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/api/http/view/banner"
	viewBanners "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/api/http/view/banners"
	employees "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/api/http/view/employees"
	employees_search "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/api/http/view/employees-search"
	events "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/api/http/view/events"
	news "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/api/http/view/news"
	portals "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/api/http/view/portals"
	portalsv2 "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/api/http/view/portalsv2"
	view0 "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/api/http/view/surveys"
	users "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/api/http/view/users"
	dtoBanners "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/dto/banners"
	news0 "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/dto/news"
	entity "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity"
	analytics "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity/analytics"
	auth0 "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity/auth"
	banner "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity/banner"
	entityBanners "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity/banners"
	employee "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity/employee"
	employees_search0 "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity/employees-search"
	event "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity/event"
	file "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity/file"
	news1 "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity/news"
	portal "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity/portal"
	portalv2 "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity/portalv2"
	entitySurveys "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity/survey"
	user "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity/user"
	gin "github.com/gin-gonic/gin"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockHTTPSrv is a mock of HTTPSrv interface.
type MockHTTPSrv struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPSrvMockRecorder
	isgomock struct{}
}

// MockHTTPSrvMockRecorder is the mock recorder for MockHTTPSrv.
type MockHTTPSrvMockRecorder struct {
	mock *MockHTTPSrv
}

// NewMockHTTPSrv creates a new mock instance.
func NewMockHTTPSrv(ctrl *gomock.Controller) *MockHTTPSrv {
	mock := &MockHTTPSrv{ctrl: ctrl}
	mock.recorder = &MockHTTPSrvMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPSrv) EXPECT() *MockHTTPSrvMockRecorder {
	return m.recorder
}

// ListenAndServe mocks base method.
func (m *MockHTTPSrv) ListenAndServe() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenAndServe")
	ret0, _ := ret[0].(error)
	return ret0
}

// ListenAndServe indicates an expected call of ListenAndServe.
func (mr *MockHTTPSrvMockRecorder) ListenAndServe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenAndServe", reflect.TypeOf((*MockHTTPSrv)(nil).ListenAndServe))
}

// Shutdown mocks base method.
func (m *MockHTTPSrv) Shutdown(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockHTTPSrvMockRecorder) Shutdown(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockHTTPSrv)(nil).Shutdown), ctx)
}

// MockPortalsHandlers is a mock of PortalsHandlers interface.
type MockPortalsHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockPortalsHandlersMockRecorder
	isgomock struct{}
}

// MockPortalsHandlersMockRecorder is the mock recorder for MockPortalsHandlers.
type MockPortalsHandlersMockRecorder struct {
	mock *MockPortalsHandlers
}

// NewMockPortalsHandlers creates a new mock instance.
func NewMockPortalsHandlers(ctrl *gomock.Controller) *MockPortalsHandlers {
	mock := &MockPortalsHandlers{ctrl: ctrl}
	mock.recorder = &MockPortalsHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalsHandlers) EXPECT() *MockPortalsHandlersMockRecorder {
	return m.recorder
}

// addFeature mocks base method.
func (m *MockPortalsHandlers) addFeature(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "addFeature", c)
}

// addFeature indicates an expected call of addFeature.
func (mr *MockPortalsHandlersMockRecorder) addFeature(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addFeature", reflect.TypeOf((*MockPortalsHandlers)(nil).addFeature), c)
}

// addFeatures mocks base method.
func (m *MockPortalsHandlers) addFeatures(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "addFeatures", c)
}

// addFeatures indicates an expected call of addFeatures.
func (mr *MockPortalsHandlersMockRecorder) addFeatures(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addFeatures", reflect.TypeOf((*MockPortalsHandlers)(nil).addFeatures), c)
}

// addImage mocks base method.
func (m *MockPortalsHandlers) addImage(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "addImage", c)
}

// addImage indicates an expected call of addImage.
func (mr *MockPortalsHandlersMockRecorder) addImage(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addImage", reflect.TypeOf((*MockPortalsHandlers)(nil).addImage), c)
}

// addPortal mocks base method.
func (m *MockPortalsHandlers) addPortal(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "addPortal", c)
}

// addPortal indicates an expected call of addPortal.
func (mr *MockPortalsHandlersMockRecorder) addPortal(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addPortal", reflect.TypeOf((*MockPortalsHandlers)(nil).addPortal), c)
}

// addPortals mocks base method.
func (m *MockPortalsHandlers) addPortals(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "addPortals", c)
}

// addPortals indicates an expected call of addPortals.
func (mr *MockPortalsHandlersMockRecorder) addPortals(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addPortals", reflect.TypeOf((*MockPortalsHandlers)(nil).addPortals), c)
}

// addQuestion mocks base method.
func (m *MockPortalsHandlers) addQuestion(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "addQuestion", c)
}

// addQuestion indicates an expected call of addQuestion.
func (mr *MockPortalsHandlersMockRecorder) addQuestion(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addQuestion", reflect.TypeOf((*MockPortalsHandlers)(nil).addQuestion), c)
}

// addQuestions mocks base method.
func (m *MockPortalsHandlers) addQuestions(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "addQuestions", c)
}

// addQuestions indicates an expected call of addQuestions.
func (mr *MockPortalsHandlersMockRecorder) addQuestions(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addQuestions", reflect.TypeOf((*MockPortalsHandlers)(nil).addQuestions), c)
}

// deleteFeature mocks base method.
func (m *MockPortalsHandlers) deleteFeature(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "deleteFeature", c)
}

// deleteFeature indicates an expected call of deleteFeature.
func (mr *MockPortalsHandlersMockRecorder) deleteFeature(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteFeature", reflect.TypeOf((*MockPortalsHandlers)(nil).deleteFeature), c)
}

// deleteImage mocks base method.
func (m *MockPortalsHandlers) deleteImage(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "deleteImage", c)
}

// deleteImage indicates an expected call of deleteImage.
func (mr *MockPortalsHandlersMockRecorder) deleteImage(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteImage", reflect.TypeOf((*MockPortalsHandlers)(nil).deleteImage), c)
}

// deletePortal mocks base method.
func (m *MockPortalsHandlers) deletePortal(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "deletePortal", c)
}

// deletePortal indicates an expected call of deletePortal.
func (mr *MockPortalsHandlersMockRecorder) deletePortal(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deletePortal", reflect.TypeOf((*MockPortalsHandlers)(nil).deletePortal), c)
}

// deleteQuestion mocks base method.
func (m *MockPortalsHandlers) deleteQuestion(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "deleteQuestion", c)
}

// deleteQuestion indicates an expected call of deleteQuestion.
func (mr *MockPortalsHandlersMockRecorder) deleteQuestion(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteQuestion", reflect.TypeOf((*MockPortalsHandlers)(nil).deleteQuestion), c)
}

// filterOrganizations mocks base method.
func (m *MockPortalsHandlers) filterOrganizations(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "filterOrganizations", c)
}

// filterOrganizations indicates an expected call of filterOrganizations.
func (mr *MockPortalsHandlersMockRecorder) filterOrganizations(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "filterOrganizations", reflect.TypeOf((*MockPortalsHandlers)(nil).filterOrganizations), c)
}

// filterPortals mocks base method.
func (m *MockPortalsHandlers) filterPortals(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "filterPortals", c)
}

// filterPortals indicates an expected call of filterPortals.
func (mr *MockPortalsHandlersMockRecorder) filterPortals(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "filterPortals", reflect.TypeOf((*MockPortalsHandlers)(nil).filterPortals), c)
}

// filterPortalsByAdmin mocks base method.
func (m *MockPortalsHandlers) filterPortalsByAdmin(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "filterPortalsByAdmin", c)
}

// filterPortalsByAdmin indicates an expected call of filterPortalsByAdmin.
func (mr *MockPortalsHandlersMockRecorder) filterPortalsByAdmin(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "filterPortalsByAdmin", reflect.TypeOf((*MockPortalsHandlers)(nil).filterPortalsByAdmin), c)
}

// getFeature mocks base method.
func (m *MockPortalsHandlers) getFeature(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getFeature", c)
}

// getFeature indicates an expected call of getFeature.
func (mr *MockPortalsHandlersMockRecorder) getFeature(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getFeature", reflect.TypeOf((*MockPortalsHandlers)(nil).getFeature), c)
}

// getFeatureByAdmin mocks base method.
func (m *MockPortalsHandlers) getFeatureByAdmin(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getFeatureByAdmin", c)
}

// getFeatureByAdmin indicates an expected call of getFeatureByAdmin.
func (mr *MockPortalsHandlersMockRecorder) getFeatureByAdmin(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getFeatureByAdmin", reflect.TypeOf((*MockPortalsHandlers)(nil).getFeatureByAdmin), c)
}

// getFeatures mocks base method.
func (m *MockPortalsHandlers) getFeatures(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getFeatures", c)
}

// getFeatures indicates an expected call of getFeatures.
func (mr *MockPortalsHandlersMockRecorder) getFeatures(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getFeatures", reflect.TypeOf((*MockPortalsHandlers)(nil).getFeatures), c)
}

// getFeaturesByAdmin mocks base method.
func (m *MockPortalsHandlers) getFeaturesByAdmin(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getFeaturesByAdmin", c)
}

// getFeaturesByAdmin indicates an expected call of getFeaturesByAdmin.
func (mr *MockPortalsHandlersMockRecorder) getFeaturesByAdmin(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getFeaturesByAdmin", reflect.TypeOf((*MockPortalsHandlers)(nil).getFeaturesByAdmin), c)
}

// getImageByAdmin mocks base method.
func (m *MockPortalsHandlers) getImageByAdmin(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getImageByAdmin", c)
}

// getImageByAdmin indicates an expected call of getImageByAdmin.
func (mr *MockPortalsHandlersMockRecorder) getImageByAdmin(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getImageByAdmin", reflect.TypeOf((*MockPortalsHandlers)(nil).getImageByAdmin), c)
}

// getImages mocks base method.
func (m *MockPortalsHandlers) getImages(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getImages", c)
}

// getImages indicates an expected call of getImages.
func (mr *MockPortalsHandlersMockRecorder) getImages(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getImages", reflect.TypeOf((*MockPortalsHandlers)(nil).getImages), c)
}

// getImagesByAdmin mocks base method.
func (m *MockPortalsHandlers) getImagesByAdmin(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getImagesByAdmin", c)
}

// getImagesByAdmin indicates an expected call of getImagesByAdmin.
func (mr *MockPortalsHandlersMockRecorder) getImagesByAdmin(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getImagesByAdmin", reflect.TypeOf((*MockPortalsHandlers)(nil).getImagesByAdmin), c)
}

// getPortal mocks base method.
func (m *MockPortalsHandlers) getPortal(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getPortal", c)
}

// getPortal indicates an expected call of getPortal.
func (mr *MockPortalsHandlersMockRecorder) getPortal(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getPortal", reflect.TypeOf((*MockPortalsHandlers)(nil).getPortal), c)
}

// getPortalByAdmin mocks base method.
func (m *MockPortalsHandlers) getPortalByAdmin(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getPortalByAdmin", c)
}

// getPortalByAdmin indicates an expected call of getPortalByAdmin.
func (mr *MockPortalsHandlersMockRecorder) getPortalByAdmin(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getPortalByAdmin", reflect.TypeOf((*MockPortalsHandlers)(nil).getPortalByAdmin), c)
}

// getPortals mocks base method.
func (m *MockPortalsHandlers) getPortals(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getPortals", c)
}

// getPortals indicates an expected call of getPortals.
func (mr *MockPortalsHandlersMockRecorder) getPortals(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getPortals", reflect.TypeOf((*MockPortalsHandlers)(nil).getPortals), c)
}

// getPortalsByAdmin mocks base method.
func (m *MockPortalsHandlers) getPortalsByAdmin(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getPortalsByAdmin", c)
}

// getPortalsByAdmin indicates an expected call of getPortalsByAdmin.
func (mr *MockPortalsHandlersMockRecorder) getPortalsByAdmin(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getPortalsByAdmin", reflect.TypeOf((*MockPortalsHandlers)(nil).getPortalsByAdmin), c)
}

// getQuestion mocks base method.
func (m *MockPortalsHandlers) getQuestion(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getQuestion", c)
}

// getQuestion indicates an expected call of getQuestion.
func (mr *MockPortalsHandlersMockRecorder) getQuestion(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getQuestion", reflect.TypeOf((*MockPortalsHandlers)(nil).getQuestion), c)
}

// getQuestionByAdmin mocks base method.
func (m *MockPortalsHandlers) getQuestionByAdmin(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getQuestionByAdmin", c)
}

// getQuestionByAdmin indicates an expected call of getQuestionByAdmin.
func (mr *MockPortalsHandlersMockRecorder) getQuestionByAdmin(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getQuestionByAdmin", reflect.TypeOf((*MockPortalsHandlers)(nil).getQuestionByAdmin), c)
}

// getQuestions mocks base method.
func (m *MockPortalsHandlers) getQuestions(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getQuestions", c)
}

// getQuestions indicates an expected call of getQuestions.
func (mr *MockPortalsHandlersMockRecorder) getQuestions(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getQuestions", reflect.TypeOf((*MockPortalsHandlers)(nil).getQuestions), c)
}

// getQuestionsByAdmin mocks base method.
func (m *MockPortalsHandlers) getQuestionsByAdmin(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getQuestionsByAdmin", c)
}

// getQuestionsByAdmin indicates an expected call of getQuestionsByAdmin.
func (mr *MockPortalsHandlersMockRecorder) getQuestionsByAdmin(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getQuestionsByAdmin", reflect.TypeOf((*MockPortalsHandlers)(nil).getQuestionsByAdmin), c)
}

// getRawImage mocks base method.
func (m *MockPortalsHandlers) getRawImage(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getRawImage", c)
}

// getRawImage indicates an expected call of getRawImage.
func (mr *MockPortalsHandlersMockRecorder) getRawImage(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getRawImage", reflect.TypeOf((*MockPortalsHandlers)(nil).getRawImage), c)
}

// linkOrganizations mocks base method.
func (m *MockPortalsHandlers) linkOrganizations(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "linkOrganizations", c)
}

// linkOrganizations indicates an expected call of linkOrganizations.
func (mr *MockPortalsHandlersMockRecorder) linkOrganizations(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "linkOrganizations", reflect.TypeOf((*MockPortalsHandlers)(nil).linkOrganizations), c)
}

// unlinkOrganizations mocks base method.
func (m *MockPortalsHandlers) unlinkOrganizations(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "unlinkOrganizations", c)
}

// unlinkOrganizations indicates an expected call of unlinkOrganizations.
func (mr *MockPortalsHandlersMockRecorder) unlinkOrganizations(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "unlinkOrganizations", reflect.TypeOf((*MockPortalsHandlers)(nil).unlinkOrganizations), c)
}

// updateFeature mocks base method.
func (m *MockPortalsHandlers) updateFeature(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "updateFeature", c)
}

// updateFeature indicates an expected call of updateFeature.
func (mr *MockPortalsHandlersMockRecorder) updateFeature(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateFeature", reflect.TypeOf((*MockPortalsHandlers)(nil).updateFeature), c)
}

// updatePortal mocks base method.
func (m *MockPortalsHandlers) updatePortal(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "updatePortal", c)
}

// updatePortal indicates an expected call of updatePortal.
func (mr *MockPortalsHandlersMockRecorder) updatePortal(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updatePortal", reflect.TypeOf((*MockPortalsHandlers)(nil).updatePortal), c)
}

// updateQuestion mocks base method.
func (m *MockPortalsHandlers) updateQuestion(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "updateQuestion", c)
}

// updateQuestion indicates an expected call of updateQuestion.
func (mr *MockPortalsHandlersMockRecorder) updateQuestion(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateQuestion", reflect.TypeOf((*MockPortalsHandlers)(nil).updateQuestion), c)
}

// MockPortalsFeatureHandlers is a mock of PortalsFeatureHandlers interface.
type MockPortalsFeatureHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockPortalsFeatureHandlersMockRecorder
	isgomock struct{}
}

// MockPortalsFeatureHandlersMockRecorder is the mock recorder for MockPortalsFeatureHandlers.
type MockPortalsFeatureHandlersMockRecorder struct {
	mock *MockPortalsFeatureHandlers
}

// NewMockPortalsFeatureHandlers creates a new mock instance.
func NewMockPortalsFeatureHandlers(ctrl *gomock.Controller) *MockPortalsFeatureHandlers {
	mock := &MockPortalsFeatureHandlers{ctrl: ctrl}
	mock.recorder = &MockPortalsFeatureHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalsFeatureHandlers) EXPECT() *MockPortalsFeatureHandlersMockRecorder {
	return m.recorder
}

// addFeature mocks base method.
func (m *MockPortalsFeatureHandlers) addFeature(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "addFeature", c)
}

// addFeature indicates an expected call of addFeature.
func (mr *MockPortalsFeatureHandlersMockRecorder) addFeature(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addFeature", reflect.TypeOf((*MockPortalsFeatureHandlers)(nil).addFeature), c)
}

// addFeatures mocks base method.
func (m *MockPortalsFeatureHandlers) addFeatures(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "addFeatures", c)
}

// addFeatures indicates an expected call of addFeatures.
func (mr *MockPortalsFeatureHandlersMockRecorder) addFeatures(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addFeatures", reflect.TypeOf((*MockPortalsFeatureHandlers)(nil).addFeatures), c)
}

// deleteFeature mocks base method.
func (m *MockPortalsFeatureHandlers) deleteFeature(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "deleteFeature", c)
}

// deleteFeature indicates an expected call of deleteFeature.
func (mr *MockPortalsFeatureHandlersMockRecorder) deleteFeature(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteFeature", reflect.TypeOf((*MockPortalsFeatureHandlers)(nil).deleteFeature), c)
}

// getFeature mocks base method.
func (m *MockPortalsFeatureHandlers) getFeature(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getFeature", c)
}

// getFeature indicates an expected call of getFeature.
func (mr *MockPortalsFeatureHandlersMockRecorder) getFeature(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getFeature", reflect.TypeOf((*MockPortalsFeatureHandlers)(nil).getFeature), c)
}

// getFeatureByAdmin mocks base method.
func (m *MockPortalsFeatureHandlers) getFeatureByAdmin(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getFeatureByAdmin", c)
}

// getFeatureByAdmin indicates an expected call of getFeatureByAdmin.
func (mr *MockPortalsFeatureHandlersMockRecorder) getFeatureByAdmin(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getFeatureByAdmin", reflect.TypeOf((*MockPortalsFeatureHandlers)(nil).getFeatureByAdmin), c)
}

// getFeatures mocks base method.
func (m *MockPortalsFeatureHandlers) getFeatures(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getFeatures", c)
}

// getFeatures indicates an expected call of getFeatures.
func (mr *MockPortalsFeatureHandlersMockRecorder) getFeatures(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getFeatures", reflect.TypeOf((*MockPortalsFeatureHandlers)(nil).getFeatures), c)
}

// getFeaturesByAdmin mocks base method.
func (m *MockPortalsFeatureHandlers) getFeaturesByAdmin(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getFeaturesByAdmin", c)
}

// getFeaturesByAdmin indicates an expected call of getFeaturesByAdmin.
func (mr *MockPortalsFeatureHandlersMockRecorder) getFeaturesByAdmin(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getFeaturesByAdmin", reflect.TypeOf((*MockPortalsFeatureHandlers)(nil).getFeaturesByAdmin), c)
}

// updateFeature mocks base method.
func (m *MockPortalsFeatureHandlers) updateFeature(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "updateFeature", c)
}

// updateFeature indicates an expected call of updateFeature.
func (mr *MockPortalsFeatureHandlersMockRecorder) updateFeature(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateFeature", reflect.TypeOf((*MockPortalsFeatureHandlers)(nil).updateFeature), c)
}

// MockPortalsImageHandlers is a mock of PortalsImageHandlers interface.
type MockPortalsImageHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockPortalsImageHandlersMockRecorder
	isgomock struct{}
}

// MockPortalsImageHandlersMockRecorder is the mock recorder for MockPortalsImageHandlers.
type MockPortalsImageHandlersMockRecorder struct {
	mock *MockPortalsImageHandlers
}

// NewMockPortalsImageHandlers creates a new mock instance.
func NewMockPortalsImageHandlers(ctrl *gomock.Controller) *MockPortalsImageHandlers {
	mock := &MockPortalsImageHandlers{ctrl: ctrl}
	mock.recorder = &MockPortalsImageHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalsImageHandlers) EXPECT() *MockPortalsImageHandlersMockRecorder {
	return m.recorder
}

// addImage mocks base method.
func (m *MockPortalsImageHandlers) addImage(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "addImage", c)
}

// addImage indicates an expected call of addImage.
func (mr *MockPortalsImageHandlersMockRecorder) addImage(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addImage", reflect.TypeOf((*MockPortalsImageHandlers)(nil).addImage), c)
}

// deleteImage mocks base method.
func (m *MockPortalsImageHandlers) deleteImage(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "deleteImage", c)
}

// deleteImage indicates an expected call of deleteImage.
func (mr *MockPortalsImageHandlersMockRecorder) deleteImage(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteImage", reflect.TypeOf((*MockPortalsImageHandlers)(nil).deleteImage), c)
}

// getImageByAdmin mocks base method.
func (m *MockPortalsImageHandlers) getImageByAdmin(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getImageByAdmin", c)
}

// getImageByAdmin indicates an expected call of getImageByAdmin.
func (mr *MockPortalsImageHandlersMockRecorder) getImageByAdmin(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getImageByAdmin", reflect.TypeOf((*MockPortalsImageHandlers)(nil).getImageByAdmin), c)
}

// getImages mocks base method.
func (m *MockPortalsImageHandlers) getImages(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getImages", c)
}

// getImages indicates an expected call of getImages.
func (mr *MockPortalsImageHandlersMockRecorder) getImages(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getImages", reflect.TypeOf((*MockPortalsImageHandlers)(nil).getImages), c)
}

// getImagesByAdmin mocks base method.
func (m *MockPortalsImageHandlers) getImagesByAdmin(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getImagesByAdmin", c)
}

// getImagesByAdmin indicates an expected call of getImagesByAdmin.
func (mr *MockPortalsImageHandlersMockRecorder) getImagesByAdmin(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getImagesByAdmin", reflect.TypeOf((*MockPortalsImageHandlers)(nil).getImagesByAdmin), c)
}

// getRawImage mocks base method.
func (m *MockPortalsImageHandlers) getRawImage(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getRawImage", c)
}

// getRawImage indicates an expected call of getRawImage.
func (mr *MockPortalsImageHandlersMockRecorder) getRawImage(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getRawImage", reflect.TypeOf((*MockPortalsImageHandlers)(nil).getRawImage), c)
}

// MockPortalsPortalHandlers is a mock of PortalsPortalHandlers interface.
type MockPortalsPortalHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockPortalsPortalHandlersMockRecorder
	isgomock struct{}
}

// MockPortalsPortalHandlersMockRecorder is the mock recorder for MockPortalsPortalHandlers.
type MockPortalsPortalHandlersMockRecorder struct {
	mock *MockPortalsPortalHandlers
}

// NewMockPortalsPortalHandlers creates a new mock instance.
func NewMockPortalsPortalHandlers(ctrl *gomock.Controller) *MockPortalsPortalHandlers {
	mock := &MockPortalsPortalHandlers{ctrl: ctrl}
	mock.recorder = &MockPortalsPortalHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalsPortalHandlers) EXPECT() *MockPortalsPortalHandlersMockRecorder {
	return m.recorder
}

// addPortal mocks base method.
func (m *MockPortalsPortalHandlers) addPortal(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "addPortal", c)
}

// addPortal indicates an expected call of addPortal.
func (mr *MockPortalsPortalHandlersMockRecorder) addPortal(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addPortal", reflect.TypeOf((*MockPortalsPortalHandlers)(nil).addPortal), c)
}

// addPortals mocks base method.
func (m *MockPortalsPortalHandlers) addPortals(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "addPortals", c)
}

// addPortals indicates an expected call of addPortals.
func (mr *MockPortalsPortalHandlersMockRecorder) addPortals(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addPortals", reflect.TypeOf((*MockPortalsPortalHandlers)(nil).addPortals), c)
}

// deletePortal mocks base method.
func (m *MockPortalsPortalHandlers) deletePortal(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "deletePortal", c)
}

// deletePortal indicates an expected call of deletePortal.
func (mr *MockPortalsPortalHandlersMockRecorder) deletePortal(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deletePortal", reflect.TypeOf((*MockPortalsPortalHandlers)(nil).deletePortal), c)
}

// filterPortals mocks base method.
func (m *MockPortalsPortalHandlers) filterPortals(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "filterPortals", c)
}

// filterPortals indicates an expected call of filterPortals.
func (mr *MockPortalsPortalHandlersMockRecorder) filterPortals(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "filterPortals", reflect.TypeOf((*MockPortalsPortalHandlers)(nil).filterPortals), c)
}

// filterPortalsByAdmin mocks base method.
func (m *MockPortalsPortalHandlers) filterPortalsByAdmin(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "filterPortalsByAdmin", c)
}

// filterPortalsByAdmin indicates an expected call of filterPortalsByAdmin.
func (mr *MockPortalsPortalHandlersMockRecorder) filterPortalsByAdmin(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "filterPortalsByAdmin", reflect.TypeOf((*MockPortalsPortalHandlers)(nil).filterPortalsByAdmin), c)
}

// getPortal mocks base method.
func (m *MockPortalsPortalHandlers) getPortal(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getPortal", c)
}

// getPortal indicates an expected call of getPortal.
func (mr *MockPortalsPortalHandlersMockRecorder) getPortal(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getPortal", reflect.TypeOf((*MockPortalsPortalHandlers)(nil).getPortal), c)
}

// getPortalByAdmin mocks base method.
func (m *MockPortalsPortalHandlers) getPortalByAdmin(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getPortalByAdmin", c)
}

// getPortalByAdmin indicates an expected call of getPortalByAdmin.
func (mr *MockPortalsPortalHandlersMockRecorder) getPortalByAdmin(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getPortalByAdmin", reflect.TypeOf((*MockPortalsPortalHandlers)(nil).getPortalByAdmin), c)
}

// getPortals mocks base method.
func (m *MockPortalsPortalHandlers) getPortals(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getPortals", c)
}

// getPortals indicates an expected call of getPortals.
func (mr *MockPortalsPortalHandlersMockRecorder) getPortals(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getPortals", reflect.TypeOf((*MockPortalsPortalHandlers)(nil).getPortals), c)
}

// getPortalsByAdmin mocks base method.
func (m *MockPortalsPortalHandlers) getPortalsByAdmin(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getPortalsByAdmin", c)
}

// getPortalsByAdmin indicates an expected call of getPortalsByAdmin.
func (mr *MockPortalsPortalHandlersMockRecorder) getPortalsByAdmin(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getPortalsByAdmin", reflect.TypeOf((*MockPortalsPortalHandlers)(nil).getPortalsByAdmin), c)
}

// updatePortal mocks base method.
func (m *MockPortalsPortalHandlers) updatePortal(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "updatePortal", c)
}

// updatePortal indicates an expected call of updatePortal.
func (mr *MockPortalsPortalHandlersMockRecorder) updatePortal(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updatePortal", reflect.TypeOf((*MockPortalsPortalHandlers)(nil).updatePortal), c)
}

// MockPortalsQuestionHandlers is a mock of PortalsQuestionHandlers interface.
type MockPortalsQuestionHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockPortalsQuestionHandlersMockRecorder
	isgomock struct{}
}

// MockPortalsQuestionHandlersMockRecorder is the mock recorder for MockPortalsQuestionHandlers.
type MockPortalsQuestionHandlersMockRecorder struct {
	mock *MockPortalsQuestionHandlers
}

// NewMockPortalsQuestionHandlers creates a new mock instance.
func NewMockPortalsQuestionHandlers(ctrl *gomock.Controller) *MockPortalsQuestionHandlers {
	mock := &MockPortalsQuestionHandlers{ctrl: ctrl}
	mock.recorder = &MockPortalsQuestionHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalsQuestionHandlers) EXPECT() *MockPortalsQuestionHandlersMockRecorder {
	return m.recorder
}

// addQuestion mocks base method.
func (m *MockPortalsQuestionHandlers) addQuestion(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "addQuestion", c)
}

// addQuestion indicates an expected call of addQuestion.
func (mr *MockPortalsQuestionHandlersMockRecorder) addQuestion(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addQuestion", reflect.TypeOf((*MockPortalsQuestionHandlers)(nil).addQuestion), c)
}

// addQuestions mocks base method.
func (m *MockPortalsQuestionHandlers) addQuestions(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "addQuestions", c)
}

// addQuestions indicates an expected call of addQuestions.
func (mr *MockPortalsQuestionHandlersMockRecorder) addQuestions(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addQuestions", reflect.TypeOf((*MockPortalsQuestionHandlers)(nil).addQuestions), c)
}

// deleteQuestion mocks base method.
func (m *MockPortalsQuestionHandlers) deleteQuestion(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "deleteQuestion", c)
}

// deleteQuestion indicates an expected call of deleteQuestion.
func (mr *MockPortalsQuestionHandlersMockRecorder) deleteQuestion(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteQuestion", reflect.TypeOf((*MockPortalsQuestionHandlers)(nil).deleteQuestion), c)
}

// getQuestion mocks base method.
func (m *MockPortalsQuestionHandlers) getQuestion(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getQuestion", c)
}

// getQuestion indicates an expected call of getQuestion.
func (mr *MockPortalsQuestionHandlersMockRecorder) getQuestion(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getQuestion", reflect.TypeOf((*MockPortalsQuestionHandlers)(nil).getQuestion), c)
}

// getQuestionByAdmin mocks base method.
func (m *MockPortalsQuestionHandlers) getQuestionByAdmin(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getQuestionByAdmin", c)
}

// getQuestionByAdmin indicates an expected call of getQuestionByAdmin.
func (mr *MockPortalsQuestionHandlersMockRecorder) getQuestionByAdmin(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getQuestionByAdmin", reflect.TypeOf((*MockPortalsQuestionHandlers)(nil).getQuestionByAdmin), c)
}

// getQuestions mocks base method.
func (m *MockPortalsQuestionHandlers) getQuestions(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getQuestions", c)
}

// getQuestions indicates an expected call of getQuestions.
func (mr *MockPortalsQuestionHandlersMockRecorder) getQuestions(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getQuestions", reflect.TypeOf((*MockPortalsQuestionHandlers)(nil).getQuestions), c)
}

// getQuestionsByAdmin mocks base method.
func (m *MockPortalsQuestionHandlers) getQuestionsByAdmin(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getQuestionsByAdmin", c)
}

// getQuestionsByAdmin indicates an expected call of getQuestionsByAdmin.
func (mr *MockPortalsQuestionHandlersMockRecorder) getQuestionsByAdmin(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getQuestionsByAdmin", reflect.TypeOf((*MockPortalsQuestionHandlers)(nil).getQuestionsByAdmin), c)
}

// updateQuestion mocks base method.
func (m *MockPortalsQuestionHandlers) updateQuestion(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "updateQuestion", c)
}

// updateQuestion indicates an expected call of updateQuestion.
func (mr *MockPortalsQuestionHandlersMockRecorder) updateQuestion(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateQuestion", reflect.TypeOf((*MockPortalsQuestionHandlers)(nil).updateQuestion), c)
}

// MockPortalsOrganizationHandlers is a mock of PortalsOrganizationHandlers interface.
type MockPortalsOrganizationHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockPortalsOrganizationHandlersMockRecorder
	isgomock struct{}
}

// MockPortalsOrganizationHandlersMockRecorder is the mock recorder for MockPortalsOrganizationHandlers.
type MockPortalsOrganizationHandlersMockRecorder struct {
	mock *MockPortalsOrganizationHandlers
}

// NewMockPortalsOrganizationHandlers creates a new mock instance.
func NewMockPortalsOrganizationHandlers(ctrl *gomock.Controller) *MockPortalsOrganizationHandlers {
	mock := &MockPortalsOrganizationHandlers{ctrl: ctrl}
	mock.recorder = &MockPortalsOrganizationHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalsOrganizationHandlers) EXPECT() *MockPortalsOrganizationHandlersMockRecorder {
	return m.recorder
}

// filterOrganizations mocks base method.
func (m *MockPortalsOrganizationHandlers) filterOrganizations(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "filterOrganizations", c)
}

// filterOrganizations indicates an expected call of filterOrganizations.
func (mr *MockPortalsOrganizationHandlersMockRecorder) filterOrganizations(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "filterOrganizations", reflect.TypeOf((*MockPortalsOrganizationHandlers)(nil).filterOrganizations), c)
}

// linkOrganizations mocks base method.
func (m *MockPortalsOrganizationHandlers) linkOrganizations(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "linkOrganizations", c)
}

// linkOrganizations indicates an expected call of linkOrganizations.
func (mr *MockPortalsOrganizationHandlersMockRecorder) linkOrganizations(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "linkOrganizations", reflect.TypeOf((*MockPortalsOrganizationHandlers)(nil).linkOrganizations), c)
}

// unlinkOrganizations mocks base method.
func (m *MockPortalsOrganizationHandlers) unlinkOrganizations(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "unlinkOrganizations", c)
}

// unlinkOrganizations indicates an expected call of unlinkOrganizations.
func (mr *MockPortalsOrganizationHandlersMockRecorder) unlinkOrganizations(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "unlinkOrganizations", reflect.TypeOf((*MockPortalsOrganizationHandlers)(nil).unlinkOrganizations), c)
}

// MockAuthHandlers is a mock of AuthHandlers interface.
type MockAuthHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockAuthHandlersMockRecorder
	isgomock struct{}
}

// MockAuthHandlersMockRecorder is the mock recorder for MockAuthHandlers.
type MockAuthHandlersMockRecorder struct {
	mock *MockAuthHandlers
}

// NewMockAuthHandlers creates a new mock instance.
func NewMockAuthHandlers(ctrl *gomock.Controller) *MockAuthHandlers {
	mock := &MockAuthHandlers{ctrl: ctrl}
	mock.recorder = &MockAuthHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthHandlers) EXPECT() *MockAuthHandlersMockRecorder {
	return m.recorder
}

// auth mocks base method.
func (m *MockAuthHandlers) auth(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "auth", c)
}

// auth indicates an expected call of auth.
func (mr *MockAuthHandlersMockRecorder) auth(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "auth", reflect.TypeOf((*MockAuthHandlers)(nil).auth), c)
}

// logout mocks base method.
func (m *MockAuthHandlers) logout(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "logout", c)
}

// logout indicates an expected call of logout.
func (mr *MockAuthHandlersMockRecorder) logout(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "logout", reflect.TypeOf((*MockAuthHandlers)(nil).logout), c)
}

// refresh mocks base method.
func (m *MockAuthHandlers) refresh(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "refresh", c)
}

// refresh indicates an expected call of refresh.
func (mr *MockAuthHandlersMockRecorder) refresh(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "refresh", reflect.TypeOf((*MockAuthHandlers)(nil).refresh), c)
}

// MockProxyHandlers is a mock of ProxyHandlers interface.
type MockProxyHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockProxyHandlersMockRecorder
	isgomock struct{}
}

// MockProxyHandlersMockRecorder is the mock recorder for MockProxyHandlers.
type MockProxyHandlersMockRecorder struct {
	mock *MockProxyHandlers
}

// NewMockProxyHandlers creates a new mock instance.
func NewMockProxyHandlers(ctrl *gomock.Controller) *MockProxyHandlers {
	mock := &MockProxyHandlers{ctrl: ctrl}
	mock.recorder = &MockProxyHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProxyHandlers) EXPECT() *MockProxyHandlersMockRecorder {
	return m.recorder
}

// listCalendarEvents mocks base method.
func (m *MockProxyHandlers) listCalendarEvents(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "listCalendarEvents", c)
}

// listCalendarEvents indicates an expected call of listCalendarEvents.
func (mr *MockProxyHandlersMockRecorder) listCalendarEvents(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "listCalendarEvents", reflect.TypeOf((*MockProxyHandlers)(nil).listCalendarEvents), c)
}

// listCalendarEventsLinks mocks base method.
func (m *MockProxyHandlers) listCalendarEventsLinks(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "listCalendarEventsLinks", c)
}

// listCalendarEventsLinks indicates an expected call of listCalendarEventsLinks.
func (mr *MockProxyHandlersMockRecorder) listCalendarEventsLinks(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "listCalendarEventsLinks", reflect.TypeOf((*MockProxyHandlers)(nil).listCalendarEventsLinks), c)
}

// listHomeBanners mocks base method.
func (m *MockProxyHandlers) listHomeBanners(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "listHomeBanners", c)
}

// listHomeBanners indicates an expected call of listHomeBanners.
func (mr *MockProxyHandlersMockRecorder) listHomeBanners(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "listHomeBanners", reflect.TypeOf((*MockProxyHandlers)(nil).listHomeBanners), c)
}

// MockProxyInteractor is a mock of ProxyInteractor interface.
type MockProxyInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockProxyInteractorMockRecorder
	isgomock struct{}
}

// MockProxyInteractorMockRecorder is the mock recorder for MockProxyInteractor.
type MockProxyInteractorMockRecorder struct {
	mock *MockProxyInteractor
}

// NewMockProxyInteractor creates a new mock instance.
func NewMockProxyInteractor(ctrl *gomock.Controller) *MockProxyInteractor {
	mock := &MockProxyInteractor{ctrl: ctrl}
	mock.recorder = &MockProxyInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProxyInteractor) EXPECT() *MockProxyInteractorMockRecorder {
	return m.recorder
}

// ListCalendarEvents mocks base method.
func (m *MockProxyInteractor) ListCalendarEvents(ctx context.Context, req event.CalendarEventRequest) (*event.CalendarEventsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCalendarEvents", ctx, req)
	ret0, _ := ret[0].(*event.CalendarEventsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCalendarEvents indicates an expected call of ListCalendarEvents.
func (mr *MockProxyInteractorMockRecorder) ListCalendarEvents(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCalendarEvents", reflect.TypeOf((*MockProxyInteractor)(nil).ListCalendarEvents), ctx, req)
}

// ListCalendarEventsLinks mocks base method.
func (m *MockProxyInteractor) ListCalendarEventsLinks(ctx context.Context, req event.CalendarEventLinksRequest) ([]*event.CalendarEventLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCalendarEventsLinks", ctx, req)
	ret0, _ := ret[0].([]*event.CalendarEventLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCalendarEventsLinks indicates an expected call of ListCalendarEventsLinks.
func (mr *MockProxyInteractorMockRecorder) ListCalendarEventsLinks(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCalendarEventsLinks", reflect.TypeOf((*MockProxyInteractor)(nil).ListCalendarEventsLinks), ctx, req)
}

// ListHomeBanners mocks base method.
func (m *MockProxyInteractor) ListHomeBanners(ctx context.Context, sessionID, portalURL string) (*banner.BannersList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHomeBanners", ctx, sessionID, portalURL)
	ret0, _ := ret[0].(*banner.BannersList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHomeBanners indicates an expected call of ListHomeBanners.
func (mr *MockProxyInteractorMockRecorder) ListHomeBanners(ctx, sessionID, portalURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHomeBanners", reflect.TypeOf((*MockProxyInteractor)(nil).ListHomeBanners), ctx, sessionID, portalURL)
}

// MockProxyPresenter is a mock of ProxyPresenter interface.
type MockProxyPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockProxyPresenterMockRecorder
	isgomock struct{}
}

// MockProxyPresenterMockRecorder is the mock recorder for MockProxyPresenter.
type MockProxyPresenterMockRecorder struct {
	mock *MockProxyPresenter
}

// NewMockProxyPresenter creates a new mock instance.
func NewMockProxyPresenter(ctrl *gomock.Controller) *MockProxyPresenter {
	mock := &MockProxyPresenter{ctrl: ctrl}
	mock.recorder = &MockProxyPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProxyPresenter) EXPECT() *MockProxyPresenterMockRecorder {
	return m.recorder
}

// BannersListToView mocks base method.
func (m *MockProxyPresenter) BannersListToView(bannersList *banner.BannersList) *banners.BannersList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BannersListToView", bannersList)
	ret0, _ := ret[0].(*banners.BannersList)
	return ret0
}

// BannersListToView indicates an expected call of BannersListToView.
func (mr *MockProxyPresenterMockRecorder) BannersListToView(bannersList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BannersListToView", reflect.TypeOf((*MockProxyPresenter)(nil).BannersListToView), bannersList)
}

// EventsLinksToView mocks base method.
func (m *MockProxyPresenter) EventsLinksToView(eventsLinks []*event.CalendarEventLink) []*events.CalendarEventLink {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventsLinksToView", eventsLinks)
	ret0, _ := ret[0].([]*events.CalendarEventLink)
	return ret0
}

// EventsLinksToView indicates an expected call of EventsLinksToView.
func (mr *MockProxyPresenterMockRecorder) EventsLinksToView(eventsLinks any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventsLinksToView", reflect.TypeOf((*MockProxyPresenter)(nil).EventsLinksToView), eventsLinks)
}

// EventsListToView mocks base method.
func (m *MockProxyPresenter) EventsListToView(eventsList *event.CalendarEventsList) *events.CalendarEventsList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventsListToView", eventsList)
	ret0, _ := ret[0].(*events.CalendarEventsList)
	return ret0
}

// EventsListToView indicates an expected call of EventsListToView.
func (mr *MockProxyPresenterMockRecorder) EventsListToView(eventsList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventsListToView", reflect.TypeOf((*MockProxyPresenter)(nil).EventsListToView), eventsList)
}

// MockRedirectSessionHandlers is a mock of RedirectSessionHandlers interface.
type MockRedirectSessionHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockRedirectSessionHandlersMockRecorder
	isgomock struct{}
}

// MockRedirectSessionHandlersMockRecorder is the mock recorder for MockRedirectSessionHandlers.
type MockRedirectSessionHandlersMockRecorder struct {
	mock *MockRedirectSessionHandlers
}

// NewMockRedirectSessionHandlers creates a new mock instance.
func NewMockRedirectSessionHandlers(ctrl *gomock.Controller) *MockRedirectSessionHandlers {
	mock := &MockRedirectSessionHandlers{ctrl: ctrl}
	mock.recorder = &MockRedirectSessionHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedirectSessionHandlers) EXPECT() *MockRedirectSessionHandlersMockRecorder {
	return m.recorder
}

// createSession mocks base method.
func (m *MockRedirectSessionHandlers) createSession(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "createSession", c)
}

// createSession indicates an expected call of createSession.
func (mr *MockRedirectSessionHandlersMockRecorder) createSession(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createSession", reflect.TypeOf((*MockRedirectSessionHandlers)(nil).createSession), c)
}

// MockRedirectSessionInteractor is a mock of RedirectSessionInteractor interface.
type MockRedirectSessionInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockRedirectSessionInteractorMockRecorder
	isgomock struct{}
}

// MockRedirectSessionInteractorMockRecorder is the mock recorder for MockRedirectSessionInteractor.
type MockRedirectSessionInteractorMockRecorder struct {
	mock *MockRedirectSessionInteractor
}

// NewMockRedirectSessionInteractor creates a new mock instance.
func NewMockRedirectSessionInteractor(ctrl *gomock.Controller) *MockRedirectSessionInteractor {
	mock := &MockRedirectSessionInteractor{ctrl: ctrl}
	mock.recorder = &MockRedirectSessionInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedirectSessionInteractor) EXPECT() *MockRedirectSessionInteractorMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockRedirectSessionInteractor) CreateSession(ctx context.Context, userInfo *auth0.RedirectSessionUserInfo) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, userInfo)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockRedirectSessionInteractorMockRecorder) CreateSession(ctx, userInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockRedirectSessionInteractor)(nil).CreateSession), ctx, userInfo)
}

// MockSurveysHandlers is a mock of SurveysHandlers interface.
type MockSurveysHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockSurveysHandlersMockRecorder
	isgomock struct{}
}

// MockSurveysHandlersMockRecorder is the mock recorder for MockSurveysHandlers.
type MockSurveysHandlersMockRecorder struct {
	mock *MockSurveysHandlers
}

// NewMockSurveysHandlers creates a new mock instance.
func NewMockSurveysHandlers(ctrl *gomock.Controller) *MockSurveysHandlers {
	mock := &MockSurveysHandlers{ctrl: ctrl}
	mock.recorder = &MockSurveysHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSurveysHandlers) EXPECT() *MockSurveysHandlersMockRecorder {
	return m.recorder
}

// addAnswers mocks base method.
func (m *MockSurveysHandlers) addAnswers(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "addAnswers", c)
}

// addAnswers indicates an expected call of addAnswers.
func (mr *MockSurveysHandlersMockRecorder) addAnswers(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addAnswers", reflect.TypeOf((*MockSurveysHandlers)(nil).addAnswers), c)
}

// getImage mocks base method.
func (m *MockSurveysHandlers) getImage(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getImage", c)
}

// getImage indicates an expected call of getImage.
func (mr *MockSurveysHandlersMockRecorder) getImage(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getImage", reflect.TypeOf((*MockSurveysHandlers)(nil).getImage), c)
}

// getSurvey mocks base method.
func (m *MockSurveysHandlers) getSurvey(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getSurvey", c)
}

// getSurvey indicates an expected call of getSurvey.
func (mr *MockSurveysHandlersMockRecorder) getSurvey(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getSurvey", reflect.TypeOf((*MockSurveysHandlers)(nil).getSurvey), c)
}

// MockSurveysSurveyHandlers is a mock of SurveysSurveyHandlers interface.
type MockSurveysSurveyHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockSurveysSurveyHandlersMockRecorder
	isgomock struct{}
}

// MockSurveysSurveyHandlersMockRecorder is the mock recorder for MockSurveysSurveyHandlers.
type MockSurveysSurveyHandlersMockRecorder struct {
	mock *MockSurveysSurveyHandlers
}

// NewMockSurveysSurveyHandlers creates a new mock instance.
func NewMockSurveysSurveyHandlers(ctrl *gomock.Controller) *MockSurveysSurveyHandlers {
	mock := &MockSurveysSurveyHandlers{ctrl: ctrl}
	mock.recorder = &MockSurveysSurveyHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSurveysSurveyHandlers) EXPECT() *MockSurveysSurveyHandlersMockRecorder {
	return m.recorder
}

// getSurvey mocks base method.
func (m *MockSurveysSurveyHandlers) getSurvey(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getSurvey", c)
}

// getSurvey indicates an expected call of getSurvey.
func (mr *MockSurveysSurveyHandlersMockRecorder) getSurvey(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getSurvey", reflect.TypeOf((*MockSurveysSurveyHandlers)(nil).getSurvey), c)
}

// MockSurveysAnswerHandlers is a mock of SurveysAnswerHandlers interface.
type MockSurveysAnswerHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockSurveysAnswerHandlersMockRecorder
	isgomock struct{}
}

// MockSurveysAnswerHandlersMockRecorder is the mock recorder for MockSurveysAnswerHandlers.
type MockSurveysAnswerHandlersMockRecorder struct {
	mock *MockSurveysAnswerHandlers
}

// NewMockSurveysAnswerHandlers creates a new mock instance.
func NewMockSurveysAnswerHandlers(ctrl *gomock.Controller) *MockSurveysAnswerHandlers {
	mock := &MockSurveysAnswerHandlers{ctrl: ctrl}
	mock.recorder = &MockSurveysAnswerHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSurveysAnswerHandlers) EXPECT() *MockSurveysAnswerHandlersMockRecorder {
	return m.recorder
}

// addAnswers mocks base method.
func (m *MockSurveysAnswerHandlers) addAnswers(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "addAnswers", c)
}

// addAnswers indicates an expected call of addAnswers.
func (mr *MockSurveysAnswerHandlersMockRecorder) addAnswers(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addAnswers", reflect.TypeOf((*MockSurveysAnswerHandlers)(nil).addAnswers), c)
}

// MockSurveysImageHandlers is a mock of SurveysImageHandlers interface.
type MockSurveysImageHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockSurveysImageHandlersMockRecorder
	isgomock struct{}
}

// MockSurveysImageHandlersMockRecorder is the mock recorder for MockSurveysImageHandlers.
type MockSurveysImageHandlersMockRecorder struct {
	mock *MockSurveysImageHandlers
}

// NewMockSurveysImageHandlers creates a new mock instance.
func NewMockSurveysImageHandlers(ctrl *gomock.Controller) *MockSurveysImageHandlers {
	mock := &MockSurveysImageHandlers{ctrl: ctrl}
	mock.recorder = &MockSurveysImageHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSurveysImageHandlers) EXPECT() *MockSurveysImageHandlersMockRecorder {
	return m.recorder
}

// getImage mocks base method.
func (m *MockSurveysImageHandlers) getImage(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getImage", c)
}

// getImage indicates an expected call of getImage.
func (mr *MockSurveysImageHandlersMockRecorder) getImage(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getImage", reflect.TypeOf((*MockSurveysImageHandlers)(nil).getImage), c)
}

// MockEmployeesSearchHandlers is a mock of EmployeesSearchHandlers interface.
type MockEmployeesSearchHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeesSearchHandlersMockRecorder
	isgomock struct{}
}

// MockEmployeesSearchHandlersMockRecorder is the mock recorder for MockEmployeesSearchHandlers.
type MockEmployeesSearchHandlersMockRecorder struct {
	mock *MockEmployeesSearchHandlers
}

// NewMockEmployeesSearchHandlers creates a new mock instance.
func NewMockEmployeesSearchHandlers(ctrl *gomock.Controller) *MockEmployeesSearchHandlers {
	mock := &MockEmployeesSearchHandlers{ctrl: ctrl}
	mock.recorder = &MockEmployeesSearchHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeesSearchHandlers) EXPECT() *MockEmployeesSearchHandlersMockRecorder {
	return m.recorder
}

// filters mocks base method.
func (m *MockEmployeesSearchHandlers) filters(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "filters", c)
}

// filters indicates an expected call of filters.
func (mr *MockEmployeesSearchHandlersMockRecorder) filters(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "filters", reflect.TypeOf((*MockEmployeesSearchHandlers)(nil).filters), c)
}

// search mocks base method.
func (m *MockEmployeesSearchHandlers) search(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "search", c)
}

// search indicates an expected call of search.
func (mr *MockEmployeesSearchHandlersMockRecorder) search(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "search", reflect.TypeOf((*MockEmployeesSearchHandlers)(nil).search), c)
}

// MockUsersHandlers is a mock of UsersHandlers interface.
type MockUsersHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockUsersHandlersMockRecorder
	isgomock struct{}
}

// MockUsersHandlersMockRecorder is the mock recorder for MockUsersHandlers.
type MockUsersHandlersMockRecorder struct {
	mock *MockUsersHandlers
}

// NewMockUsersHandlers creates a new mock instance.
func NewMockUsersHandlers(ctrl *gomock.Controller) *MockUsersHandlers {
	mock := &MockUsersHandlers{ctrl: ctrl}
	mock.recorder = &MockUsersHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersHandlers) EXPECT() *MockUsersHandlersMockRecorder {
	return m.recorder
}

// changePortal mocks base method.
func (m *MockUsersHandlers) changePortal(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "changePortal", c)
}

// changePortal indicates an expected call of changePortal.
func (mr *MockUsersHandlersMockRecorder) changePortal(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "changePortal", reflect.TypeOf((*MockUsersHandlers)(nil).changePortal), c)
}

// getMe mocks base method.
func (m *MockUsersHandlers) getMe(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getMe", c)
}

// getMe indicates an expected call of getMe.
func (mr *MockUsersHandlersMockRecorder) getMe(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getMe", reflect.TypeOf((*MockUsersHandlers)(nil).getMe), c)
}

// MockEmployeesHandlers is a mock of EmployeesHandlers interface.
type MockEmployeesHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeesHandlersMockRecorder
	isgomock struct{}
}

// MockEmployeesHandlersMockRecorder is the mock recorder for MockEmployeesHandlers.
type MockEmployeesHandlersMockRecorder struct {
	mock *MockEmployeesHandlers
}

// NewMockEmployeesHandlers creates a new mock instance.
func NewMockEmployeesHandlers(ctrl *gomock.Controller) *MockEmployeesHandlers {
	mock := &MockEmployeesHandlers{ctrl: ctrl}
	mock.recorder = &MockEmployeesHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeesHandlers) EXPECT() *MockEmployeesHandlersMockRecorder {
	return m.recorder
}

// getEmployee mocks base method.
func (m *MockEmployeesHandlers) getEmployee(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getEmployee", c)
}

// getEmployee indicates an expected call of getEmployee.
func (mr *MockEmployeesHandlersMockRecorder) getEmployee(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getEmployee", reflect.TypeOf((*MockEmployeesHandlers)(nil).getEmployee), c)
}

// getProfile mocks base method.
func (m *MockEmployeesHandlers) getProfile(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getProfile", c)
}

// getProfile indicates an expected call of getProfile.
func (mr *MockEmployeesHandlersMockRecorder) getProfile(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getProfile", reflect.TypeOf((*MockEmployeesHandlers)(nil).getProfile), c)
}

// MockPortalsPortalsInteractor is a mock of PortalsPortalsInteractor interface.
type MockPortalsPortalsInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockPortalsPortalsInteractorMockRecorder
	isgomock struct{}
}

// MockPortalsPortalsInteractorMockRecorder is the mock recorder for MockPortalsPortalsInteractor.
type MockPortalsPortalsInteractorMockRecorder struct {
	mock *MockPortalsPortalsInteractor
}

// NewMockPortalsPortalsInteractor creates a new mock instance.
func NewMockPortalsPortalsInteractor(ctrl *gomock.Controller) *MockPortalsPortalsInteractor {
	mock := &MockPortalsPortalsInteractor{ctrl: ctrl}
	mock.recorder = &MockPortalsPortalsInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalsPortalsInteractor) EXPECT() *MockPortalsPortalsInteractorMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockPortalsPortalsInteractor) Add(ctx context.Context, newPortal *portal.Portal) (*portal.Portal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, newPortal)
	ret0, _ := ret[0].(*portal.Portal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockPortalsPortalsInteractorMockRecorder) Add(ctx, newPortal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPortalsPortalsInteractor)(nil).Add), ctx, newPortal)
}

// Delete mocks base method.
func (m *MockPortalsPortalsInteractor) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPortalsPortalsInteractorMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPortalsPortalsInteractor)(nil).Delete), ctx, id)
}

// Filter mocks base method.
func (m *MockPortalsPortalsInteractor) Filter(ctx context.Context, opts portal.PortalsFilterOptions) ([]*portal.Portal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", ctx, opts)
	ret0, _ := ret[0].([]*portal.Portal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter.
func (mr *MockPortalsPortalsInteractorMockRecorder) Filter(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockPortalsPortalsInteractor)(nil).Filter), ctx, opts)
}

// Get mocks base method.
func (m *MockPortalsPortalsInteractor) Get(ctx context.Context, id int, withDeleted bool) (*portal.Portal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id, withDeleted)
	ret0, _ := ret[0].(*portal.Portal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPortalsPortalsInteractorMockRecorder) Get(ctx, id, withDeleted any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPortalsPortalsInteractor)(nil).Get), ctx, id, withDeleted)
}

// GetAll mocks base method.
func (m *MockPortalsPortalsInteractor) GetAll(ctx context.Context, opts portal.GetAllOptions) ([]*portal.Portal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, opts)
	ret0, _ := ret[0].([]*portal.Portal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPortalsPortalsInteractorMockRecorder) GetAll(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPortalsPortalsInteractor)(nil).GetAll), ctx, opts)
}

// GetByEmployees mocks base method.
func (m *MockPortalsPortalsInteractor) GetByEmployees(ctx context.Context, employees []portal.EmployeeInfo) ([]*portal.Portal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmployees", ctx, employees)
	ret0, _ := ret[0].([]*portal.Portal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmployees indicates an expected call of GetByEmployees.
func (mr *MockPortalsPortalsInteractorMockRecorder) GetByEmployees(ctx, employees any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmployees", reflect.TypeOf((*MockPortalsPortalsInteractor)(nil).GetByEmployees), ctx, employees)
}

// MultiplyAdd mocks base method.
func (m *MockPortalsPortalsInteractor) MultiplyAdd(ctx context.Context, entityPortal []*portal.Portal) ([]*portal.Portal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiplyAdd", ctx, entityPortal)
	ret0, _ := ret[0].([]*portal.Portal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiplyAdd indicates an expected call of MultiplyAdd.
func (mr *MockPortalsPortalsInteractorMockRecorder) MultiplyAdd(ctx, entityPortal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiplyAdd", reflect.TypeOf((*MockPortalsPortalsInteractor)(nil).MultiplyAdd), ctx, entityPortal)
}

// Update mocks base method.
func (m *MockPortalsPortalsInteractor) Update(ctx context.Context, newPortal *portal.Portal) (*portal.Portal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, newPortal)
	ret0, _ := ret[0].(*portal.Portal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPortalsPortalsInteractorMockRecorder) Update(ctx, newPortal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPortalsPortalsInteractor)(nil).Update), ctx, newPortal)
}

// MockPortalsQuestionsInteractor is a mock of PortalsQuestionsInteractor interface.
type MockPortalsQuestionsInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockPortalsQuestionsInteractorMockRecorder
	isgomock struct{}
}

// MockPortalsQuestionsInteractorMockRecorder is the mock recorder for MockPortalsQuestionsInteractor.
type MockPortalsQuestionsInteractorMockRecorder struct {
	mock *MockPortalsQuestionsInteractor
}

// NewMockPortalsQuestionsInteractor creates a new mock instance.
func NewMockPortalsQuestionsInteractor(ctrl *gomock.Controller) *MockPortalsQuestionsInteractor {
	mock := &MockPortalsQuestionsInteractor{ctrl: ctrl}
	mock.recorder = &MockPortalsQuestionsInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalsQuestionsInteractor) EXPECT() *MockPortalsQuestionsInteractorMockRecorder {
	return m.recorder
}

// AddQuestion mocks base method.
func (m *MockPortalsQuestionsInteractor) AddQuestion(ctx context.Context, question *portal.Question) (*portal.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddQuestion", ctx, question)
	ret0, _ := ret[0].(*portal.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddQuestion indicates an expected call of AddQuestion.
func (mr *MockPortalsQuestionsInteractorMockRecorder) AddQuestion(ctx, question any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddQuestion", reflect.TypeOf((*MockPortalsQuestionsInteractor)(nil).AddQuestion), ctx, question)
}

// AddQuestions mocks base method.
func (m *MockPortalsQuestionsInteractor) AddQuestions(ctx context.Context, questions []*portal.Question) ([]*portal.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddQuestions", ctx, questions)
	ret0, _ := ret[0].([]*portal.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddQuestions indicates an expected call of AddQuestions.
func (mr *MockPortalsQuestionsInteractorMockRecorder) AddQuestions(ctx, questions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddQuestions", reflect.TypeOf((*MockPortalsQuestionsInteractor)(nil).AddQuestions), ctx, questions)
}

// DeleteQuestion mocks base method.
func (m *MockPortalsQuestionsInteractor) DeleteQuestion(ctx context.Context, questionId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuestion", ctx, questionId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQuestion indicates an expected call of DeleteQuestion.
func (mr *MockPortalsQuestionsInteractorMockRecorder) DeleteQuestion(ctx, questionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuestion", reflect.TypeOf((*MockPortalsQuestionsInteractor)(nil).DeleteQuestion), ctx, questionId)
}

// GetAllQuestions mocks base method.
func (m *MockPortalsQuestionsInteractor) GetAllQuestions(ctx context.Context, withDeleted bool) (*portal.Questions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllQuestions", ctx, withDeleted)
	ret0, _ := ret[0].(*portal.Questions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllQuestions indicates an expected call of GetAllQuestions.
func (mr *MockPortalsQuestionsInteractorMockRecorder) GetAllQuestions(ctx, withDeleted any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllQuestions", reflect.TypeOf((*MockPortalsQuestionsInteractor)(nil).GetAllQuestions), ctx, withDeleted)
}

// GetQuestion mocks base method.
func (m *MockPortalsQuestionsInteractor) GetQuestion(ctx context.Context, questionId int, withDeleted bool) (*portal.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestion", ctx, questionId, withDeleted)
	ret0, _ := ret[0].(*portal.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestion indicates an expected call of GetQuestion.
func (mr *MockPortalsQuestionsInteractorMockRecorder) GetQuestion(ctx, questionId, withDeleted any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestion", reflect.TypeOf((*MockPortalsQuestionsInteractor)(nil).GetQuestion), ctx, questionId, withDeleted)
}

// UpdateQuestion mocks base method.
func (m *MockPortalsQuestionsInteractor) UpdateQuestion(ctx context.Context, question *portal.Question) (*portal.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuestion", ctx, question)
	ret0, _ := ret[0].(*portal.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQuestion indicates an expected call of UpdateQuestion.
func (mr *MockPortalsQuestionsInteractorMockRecorder) UpdateQuestion(ctx, question any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuestion", reflect.TypeOf((*MockPortalsQuestionsInteractor)(nil).UpdateQuestion), ctx, question)
}

// MockPortalsImagesInteractor is a mock of PortalsImagesInteractor interface.
type MockPortalsImagesInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockPortalsImagesInteractorMockRecorder
	isgomock struct{}
}

// MockPortalsImagesInteractorMockRecorder is the mock recorder for MockPortalsImagesInteractor.
type MockPortalsImagesInteractorMockRecorder struct {
	mock *MockPortalsImagesInteractor
}

// NewMockPortalsImagesInteractor creates a new mock instance.
func NewMockPortalsImagesInteractor(ctrl *gomock.Controller) *MockPortalsImagesInteractor {
	mock := &MockPortalsImagesInteractor{ctrl: ctrl}
	mock.recorder = &MockPortalsImagesInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalsImagesInteractor) EXPECT() *MockPortalsImagesInteractorMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockPortalsImagesInteractor) Add(ctx context.Context, image *portal.Image) (*portal.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, image)
	ret0, _ := ret[0].(*portal.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockPortalsImagesInteractorMockRecorder) Add(ctx, image any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPortalsImagesInteractor)(nil).Add), ctx, image)
}

// All mocks base method.
func (m *MockPortalsImagesInteractor) All(ctx context.Context) ([]*portal.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx)
	ret0, _ := ret[0].([]*portal.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockPortalsImagesInteractorMockRecorder) All(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockPortalsImagesInteractor)(nil).All), ctx)
}

// Delete mocks base method.
func (m *MockPortalsImagesInteractor) Delete(ctx context.Context, imageId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, imageId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPortalsImagesInteractorMockRecorder) Delete(ctx, imageId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPortalsImagesInteractor)(nil).Delete), ctx, imageId)
}

// Get mocks base method.
func (m *MockPortalsImagesInteractor) Get(ctx context.Context, imageId int) (*portal.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, imageId)
	ret0, _ := ret[0].(*portal.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPortalsImagesInteractorMockRecorder) Get(ctx, imageId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPortalsImagesInteractor)(nil).Get), ctx, imageId)
}

// GetRawImage mocks base method.
func (m *MockPortalsImagesInteractor) GetRawImage(ctx context.Context, path string) (portal.ImageData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawImage", ctx, path)
	ret0, _ := ret[0].(portal.ImageData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawImage indicates an expected call of GetRawImage.
func (mr *MockPortalsImagesInteractorMockRecorder) GetRawImage(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawImage", reflect.TypeOf((*MockPortalsImagesInteractor)(nil).GetRawImage), ctx, path)
}

// MockPortalsFeaturesInteractor is a mock of PortalsFeaturesInteractor interface.
type MockPortalsFeaturesInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockPortalsFeaturesInteractorMockRecorder
	isgomock struct{}
}

// MockPortalsFeaturesInteractorMockRecorder is the mock recorder for MockPortalsFeaturesInteractor.
type MockPortalsFeaturesInteractorMockRecorder struct {
	mock *MockPortalsFeaturesInteractor
}

// NewMockPortalsFeaturesInteractor creates a new mock instance.
func NewMockPortalsFeaturesInteractor(ctrl *gomock.Controller) *MockPortalsFeaturesInteractor {
	mock := &MockPortalsFeaturesInteractor{ctrl: ctrl}
	mock.recorder = &MockPortalsFeaturesInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalsFeaturesInteractor) EXPECT() *MockPortalsFeaturesInteractorMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockPortalsFeaturesInteractor) Add(ctx context.Context, feature *portal.Feature) (*portal.Feature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, feature)
	ret0, _ := ret[0].(*portal.Feature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockPortalsFeaturesInteractorMockRecorder) Add(ctx, feature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPortalsFeaturesInteractor)(nil).Add), ctx, feature)
}

// All mocks base method.
func (m *MockPortalsFeaturesInteractor) All(ctx context.Context, withDisabled bool) ([]*portal.Feature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, withDisabled)
	ret0, _ := ret[0].([]*portal.Feature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockPortalsFeaturesInteractorMockRecorder) All(ctx, withDisabled any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockPortalsFeaturesInteractor)(nil).All), ctx, withDisabled)
}

// Delete mocks base method.
func (m *MockPortalsFeaturesInteractor) Delete(ctx context.Context, featureId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, featureId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPortalsFeaturesInteractorMockRecorder) Delete(ctx, featureId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPortalsFeaturesInteractor)(nil).Delete), ctx, featureId)
}

// Get mocks base method.
func (m *MockPortalsFeaturesInteractor) Get(ctx context.Context, featureId int, withDisabled bool) (*portal.Feature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, featureId, withDisabled)
	ret0, _ := ret[0].(*portal.Feature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPortalsFeaturesInteractorMockRecorder) Get(ctx, featureId, withDisabled any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPortalsFeaturesInteractor)(nil).Get), ctx, featureId, withDisabled)
}

// MultipleAdd mocks base method.
func (m *MockPortalsFeaturesInteractor) MultipleAdd(ctx context.Context, features []*portal.Feature) ([]*portal.Feature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultipleAdd", ctx, features)
	ret0, _ := ret[0].([]*portal.Feature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultipleAdd indicates an expected call of MultipleAdd.
func (mr *MockPortalsFeaturesInteractorMockRecorder) MultipleAdd(ctx, features any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultipleAdd", reflect.TypeOf((*MockPortalsFeaturesInteractor)(nil).MultipleAdd), ctx, features)
}

// Update mocks base method.
func (m *MockPortalsFeaturesInteractor) Update(ctx context.Context, feature *portal.Feature) (*portal.Feature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, feature)
	ret0, _ := ret[0].(*portal.Feature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPortalsFeaturesInteractorMockRecorder) Update(ctx, feature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPortalsFeaturesInteractor)(nil).Update), ctx, feature)
}

// MockPortalsOrganizationsInteractor is a mock of PortalsOrganizationsInteractor interface.
type MockPortalsOrganizationsInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockPortalsOrganizationsInteractorMockRecorder
	isgomock struct{}
}

// MockPortalsOrganizationsInteractorMockRecorder is the mock recorder for MockPortalsOrganizationsInteractor.
type MockPortalsOrganizationsInteractorMockRecorder struct {
	mock *MockPortalsOrganizationsInteractor
}

// NewMockPortalsOrganizationsInteractor creates a new mock instance.
func NewMockPortalsOrganizationsInteractor(ctrl *gomock.Controller) *MockPortalsOrganizationsInteractor {
	mock := &MockPortalsOrganizationsInteractor{ctrl: ctrl}
	mock.recorder = &MockPortalsOrganizationsInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalsOrganizationsInteractor) EXPECT() *MockPortalsOrganizationsInteractorMockRecorder {
	return m.recorder
}

// Filter mocks base method.
func (m *MockPortalsOrganizationsInteractor) Filter(ctx context.Context, filters portal.OrganizationsFilters, pagination *entity.StringPagination, options portal.OrganizationsFilterOptions) (*portal.OrganizationsWithPagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", ctx, filters, pagination, options)
	ret0, _ := ret[0].(*portal.OrganizationsWithPagination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter.
func (mr *MockPortalsOrganizationsInteractorMockRecorder) Filter(ctx, filters, pagination, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockPortalsOrganizationsInteractor)(nil).Filter), ctx, filters, pagination, options)
}

// Link mocks base method.
func (m *MockPortalsOrganizationsInteractor) Link(ctx context.Context, portalId portal.PortalID, orgIds portal.OrganizationIDs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Link", ctx, portalId, orgIds)
	ret0, _ := ret[0].(error)
	return ret0
}

// Link indicates an expected call of Link.
func (mr *MockPortalsOrganizationsInteractorMockRecorder) Link(ctx, portalId, orgIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Link", reflect.TypeOf((*MockPortalsOrganizationsInteractor)(nil).Link), ctx, portalId, orgIds)
}

// Unlink mocks base method.
func (m *MockPortalsOrganizationsInteractor) Unlink(ctx context.Context, orgIds portal.OrganizationIDs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unlink", ctx, orgIds)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unlink indicates an expected call of Unlink.
func (mr *MockPortalsOrganizationsInteractorMockRecorder) Unlink(ctx, orgIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlink", reflect.TypeOf((*MockPortalsOrganizationsInteractor)(nil).Unlink), ctx, orgIds)
}

// MockSurveysSurveysInteractor is a mock of SurveysSurveysInteractor interface.
type MockSurveysSurveysInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockSurveysSurveysInteractorMockRecorder
	isgomock struct{}
}

// MockSurveysSurveysInteractorMockRecorder is the mock recorder for MockSurveysSurveysInteractor.
type MockSurveysSurveysInteractorMockRecorder struct {
	mock *MockSurveysSurveysInteractor
}

// NewMockSurveysSurveysInteractor creates a new mock instance.
func NewMockSurveysSurveysInteractor(ctrl *gomock.Controller) *MockSurveysSurveysInteractor {
	mock := &MockSurveysSurveysInteractor{ctrl: ctrl}
	mock.recorder = &MockSurveysSurveysInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSurveysSurveysInteractor) EXPECT() *MockSurveysSurveysInteractorMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockSurveysSurveysInteractor) Get(ctx context.Context, id entitySurveys.SurveyID, options entitySurveys.SurveyFilterOptions) (*entitySurveys.Survey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id, options)
	ret0, _ := ret[0].(*entitySurveys.Survey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSurveysSurveysInteractorMockRecorder) Get(ctx, id, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSurveysSurveysInteractor)(nil).Get), ctx, id, options)
}

// MockSurveysAnswersInteractor is a mock of SurveysAnswersInteractor interface.
type MockSurveysAnswersInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockSurveysAnswersInteractorMockRecorder
	isgomock struct{}
}

// MockSurveysAnswersInteractorMockRecorder is the mock recorder for MockSurveysAnswersInteractor.
type MockSurveysAnswersInteractorMockRecorder struct {
	mock *MockSurveysAnswersInteractor
}

// NewMockSurveysAnswersInteractor creates a new mock instance.
func NewMockSurveysAnswersInteractor(ctrl *gomock.Controller) *MockSurveysAnswersInteractor {
	mock := &MockSurveysAnswersInteractor{ctrl: ctrl}
	mock.recorder = &MockSurveysAnswersInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSurveysAnswersInteractor) EXPECT() *MockSurveysAnswersInteractorMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockSurveysAnswersInteractor) Add(ctx context.Context, answers []*entitySurveys.RespondentAnswer) ([]uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, answers)
	ret0, _ := ret[0].([]uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockSurveysAnswersInteractorMockRecorder) Add(ctx, answers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockSurveysAnswersInteractor)(nil).Add), ctx, answers)
}

// MockSurveysImagesInteractor is a mock of SurveysImagesInteractor interface.
type MockSurveysImagesInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockSurveysImagesInteractorMockRecorder
	isgomock struct{}
}

// MockSurveysImagesInteractorMockRecorder is the mock recorder for MockSurveysImagesInteractor.
type MockSurveysImagesInteractorMockRecorder struct {
	mock *MockSurveysImagesInteractor
}

// NewMockSurveysImagesInteractor creates a new mock instance.
func NewMockSurveysImagesInteractor(ctrl *gomock.Controller) *MockSurveysImagesInteractor {
	mock := &MockSurveysImagesInteractor{ctrl: ctrl}
	mock.recorder = &MockSurveysImagesInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSurveysImagesInteractor) EXPECT() *MockSurveysImagesInteractorMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockSurveysImagesInteractor) Get(ctx context.Context, imageName string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, imageName)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSurveysImagesInteractorMockRecorder) Get(ctx, imageName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSurveysImagesInteractor)(nil).Get), ctx, imageName)
}

// MockAuthInteractor is a mock of AuthInteractor interface.
type MockAuthInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockAuthInteractorMockRecorder
	isgomock struct{}
}

// MockAuthInteractorMockRecorder is the mock recorder for MockAuthInteractor.
type MockAuthInteractorMockRecorder struct {
	mock *MockAuthInteractor
}

// NewMockAuthInteractor creates a new mock instance.
func NewMockAuthInteractor(ctrl *gomock.Controller) *MockAuthInteractor {
	mock := &MockAuthInteractor{ctrl: ctrl}
	mock.recorder = &MockAuthInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthInteractor) EXPECT() *MockAuthInteractorMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockAuthInteractor) Auth(ctx context.Context, code, state, callbackURI string) (*auth0.Auth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", ctx, code, state, callbackURI)
	ret0, _ := ret[0].(*auth0.Auth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Auth indicates an expected call of Auth.
func (mr *MockAuthInteractorMockRecorder) Auth(ctx, code, state, callbackURI any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockAuthInteractor)(nil).Auth), ctx, code, state, callbackURI)
}

// ChangePortal mocks base method.
func (m *MockAuthInteractor) ChangePortal(ctx context.Context, selectedPortalID int) ([]*auth0.Portal, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePortal", ctx, selectedPortalID)
	ret0, _ := ret[0].([]*auth0.Portal)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ChangePortal indicates an expected call of ChangePortal.
func (mr *MockAuthInteractorMockRecorder) ChangePortal(ctx, selectedPortalID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePortal", reflect.TypeOf((*MockAuthInteractor)(nil).ChangePortal), ctx, selectedPortalID)
}

// GetAuthURL mocks base method.
func (m *MockAuthInteractor) GetAuthURL(ctx context.Context, callbackURI string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthURL", ctx, callbackURI)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthURL indicates an expected call of GetAuthURL.
func (mr *MockAuthInteractorMockRecorder) GetAuthURL(ctx, callbackURI any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthURL", reflect.TypeOf((*MockAuthInteractor)(nil).GetAuthURL), ctx, callbackURI)
}

// GetSession mocks base method.
func (m *MockAuthInteractor) GetSession(ctx context.Context, accessToken string) (*auth0.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", ctx, accessToken)
	ret0, _ := ret[0].(*auth0.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockAuthInteractorMockRecorder) GetSession(ctx, accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockAuthInteractor)(nil).GetSession), ctx, accessToken)
}

// Logout mocks base method.
func (m *MockAuthInteractor) Logout(ctx context.Context, accessToken, refreshToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, accessToken, refreshToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockAuthInteractorMockRecorder) Logout(ctx, accessToken, refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthInteractor)(nil).Logout), ctx, accessToken, refreshToken)
}

// RefreshTokensPair mocks base method.
func (m *MockAuthInteractor) RefreshTokensPair(ctx context.Context, accessToken, refreshToken string) (*auth0.TokensPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshTokensPair", ctx, accessToken, refreshToken)
	ret0, _ := ret[0].(*auth0.TokensPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshTokensPair indicates an expected call of RefreshTokensPair.
func (mr *MockAuthInteractorMockRecorder) RefreshTokensPair(ctx, accessToken, refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshTokensPair", reflect.TypeOf((*MockAuthInteractor)(nil).RefreshTokensPair), ctx, accessToken, refreshToken)
}

// MockEmployeesSearchUseCases is a mock of EmployeesSearchUseCases interface.
type MockEmployeesSearchUseCases struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeesSearchUseCasesMockRecorder
	isgomock struct{}
}

// MockEmployeesSearchUseCasesMockRecorder is the mock recorder for MockEmployeesSearchUseCases.
type MockEmployeesSearchUseCasesMockRecorder struct {
	mock *MockEmployeesSearchUseCases
}

// NewMockEmployeesSearchUseCases creates a new mock instance.
func NewMockEmployeesSearchUseCases(ctrl *gomock.Controller) *MockEmployeesSearchUseCases {
	mock := &MockEmployeesSearchUseCases{ctrl: ctrl}
	mock.recorder = &MockEmployeesSearchUseCasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeesSearchUseCases) EXPECT() *MockEmployeesSearchUseCasesMockRecorder {
	return m.recorder
}

// Filters mocks base method.
func (m *MockEmployeesSearchUseCases) Filters(ctx context.Context, request *employees_search0.SearchParams) (*employees_search0.FiltersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filters", ctx, request)
	ret0, _ := ret[0].(*employees_search0.FiltersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filters indicates an expected call of Filters.
func (mr *MockEmployeesSearchUseCasesMockRecorder) Filters(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filters", reflect.TypeOf((*MockEmployeesSearchUseCases)(nil).Filters), ctx, request)
}

// Search mocks base method.
func (m *MockEmployeesSearchUseCases) Search(ctx context.Context, request *employees_search0.SearchParams) (*employees_search0.SearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, request)
	ret0, _ := ret[0].(*employees_search0.SearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockEmployeesSearchUseCasesMockRecorder) Search(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockEmployeesSearchUseCases)(nil).Search), ctx, request)
}

// MockUsersInteractor is a mock of UsersInteractor interface.
type MockUsersInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockUsersInteractorMockRecorder
	isgomock struct{}
}

// MockUsersInteractorMockRecorder is the mock recorder for MockUsersInteractor.
type MockUsersInteractorMockRecorder struct {
	mock *MockUsersInteractor
}

// NewMockUsersInteractor creates a new mock instance.
func NewMockUsersInteractor(ctrl *gomock.Controller) *MockUsersInteractor {
	mock := &MockUsersInteractor{ctrl: ctrl}
	mock.recorder = &MockUsersInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersInteractor) EXPECT() *MockUsersInteractorMockRecorder {
	return m.recorder
}

// GetMe mocks base method.
func (m *MockUsersInteractor) GetMe(ctx context.Context) (*user.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMe", ctx)
	ret0, _ := ret[0].(*user.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMe indicates an expected call of GetMe.
func (mr *MockUsersInteractorMockRecorder) GetMe(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMe", reflect.TypeOf((*MockUsersInteractor)(nil).GetMe), ctx)
}

// MockStringPaginationPresenter is a mock of StringPaginationPresenter interface.
type MockStringPaginationPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockStringPaginationPresenterMockRecorder
	isgomock struct{}
}

// MockStringPaginationPresenterMockRecorder is the mock recorder for MockStringPaginationPresenter.
type MockStringPaginationPresenterMockRecorder struct {
	mock *MockStringPaginationPresenter
}

// NewMockStringPaginationPresenter creates a new mock instance.
func NewMockStringPaginationPresenter(ctrl *gomock.Controller) *MockStringPaginationPresenter {
	mock := &MockStringPaginationPresenter{ctrl: ctrl}
	mock.recorder = &MockStringPaginationPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStringPaginationPresenter) EXPECT() *MockStringPaginationPresenterMockRecorder {
	return m.recorder
}

// PaginationToEntity mocks base method.
func (m *MockStringPaginationPresenter) PaginationToEntity(pagination *view.StringPagination) *entity.StringPagination {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaginationToEntity", pagination)
	ret0, _ := ret[0].(*entity.StringPagination)
	return ret0
}

// PaginationToEntity indicates an expected call of PaginationToEntity.
func (mr *MockStringPaginationPresenterMockRecorder) PaginationToEntity(pagination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaginationToEntity", reflect.TypeOf((*MockStringPaginationPresenter)(nil).PaginationToEntity), pagination)
}

// PaginationToView mocks base method.
func (m *MockStringPaginationPresenter) PaginationToView(pagination *entity.StringPagination) *view.StringPagination {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaginationToView", pagination)
	ret0, _ := ret[0].(*view.StringPagination)
	return ret0
}

// PaginationToView indicates an expected call of PaginationToView.
func (mr *MockStringPaginationPresenterMockRecorder) PaginationToView(pagination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaginationToView", reflect.TypeOf((*MockStringPaginationPresenter)(nil).PaginationToView), pagination)
}

// MockPortalsPortalsPresenter is a mock of PortalsPortalsPresenter interface.
type MockPortalsPortalsPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockPortalsPortalsPresenterMockRecorder
	isgomock struct{}
}

// MockPortalsPortalsPresenterMockRecorder is the mock recorder for MockPortalsPortalsPresenter.
type MockPortalsPortalsPresenterMockRecorder struct {
	mock *MockPortalsPortalsPresenter
}

// NewMockPortalsPortalsPresenter creates a new mock instance.
func NewMockPortalsPortalsPresenter(ctrl *gomock.Controller) *MockPortalsPortalsPresenter {
	mock := &MockPortalsPortalsPresenter{ctrl: ctrl}
	mock.recorder = &MockPortalsPortalsPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalsPortalsPresenter) EXPECT() *MockPortalsPortalsPresenterMockRecorder {
	return m.recorder
}

// FilterOptionsToEntity mocks base method.
func (m *MockPortalsPortalsPresenter) FilterOptionsToEntity(options portals.PortalsFilterOptions) portal.PortalsFilterOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterOptionsToEntity", options)
	ret0, _ := ret[0].(portal.PortalsFilterOptions)
	return ret0
}

// FilterOptionsToEntity indicates an expected call of FilterOptionsToEntity.
func (mr *MockPortalsPortalsPresenterMockRecorder) FilterOptionsToEntity(options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOptionsToEntity", reflect.TypeOf((*MockPortalsPortalsPresenter)(nil).FilterOptionsToEntity), options)
}

// ToEntities mocks base method.
func (m *MockPortalsPortalsPresenter) ToEntities(entityPortal []*portals.UpdatePortal) []*portal.Portal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToEntities", entityPortal)
	ret0, _ := ret[0].([]*portal.Portal)
	return ret0
}

// ToEntities indicates an expected call of ToEntities.
func (mr *MockPortalsPortalsPresenterMockRecorder) ToEntities(entityPortal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToEntities", reflect.TypeOf((*MockPortalsPortalsPresenter)(nil).ToEntities), entityPortal)
}

// ToEntity mocks base method.
func (m *MockPortalsPortalsPresenter) ToEntity(viewPortal *portals.UpdatePortal) *portal.Portal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToEntity", viewPortal)
	ret0, _ := ret[0].(*portal.Portal)
	return ret0
}

// ToEntity indicates an expected call of ToEntity.
func (mr *MockPortalsPortalsPresenterMockRecorder) ToEntity(viewPortal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToEntity", reflect.TypeOf((*MockPortalsPortalsPresenter)(nil).ToEntity), viewPortal)
}

// ToNewEntities mocks base method.
func (m *MockPortalsPortalsPresenter) ToNewEntities(entityPortal []*portals.NewPortal) []*portal.Portal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToNewEntities", entityPortal)
	ret0, _ := ret[0].([]*portal.Portal)
	return ret0
}

// ToNewEntities indicates an expected call of ToNewEntities.
func (mr *MockPortalsPortalsPresenterMockRecorder) ToNewEntities(entityPortal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToNewEntities", reflect.TypeOf((*MockPortalsPortalsPresenter)(nil).ToNewEntities), entityPortal)
}

// ToNewEntity mocks base method.
func (m *MockPortalsPortalsPresenter) ToNewEntity(newPortal *portals.NewPortal) *portal.Portal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToNewEntity", newPortal)
	ret0, _ := ret[0].(*portal.Portal)
	return ret0
}

// ToNewEntity indicates an expected call of ToNewEntity.
func (mr *MockPortalsPortalsPresenterMockRecorder) ToNewEntity(newPortal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToNewEntity", reflect.TypeOf((*MockPortalsPortalsPresenter)(nil).ToNewEntity), newPortal)
}

// ToShortView mocks base method.
func (m *MockPortalsPortalsPresenter) ToShortView(portal *portal.Portal) *portals.PortalInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToShortView", portal)
	ret0, _ := ret[0].(*portals.PortalInfo)
	return ret0
}

// ToShortView indicates an expected call of ToShortView.
func (mr *MockPortalsPortalsPresenterMockRecorder) ToShortView(portal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToShortView", reflect.TypeOf((*MockPortalsPortalsPresenter)(nil).ToShortView), portal)
}

// ToShortViews mocks base method.
func (m *MockPortalsPortalsPresenter) ToShortViews(entityPortal []*portal.Portal) []*portals.PortalInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToShortViews", entityPortal)
	ret0, _ := ret[0].([]*portals.PortalInfo)
	return ret0
}

// ToShortViews indicates an expected call of ToShortViews.
func (mr *MockPortalsPortalsPresenterMockRecorder) ToShortViews(entityPortal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToShortViews", reflect.TypeOf((*MockPortalsPortalsPresenter)(nil).ToShortViews), entityPortal)
}

// ToView mocks base method.
func (m *MockPortalsPortalsPresenter) ToView(portal *portal.Portal) *portals.Portal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToView", portal)
	ret0, _ := ret[0].(*portals.Portal)
	return ret0
}

// ToView indicates an expected call of ToView.
func (mr *MockPortalsPortalsPresenterMockRecorder) ToView(portal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToView", reflect.TypeOf((*MockPortalsPortalsPresenter)(nil).ToView), portal)
}

// ToViews mocks base method.
func (m *MockPortalsPortalsPresenter) ToViews(entityPortal []*portal.Portal) []*portals.Portal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToViews", entityPortal)
	ret0, _ := ret[0].([]*portals.Portal)
	return ret0
}

// ToViews indicates an expected call of ToViews.
func (mr *MockPortalsPortalsPresenterMockRecorder) ToViews(entityPortal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToViews", reflect.TypeOf((*MockPortalsPortalsPresenter)(nil).ToViews), entityPortal)
}

// ToWebView mocks base method.
func (m *MockPortalsPortalsPresenter) ToWebView(portal *portal.Portal) *portals.WebPortal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWebView", portal)
	ret0, _ := ret[0].(*portals.WebPortal)
	return ret0
}

// ToWebView indicates an expected call of ToWebView.
func (mr *MockPortalsPortalsPresenterMockRecorder) ToWebView(portal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWebView", reflect.TypeOf((*MockPortalsPortalsPresenter)(nil).ToWebView), portal)
}

// ToWebViews mocks base method.
func (m *MockPortalsPortalsPresenter) ToWebViews(entityPortal []*portal.Portal) []*portals.WebPortal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWebViews", entityPortal)
	ret0, _ := ret[0].([]*portals.WebPortal)
	return ret0
}

// ToWebViews indicates an expected call of ToWebViews.
func (mr *MockPortalsPortalsPresenterMockRecorder) ToWebViews(entityPortal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWebViews", reflect.TypeOf((*MockPortalsPortalsPresenter)(nil).ToWebViews), entityPortal)
}

// MockPortalsQuestionsPresenter is a mock of PortalsQuestionsPresenter interface.
type MockPortalsQuestionsPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockPortalsQuestionsPresenterMockRecorder
	isgomock struct{}
}

// MockPortalsQuestionsPresenterMockRecorder is the mock recorder for MockPortalsQuestionsPresenter.
type MockPortalsQuestionsPresenterMockRecorder struct {
	mock *MockPortalsQuestionsPresenter
}

// NewMockPortalsQuestionsPresenter creates a new mock instance.
func NewMockPortalsQuestionsPresenter(ctrl *gomock.Controller) *MockPortalsQuestionsPresenter {
	mock := &MockPortalsQuestionsPresenter{ctrl: ctrl}
	mock.recorder = &MockPortalsQuestionsPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalsQuestionsPresenter) EXPECT() *MockPortalsQuestionsPresenterMockRecorder {
	return m.recorder
}

// ToEntities mocks base method.
func (m *MockPortalsQuestionsPresenter) ToEntities(questions []*portals.UpdateQuestion) []*portal.Question {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToEntities", questions)
	ret0, _ := ret[0].([]*portal.Question)
	return ret0
}

// ToEntities indicates an expected call of ToEntities.
func (mr *MockPortalsQuestionsPresenterMockRecorder) ToEntities(questions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToEntities", reflect.TypeOf((*MockPortalsQuestionsPresenter)(nil).ToEntities), questions)
}

// ToEntity mocks base method.
func (m *MockPortalsQuestionsPresenter) ToEntity(question *portals.UpdateQuestion) *portal.Question {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToEntity", question)
	ret0, _ := ret[0].(*portal.Question)
	return ret0
}

// ToEntity indicates an expected call of ToEntity.
func (mr *MockPortalsQuestionsPresenterMockRecorder) ToEntity(question any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToEntity", reflect.TypeOf((*MockPortalsQuestionsPresenter)(nil).ToEntity), question)
}

// ToNewEntities mocks base method.
func (m *MockPortalsQuestionsPresenter) ToNewEntities(questions []*portals.NewQuestion) []*portal.Question {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToNewEntities", questions)
	ret0, _ := ret[0].([]*portal.Question)
	return ret0
}

// ToNewEntities indicates an expected call of ToNewEntities.
func (mr *MockPortalsQuestionsPresenterMockRecorder) ToNewEntities(questions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToNewEntities", reflect.TypeOf((*MockPortalsQuestionsPresenter)(nil).ToNewEntities), questions)
}

// ToNewEntity mocks base method.
func (m *MockPortalsQuestionsPresenter) ToNewEntity(question *portals.NewQuestion) *portal.Question {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToNewEntity", question)
	ret0, _ := ret[0].(*portal.Question)
	return ret0
}

// ToNewEntity indicates an expected call of ToNewEntity.
func (mr *MockPortalsQuestionsPresenterMockRecorder) ToNewEntity(question any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToNewEntity", reflect.TypeOf((*MockPortalsQuestionsPresenter)(nil).ToNewEntity), question)
}

// ToShortView mocks base method.
func (m *MockPortalsQuestionsPresenter) ToShortView(question *portal.Question) *portals.QuestionInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToShortView", question)
	ret0, _ := ret[0].(*portals.QuestionInfo)
	return ret0
}

// ToShortView indicates an expected call of ToShortView.
func (mr *MockPortalsQuestionsPresenterMockRecorder) ToShortView(question any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToShortView", reflect.TypeOf((*MockPortalsQuestionsPresenter)(nil).ToShortView), question)
}

// ToShortViews mocks base method.
func (m *MockPortalsQuestionsPresenter) ToShortViews(questions []*portal.Question) []*portals.QuestionInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToShortViews", questions)
	ret0, _ := ret[0].([]*portals.QuestionInfo)
	return ret0
}

// ToShortViews indicates an expected call of ToShortViews.
func (mr *MockPortalsQuestionsPresenterMockRecorder) ToShortViews(questions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToShortViews", reflect.TypeOf((*MockPortalsQuestionsPresenter)(nil).ToShortViews), questions)
}

// ToView mocks base method.
func (m *MockPortalsQuestionsPresenter) ToView(question *portal.Question) *portals.Question {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToView", question)
	ret0, _ := ret[0].(*portals.Question)
	return ret0
}

// ToView indicates an expected call of ToView.
func (mr *MockPortalsQuestionsPresenterMockRecorder) ToView(question any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToView", reflect.TypeOf((*MockPortalsQuestionsPresenter)(nil).ToView), question)
}

// ToViews mocks base method.
func (m *MockPortalsQuestionsPresenter) ToViews(questions []*portal.Question) []*portals.Question {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToViews", questions)
	ret0, _ := ret[0].([]*portals.Question)
	return ret0
}

// ToViews indicates an expected call of ToViews.
func (mr *MockPortalsQuestionsPresenterMockRecorder) ToViews(questions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToViews", reflect.TypeOf((*MockPortalsQuestionsPresenter)(nil).ToViews), questions)
}

// MockPortalsImagesPresenter is a mock of PortalsImagesPresenter interface.
type MockPortalsImagesPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockPortalsImagesPresenterMockRecorder
	isgomock struct{}
}

// MockPortalsImagesPresenterMockRecorder is the mock recorder for MockPortalsImagesPresenter.
type MockPortalsImagesPresenterMockRecorder struct {
	mock *MockPortalsImagesPresenter
}

// NewMockPortalsImagesPresenter creates a new mock instance.
func NewMockPortalsImagesPresenter(ctrl *gomock.Controller) *MockPortalsImagesPresenter {
	mock := &MockPortalsImagesPresenter{ctrl: ctrl}
	mock.recorder = &MockPortalsImagesPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalsImagesPresenter) EXPECT() *MockPortalsImagesPresenterMockRecorder {
	return m.recorder
}

// ToEntities mocks base method.
func (m *MockPortalsImagesPresenter) ToEntities(images []*portals.Image) []*portal.Image {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToEntities", images)
	ret0, _ := ret[0].([]*portal.Image)
	return ret0
}

// ToEntities indicates an expected call of ToEntities.
func (mr *MockPortalsImagesPresenterMockRecorder) ToEntities(images any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToEntities", reflect.TypeOf((*MockPortalsImagesPresenter)(nil).ToEntities), images)
}

// ToEntity mocks base method.
func (m *MockPortalsImagesPresenter) ToEntity(image *portals.Image) *portal.Image {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToEntity", image)
	ret0, _ := ret[0].(*portal.Image)
	return ret0
}

// ToEntity indicates an expected call of ToEntity.
func (mr *MockPortalsImagesPresenterMockRecorder) ToEntity(image any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToEntity", reflect.TypeOf((*MockPortalsImagesPresenter)(nil).ToEntity), image)
}

// ToNewEntity mocks base method.
func (m *MockPortalsImagesPresenter) ToNewEntity(image *portals.NewImage) *portal.Image {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToNewEntity", image)
	ret0, _ := ret[0].(*portal.Image)
	return ret0
}

// ToNewEntity indicates an expected call of ToNewEntity.
func (mr *MockPortalsImagesPresenterMockRecorder) ToNewEntity(image any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToNewEntity", reflect.TypeOf((*MockPortalsImagesPresenter)(nil).ToNewEntity), image)
}

// ToShortView mocks base method.
func (m *MockPortalsImagesPresenter) ToShortView(image *portal.Image) *portals.ImageInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToShortView", image)
	ret0, _ := ret[0].(*portals.ImageInfo)
	return ret0
}

// ToShortView indicates an expected call of ToShortView.
func (mr *MockPortalsImagesPresenterMockRecorder) ToShortView(image any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToShortView", reflect.TypeOf((*MockPortalsImagesPresenter)(nil).ToShortView), image)
}

// ToShortViews mocks base method.
func (m *MockPortalsImagesPresenter) ToShortViews(images []*portal.Image) []*portals.ImageInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToShortViews", images)
	ret0, _ := ret[0].([]*portals.ImageInfo)
	return ret0
}

// ToShortViews indicates an expected call of ToShortViews.
func (mr *MockPortalsImagesPresenterMockRecorder) ToShortViews(images any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToShortViews", reflect.TypeOf((*MockPortalsImagesPresenter)(nil).ToShortViews), images)
}

// ToView mocks base method.
func (m *MockPortalsImagesPresenter) ToView(image *portal.Image) *portals.Image {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToView", image)
	ret0, _ := ret[0].(*portals.Image)
	return ret0
}

// ToView indicates an expected call of ToView.
func (mr *MockPortalsImagesPresenterMockRecorder) ToView(image any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToView", reflect.TypeOf((*MockPortalsImagesPresenter)(nil).ToView), image)
}

// ToViews mocks base method.
func (m *MockPortalsImagesPresenter) ToViews(images []*portal.Image) []*portals.Image {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToViews", images)
	ret0, _ := ret[0].([]*portals.Image)
	return ret0
}

// ToViews indicates an expected call of ToViews.
func (mr *MockPortalsImagesPresenterMockRecorder) ToViews(images any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToViews", reflect.TypeOf((*MockPortalsImagesPresenter)(nil).ToViews), images)
}

// MockPortalsFeaturesPresenter is a mock of PortalsFeaturesPresenter interface.
type MockPortalsFeaturesPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockPortalsFeaturesPresenterMockRecorder
	isgomock struct{}
}

// MockPortalsFeaturesPresenterMockRecorder is the mock recorder for MockPortalsFeaturesPresenter.
type MockPortalsFeaturesPresenterMockRecorder struct {
	mock *MockPortalsFeaturesPresenter
}

// NewMockPortalsFeaturesPresenter creates a new mock instance.
func NewMockPortalsFeaturesPresenter(ctrl *gomock.Controller) *MockPortalsFeaturesPresenter {
	mock := &MockPortalsFeaturesPresenter{ctrl: ctrl}
	mock.recorder = &MockPortalsFeaturesPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalsFeaturesPresenter) EXPECT() *MockPortalsFeaturesPresenterMockRecorder {
	return m.recorder
}

// ToEntities mocks base method.
func (m *MockPortalsFeaturesPresenter) ToEntities(features []*portals.UpdateFeature) []*portal.Feature {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToEntities", features)
	ret0, _ := ret[0].([]*portal.Feature)
	return ret0
}

// ToEntities indicates an expected call of ToEntities.
func (mr *MockPortalsFeaturesPresenterMockRecorder) ToEntities(features any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToEntities", reflect.TypeOf((*MockPortalsFeaturesPresenter)(nil).ToEntities), features)
}

// ToEntity mocks base method.
func (m *MockPortalsFeaturesPresenter) ToEntity(feature *portals.UpdateFeature) *portal.Feature {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToEntity", feature)
	ret0, _ := ret[0].(*portal.Feature)
	return ret0
}

// ToEntity indicates an expected call of ToEntity.
func (mr *MockPortalsFeaturesPresenterMockRecorder) ToEntity(feature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToEntity", reflect.TypeOf((*MockPortalsFeaturesPresenter)(nil).ToEntity), feature)
}

// ToNewEntities mocks base method.
func (m *MockPortalsFeaturesPresenter) ToNewEntities(features []*portals.NewFeature) []*portal.Feature {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToNewEntities", features)
	ret0, _ := ret[0].([]*portal.Feature)
	return ret0
}

// ToNewEntities indicates an expected call of ToNewEntities.
func (mr *MockPortalsFeaturesPresenterMockRecorder) ToNewEntities(features any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToNewEntities", reflect.TypeOf((*MockPortalsFeaturesPresenter)(nil).ToNewEntities), features)
}

// ToNewEntity mocks base method.
func (m *MockPortalsFeaturesPresenter) ToNewEntity(feature *portals.NewFeature) *portal.Feature {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToNewEntity", feature)
	ret0, _ := ret[0].(*portal.Feature)
	return ret0
}

// ToNewEntity indicates an expected call of ToNewEntity.
func (mr *MockPortalsFeaturesPresenterMockRecorder) ToNewEntity(feature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToNewEntity", reflect.TypeOf((*MockPortalsFeaturesPresenter)(nil).ToNewEntity), feature)
}

// ToShortView mocks base method.
func (m *MockPortalsFeaturesPresenter) ToShortView(feature *portal.Feature) *portals.FeatureInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToShortView", feature)
	ret0, _ := ret[0].(*portals.FeatureInfo)
	return ret0
}

// ToShortView indicates an expected call of ToShortView.
func (mr *MockPortalsFeaturesPresenterMockRecorder) ToShortView(feature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToShortView", reflect.TypeOf((*MockPortalsFeaturesPresenter)(nil).ToShortView), feature)
}

// ToShortViews mocks base method.
func (m *MockPortalsFeaturesPresenter) ToShortViews(features []*portal.Feature) portals.Features {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToShortViews", features)
	ret0, _ := ret[0].(portals.Features)
	return ret0
}

// ToShortViews indicates an expected call of ToShortViews.
func (mr *MockPortalsFeaturesPresenterMockRecorder) ToShortViews(features any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToShortViews", reflect.TypeOf((*MockPortalsFeaturesPresenter)(nil).ToShortViews), features)
}

// ToView mocks base method.
func (m *MockPortalsFeaturesPresenter) ToView(feature *portal.Feature) *portals.Feature {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToView", feature)
	ret0, _ := ret[0].(*portals.Feature)
	return ret0
}

// ToView indicates an expected call of ToView.
func (mr *MockPortalsFeaturesPresenterMockRecorder) ToView(feature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToView", reflect.TypeOf((*MockPortalsFeaturesPresenter)(nil).ToView), feature)
}

// ToViews mocks base method.
func (m *MockPortalsFeaturesPresenter) ToViews(features []*portal.Feature) []*portals.Feature {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToViews", features)
	ret0, _ := ret[0].([]*portals.Feature)
	return ret0
}

// ToViews indicates an expected call of ToViews.
func (mr *MockPortalsFeaturesPresenterMockRecorder) ToViews(features any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToViews", reflect.TypeOf((*MockPortalsFeaturesPresenter)(nil).ToViews), features)
}

// MockPortalsOrganizationsPresenter is a mock of PortalsOrganizationsPresenter interface.
type MockPortalsOrganizationsPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockPortalsOrganizationsPresenterMockRecorder
	isgomock struct{}
}

// MockPortalsOrganizationsPresenterMockRecorder is the mock recorder for MockPortalsOrganizationsPresenter.
type MockPortalsOrganizationsPresenterMockRecorder struct {
	mock *MockPortalsOrganizationsPresenter
}

// NewMockPortalsOrganizationsPresenter creates a new mock instance.
func NewMockPortalsOrganizationsPresenter(ctrl *gomock.Controller) *MockPortalsOrganizationsPresenter {
	mock := &MockPortalsOrganizationsPresenter{ctrl: ctrl}
	mock.recorder = &MockPortalsOrganizationsPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalsOrganizationsPresenter) EXPECT() *MockPortalsOrganizationsPresenterMockRecorder {
	return m.recorder
}

// FiltersToEntity mocks base method.
func (m *MockPortalsOrganizationsPresenter) FiltersToEntity(filters portals.OrganizationsFilters) portal.OrganizationsFilters {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FiltersToEntity", filters)
	ret0, _ := ret[0].(portal.OrganizationsFilters)
	return ret0
}

// FiltersToEntity indicates an expected call of FiltersToEntity.
func (mr *MockPortalsOrganizationsPresenterMockRecorder) FiltersToEntity(filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FiltersToEntity", reflect.TypeOf((*MockPortalsOrganizationsPresenter)(nil).FiltersToEntity), filters)
}

// OptionsToEntity mocks base method.
func (m *MockPortalsOrganizationsPresenter) OptionsToEntity(options *portals.OrganizationsFilterOptions) portal.OrganizationsFilterOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OptionsToEntity", options)
	ret0, _ := ret[0].(portal.OrganizationsFilterOptions)
	return ret0
}

// OptionsToEntity indicates an expected call of OptionsToEntity.
func (mr *MockPortalsOrganizationsPresenterMockRecorder) OptionsToEntity(options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OptionsToEntity", reflect.TypeOf((*MockPortalsOrganizationsPresenter)(nil).OptionsToEntity), options)
}

// OrganizationIdsToEntity mocks base method.
func (m *MockPortalsOrganizationsPresenter) OrganizationIdsToEntity(ids portals.OrganizationIds) portal.OrganizationIDs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationIdsToEntity", ids)
	ret0, _ := ret[0].(portal.OrganizationIDs)
	return ret0
}

// OrganizationIdsToEntity indicates an expected call of OrganizationIdsToEntity.
func (mr *MockPortalsOrganizationsPresenterMockRecorder) OrganizationIdsToEntity(ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationIdsToEntity", reflect.TypeOf((*MockPortalsOrganizationsPresenter)(nil).OrganizationIdsToEntity), ids)
}

// OrganizationsToView mocks base method.
func (m *MockPortalsOrganizationsPresenter) OrganizationsToView(orgs []*portal.Organization) []*portals.Organization {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationsToView", orgs)
	ret0, _ := ret[0].([]*portals.Organization)
	return ret0
}

// OrganizationsToView indicates an expected call of OrganizationsToView.
func (mr *MockPortalsOrganizationsPresenterMockRecorder) OrganizationsToView(orgs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationsToView", reflect.TypeOf((*MockPortalsOrganizationsPresenter)(nil).OrganizationsToView), orgs)
}

// PaginationToEntity mocks base method.
func (m *MockPortalsOrganizationsPresenter) PaginationToEntity(pagination *view.StringPagination) *entity.StringPagination {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaginationToEntity", pagination)
	ret0, _ := ret[0].(*entity.StringPagination)
	return ret0
}

// PaginationToEntity indicates an expected call of PaginationToEntity.
func (mr *MockPortalsOrganizationsPresenterMockRecorder) PaginationToEntity(pagination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaginationToEntity", reflect.TypeOf((*MockPortalsOrganizationsPresenter)(nil).PaginationToEntity), pagination)
}

// PaginationToView mocks base method.
func (m *MockPortalsOrganizationsPresenter) PaginationToView(pagination *entity.StringPagination) *view.StringPagination {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaginationToView", pagination)
	ret0, _ := ret[0].(*view.StringPagination)
	return ret0
}

// PaginationToView indicates an expected call of PaginationToView.
func (mr *MockPortalsOrganizationsPresenterMockRecorder) PaginationToView(pagination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaginationToView", reflect.TypeOf((*MockPortalsOrganizationsPresenter)(nil).PaginationToView), pagination)
}

// MockSurveysPresenter is a mock of SurveysPresenter interface.
type MockSurveysPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockSurveysPresenterMockRecorder
	isgomock struct{}
}

// MockSurveysPresenterMockRecorder is the mock recorder for MockSurveysPresenter.
type MockSurveysPresenterMockRecorder struct {
	mock *MockSurveysPresenter
}

// NewMockSurveysPresenter creates a new mock instance.
func NewMockSurveysPresenter(ctrl *gomock.Controller) *MockSurveysPresenter {
	mock := &MockSurveysPresenter{ctrl: ctrl}
	mock.recorder = &MockSurveysPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSurveysPresenter) EXPECT() *MockSurveysPresenterMockRecorder {
	return m.recorder
}

// IDToView mocks base method.
func (m *MockSurveysPresenter) IDToView(ID *entitySurveys.SurveyID) *view0.IDResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IDToView", ID)
	ret0, _ := ret[0].(*view0.IDResponse)
	return ret0
}

// IDToView indicates an expected call of IDToView.
func (mr *MockSurveysPresenterMockRecorder) IDToView(ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IDToView", reflect.TypeOf((*MockSurveysPresenter)(nil).IDToView), ID)
}

// IDsToEntities mocks base method.
func (m *MockSurveysPresenter) IDsToEntities(ids []uuid.UUID) entitySurveys.SurveyIDs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IDsToEntities", ids)
	ret0, _ := ret[0].(entitySurveys.SurveyIDs)
	return ret0
}

// IDsToEntities indicates an expected call of IDsToEntities.
func (mr *MockSurveysPresenterMockRecorder) IDsToEntities(ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IDsToEntities", reflect.TypeOf((*MockSurveysPresenter)(nil).IDsToEntities), ids)
}

// OptionsToEntity mocks base method.
func (m *MockSurveysPresenter) OptionsToEntity(options *view0.SurveysOptions) entitySurveys.SurveyFilterOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OptionsToEntity", options)
	ret0, _ := ret[0].(entitySurveys.SurveyFilterOptions)
	return ret0
}

// OptionsToEntity indicates an expected call of OptionsToEntity.
func (mr *MockSurveysPresenterMockRecorder) OptionsToEntity(options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OptionsToEntity", reflect.TypeOf((*MockSurveysPresenter)(nil).OptionsToEntity), options)
}

// PaginationToEntity mocks base method.
func (m *MockSurveysPresenter) PaginationToEntity(pagination *view0.GetAllSurveysPagination) entitySurveys.Pagination {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaginationToEntity", pagination)
	ret0, _ := ret[0].(entitySurveys.Pagination)
	return ret0
}

// PaginationToEntity indicates an expected call of PaginationToEntity.
func (mr *MockSurveysPresenterMockRecorder) PaginationToEntity(pagination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaginationToEntity", reflect.TypeOf((*MockSurveysPresenter)(nil).PaginationToEntity), pagination)
}

// RespondentToEntity mocks base method.
func (m *MockSurveysPresenter) RespondentToEntity(respondent *view0.GetAllSurveysRespondent) *entitySurveys.SurveyRespondent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RespondentToEntity", respondent)
	ret0, _ := ret[0].(*entitySurveys.SurveyRespondent)
	return ret0
}

// RespondentToEntity indicates an expected call of RespondentToEntity.
func (mr *MockSurveysPresenterMockRecorder) RespondentToEntity(respondent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RespondentToEntity", reflect.TypeOf((*MockSurveysPresenter)(nil).RespondentToEntity), respondent)
}

// SurveysWithPaginationToView mocks base method.
func (m *MockSurveysPresenter) SurveysWithPaginationToView(surveysWithPagination *entitySurveys.SurveysWithPagination) *view0.SurveysWithPagination {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SurveysWithPaginationToView", surveysWithPagination)
	ret0, _ := ret[0].(*view0.SurveysWithPagination)
	return ret0
}

// SurveysWithPaginationToView indicates an expected call of SurveysWithPaginationToView.
func (mr *MockSurveysPresenterMockRecorder) SurveysWithPaginationToView(surveysWithPagination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SurveysWithPaginationToView", reflect.TypeOf((*MockSurveysPresenter)(nil).SurveysWithPaginationToView), surveysWithPagination)
}

// ToEntity mocks base method.
func (m *MockSurveysPresenter) ToEntity(s *view0.Survey) *entitySurveys.Survey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToEntity", s)
	ret0, _ := ret[0].(*entitySurveys.Survey)
	return ret0
}

// ToEntity indicates an expected call of ToEntity.
func (mr *MockSurveysPresenterMockRecorder) ToEntity(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToEntity", reflect.TypeOf((*MockSurveysPresenter)(nil).ToEntity), s)
}

// ToNewEntity mocks base method.
func (m *MockSurveysPresenter) ToNewEntity(s *view0.NewSurvey) *entitySurveys.Survey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToNewEntity", s)
	ret0, _ := ret[0].(*entitySurveys.Survey)
	return ret0
}

// ToNewEntity indicates an expected call of ToNewEntity.
func (mr *MockSurveysPresenterMockRecorder) ToNewEntity(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToNewEntity", reflect.TypeOf((*MockSurveysPresenter)(nil).ToNewEntity), s)
}

// ToShortView mocks base method.
func (m *MockSurveysPresenter) ToShortView(s *entitySurveys.Survey) *view0.SurveyInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToShortView", s)
	ret0, _ := ret[0].(*view0.SurveyInfo)
	return ret0
}

// ToShortView indicates an expected call of ToShortView.
func (mr *MockSurveysPresenterMockRecorder) ToShortView(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToShortView", reflect.TypeOf((*MockSurveysPresenter)(nil).ToShortView), s)
}

// ToView mocks base method.
func (m *MockSurveysPresenter) ToView(s *entitySurveys.Survey) *view0.Survey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToView", s)
	ret0, _ := ret[0].(*view0.Survey)
	return ret0
}

// ToView indicates an expected call of ToView.
func (mr *MockSurveysPresenterMockRecorder) ToView(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToView", reflect.TypeOf((*MockSurveysPresenter)(nil).ToView), s)
}

// MockSurveysAnswersPresenter is a mock of SurveysAnswersPresenter interface.
type MockSurveysAnswersPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockSurveysAnswersPresenterMockRecorder
	isgomock struct{}
}

// MockSurveysAnswersPresenterMockRecorder is the mock recorder for MockSurveysAnswersPresenter.
type MockSurveysAnswersPresenterMockRecorder struct {
	mock *MockSurveysAnswersPresenter
}

// NewMockSurveysAnswersPresenter creates a new mock instance.
func NewMockSurveysAnswersPresenter(ctrl *gomock.Controller) *MockSurveysAnswersPresenter {
	mock := &MockSurveysAnswersPresenter{ctrl: ctrl}
	mock.recorder = &MockSurveysAnswersPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSurveysAnswersPresenter) EXPECT() *MockSurveysAnswersPresenterMockRecorder {
	return m.recorder
}

// ToNewEntities mocks base method.
func (m *MockSurveysAnswersPresenter) ToNewEntities(answers *view0.NewSurveyAnswers) []*entitySurveys.RespondentAnswer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToNewEntities", answers)
	ret0, _ := ret[0].([]*entitySurveys.RespondentAnswer)
	return ret0
}

// ToNewEntities indicates an expected call of ToNewEntities.
func (mr *MockSurveysAnswersPresenterMockRecorder) ToNewEntities(answers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToNewEntities", reflect.TypeOf((*MockSurveysAnswersPresenter)(nil).ToNewEntities), answers)
}

// ToShortViews mocks base method.
func (m *MockSurveysAnswersPresenter) ToShortViews(ids []uuid.UUID) []*view0.SurveyAnswerInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToShortViews", ids)
	ret0, _ := ret[0].([]*view0.SurveyAnswerInfo)
	return ret0
}

// ToShortViews indicates an expected call of ToShortViews.
func (mr *MockSurveysAnswersPresenterMockRecorder) ToShortViews(ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToShortViews", reflect.TypeOf((*MockSurveysAnswersPresenter)(nil).ToShortViews), ids)
}

// ToViews mocks base method.
func (m *MockSurveysAnswersPresenter) ToViews(answers []*entitySurveys.RespondentAnswer) []*view0.SurveyAnswer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToViews", answers)
	ret0, _ := ret[0].([]*view0.SurveyAnswer)
	return ret0
}

// ToViews indicates an expected call of ToViews.
func (mr *MockSurveysAnswersPresenterMockRecorder) ToViews(answers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToViews", reflect.TypeOf((*MockSurveysAnswersPresenter)(nil).ToViews), answers)
}

// MockSurveysImagesPresenter is a mock of SurveysImagesPresenter interface.
type MockSurveysImagesPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockSurveysImagesPresenterMockRecorder
	isgomock struct{}
}

// MockSurveysImagesPresenterMockRecorder is the mock recorder for MockSurveysImagesPresenter.
type MockSurveysImagesPresenterMockRecorder struct {
	mock *MockSurveysImagesPresenter
}

// NewMockSurveysImagesPresenter creates a new mock instance.
func NewMockSurveysImagesPresenter(ctrl *gomock.Controller) *MockSurveysImagesPresenter {
	mock := &MockSurveysImagesPresenter{ctrl: ctrl}
	mock.recorder = &MockSurveysImagesPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSurveysImagesPresenter) EXPECT() *MockSurveysImagesPresenterMockRecorder {
	return m.recorder
}

// ToNewEntity mocks base method.
func (m *MockSurveysImagesPresenter) ToNewEntity(image *view0.NewSurveyImageObject) *entitySurveys.Image {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToNewEntity", image)
	ret0, _ := ret[0].(*entitySurveys.Image)
	return ret0
}

// ToNewEntity indicates an expected call of ToNewEntity.
func (mr *MockSurveysImagesPresenterMockRecorder) ToNewEntity(image any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToNewEntity", reflect.TypeOf((*MockSurveysImagesPresenter)(nil).ToNewEntity), image)
}

// ToView mocks base method.
func (m *MockSurveysImagesPresenter) ToView(image *entitySurveys.Image) *view0.SurveyImageObject {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToView", image)
	ret0, _ := ret[0].(*view0.SurveyImageObject)
	return ret0
}

// ToView indicates an expected call of ToView.
func (mr *MockSurveysImagesPresenterMockRecorder) ToView(image any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToView", reflect.TypeOf((*MockSurveysImagesPresenter)(nil).ToView), image)
}

// MockAuthPresenter is a mock of AuthPresenter interface.
type MockAuthPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockAuthPresenterMockRecorder
	isgomock struct{}
}

// MockAuthPresenterMockRecorder is the mock recorder for MockAuthPresenter.
type MockAuthPresenterMockRecorder struct {
	mock *MockAuthPresenter
}

// NewMockAuthPresenter creates a new mock instance.
func NewMockAuthPresenter(ctrl *gomock.Controller) *MockAuthPresenter {
	mock := &MockAuthPresenter{ctrl: ctrl}
	mock.recorder = &MockAuthPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthPresenter) EXPECT() *MockAuthPresenterMockRecorder {
	return m.recorder
}

// AuthToView mocks base method.
func (m *MockAuthPresenter) AuthToView(authInfo *auth0.Auth) *auth.AuthResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthToView", authInfo)
	ret0, _ := ret[0].(*auth.AuthResponse)
	return ret0
}

// AuthToView indicates an expected call of AuthToView.
func (mr *MockAuthPresenterMockRecorder) AuthToView(authInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthToView", reflect.TypeOf((*MockAuthPresenter)(nil).AuthToView), authInfo)
}

// MockEmployeesSearchPresenter is a mock of EmployeesSearchPresenter interface.
type MockEmployeesSearchPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeesSearchPresenterMockRecorder
	isgomock struct{}
}

// MockEmployeesSearchPresenterMockRecorder is the mock recorder for MockEmployeesSearchPresenter.
type MockEmployeesSearchPresenterMockRecorder struct {
	mock *MockEmployeesSearchPresenter
}

// NewMockEmployeesSearchPresenter creates a new mock instance.
func NewMockEmployeesSearchPresenter(ctrl *gomock.Controller) *MockEmployeesSearchPresenter {
	mock := &MockEmployeesSearchPresenter{ctrl: ctrl}
	mock.recorder = &MockEmployeesSearchPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeesSearchPresenter) EXPECT() *MockEmployeesSearchPresenterMockRecorder {
	return m.recorder
}

// FiltersRequestToEntity mocks base method.
func (m *MockEmployeesSearchPresenter) FiltersRequestToEntity(filter *employees_search.FiltersRequest) *employees_search0.SearchParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FiltersRequestToEntity", filter)
	ret0, _ := ret[0].(*employees_search0.SearchParams)
	return ret0
}

// FiltersRequestToEntity indicates an expected call of FiltersRequestToEntity.
func (mr *MockEmployeesSearchPresenterMockRecorder) FiltersRequestToEntity(filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FiltersRequestToEntity", reflect.TypeOf((*MockEmployeesSearchPresenter)(nil).FiltersRequestToEntity), filter)
}

// FiltersResponseToView mocks base method.
func (m *MockEmployeesSearchPresenter) FiltersResponseToView(filter *employees_search0.FiltersResponse) *employees_search.FiltersResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FiltersResponseToView", filter)
	ret0, _ := ret[0].(*employees_search.FiltersResponse)
	return ret0
}

// FiltersResponseToView indicates an expected call of FiltersResponseToView.
func (mr *MockEmployeesSearchPresenterMockRecorder) FiltersResponseToView(filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FiltersResponseToView", reflect.TypeOf((*MockEmployeesSearchPresenter)(nil).FiltersResponseToView), filter)
}

// GenderToEntity mocks base method.
func (m *MockEmployeesSearchPresenter) GenderToEntity(gender string) entity.Gender {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenderToEntity", gender)
	ret0, _ := ret[0].(entity.Gender)
	return ret0
}

// GenderToEntity indicates an expected call of GenderToEntity.
func (mr *MockEmployeesSearchPresenterMockRecorder) GenderToEntity(gender any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenderToEntity", reflect.TypeOf((*MockEmployeesSearchPresenter)(nil).GenderToEntity), gender)
}

// GenderToView mocks base method.
func (m *MockEmployeesSearchPresenter) GenderToView(gender entity.Gender) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenderToView", gender)
	ret0, _ := ret[0].(string)
	return ret0
}

// GenderToView indicates an expected call of GenderToView.
func (mr *MockEmployeesSearchPresenterMockRecorder) GenderToView(gender any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenderToView", reflect.TypeOf((*MockEmployeesSearchPresenter)(nil).GenderToView), gender)
}

// SearchRequestToEntity mocks base method.
func (m *MockEmployeesSearchPresenter) SearchRequestToEntity(search *employees_search.SearchRequest) *employees_search0.SearchParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchRequestToEntity", search)
	ret0, _ := ret[0].(*employees_search0.SearchParams)
	return ret0
}

// SearchRequestToEntity indicates an expected call of SearchRequestToEntity.
func (mr *MockEmployeesSearchPresenterMockRecorder) SearchRequestToEntity(search any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchRequestToEntity", reflect.TypeOf((*MockEmployeesSearchPresenter)(nil).SearchRequestToEntity), search)
}

// SearchResponseToView mocks base method.
func (m *MockEmployeesSearchPresenter) SearchResponseToView(search *employees_search0.SearchResponse) *employees_search.SearchResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchResponseToView", search)
	ret0, _ := ret[0].(*employees_search.SearchResponse)
	return ret0
}

// SearchResponseToView indicates an expected call of SearchResponseToView.
func (mr *MockEmployeesSearchPresenterMockRecorder) SearchResponseToView(search any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchResponseToView", reflect.TypeOf((*MockEmployeesSearchPresenter)(nil).SearchResponseToView), search)
}

// MockEmployeesUseCases is a mock of EmployeesUseCases interface.
type MockEmployeesUseCases struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeesUseCasesMockRecorder
	isgomock struct{}
}

// MockEmployeesUseCasesMockRecorder is the mock recorder for MockEmployeesUseCases.
type MockEmployeesUseCasesMockRecorder struct {
	mock *MockEmployeesUseCases
}

// NewMockEmployeesUseCases creates a new mock instance.
func NewMockEmployeesUseCases(ctrl *gomock.Controller) *MockEmployeesUseCases {
	mock := &MockEmployeesUseCases{ctrl: ctrl}
	mock.recorder = &MockEmployeesUseCasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeesUseCases) EXPECT() *MockEmployeesUseCasesMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockEmployeesUseCases) Get(ctx context.Context, id uuid.UUID) (*employee.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*employee.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockEmployeesUseCasesMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEmployeesUseCases)(nil).Get), ctx, id)
}

// GetByExtIDAndPortalID mocks base method.
func (m *MockEmployeesUseCases) GetByExtIDAndPortalID(ctx context.Context, extID string, portalID int) (*employee.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByExtIDAndPortalID", ctx, extID, portalID)
	ret0, _ := ret[0].(*employee.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByExtIDAndPortalID indicates an expected call of GetByExtIDAndPortalID.
func (mr *MockEmployeesUseCasesMockRecorder) GetByExtIDAndPortalID(ctx, extID, portalID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByExtIDAndPortalID", reflect.TypeOf((*MockEmployeesUseCases)(nil).GetByExtIDAndPortalID), ctx, extID, portalID)
}

// MockUsersPresenter is a mock of UsersPresenter interface.
type MockUsersPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockUsersPresenterMockRecorder
	isgomock struct{}
}

// MockUsersPresenterMockRecorder is the mock recorder for MockUsersPresenter.
type MockUsersPresenterMockRecorder struct {
	mock *MockUsersPresenter
}

// NewMockUsersPresenter creates a new mock instance.
func NewMockUsersPresenter(ctrl *gomock.Controller) *MockUsersPresenter {
	mock := &MockUsersPresenter{ctrl: ctrl}
	mock.recorder = &MockUsersPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersPresenter) EXPECT() *MockUsersPresenterMockRecorder {
	return m.recorder
}

// ShortUserToView mocks base method.
func (m *MockUsersPresenter) ShortUserToView(employee *user.ShortUser) *users.ShortUser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShortUserToView", employee)
	ret0, _ := ret[0].(*users.ShortUser)
	return ret0
}

// ShortUserToView indicates an expected call of ShortUserToView.
func (mr *MockUsersPresenterMockRecorder) ShortUserToView(employee any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShortUserToView", reflect.TypeOf((*MockUsersPresenter)(nil).ShortUserToView), employee)
}

// MockFilesHandlers is a mock of FilesHandlers interface.
type MockFilesHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockFilesHandlersMockRecorder
	isgomock struct{}
}

// MockFilesHandlersMockRecorder is the mock recorder for MockFilesHandlers.
type MockFilesHandlersMockRecorder struct {
	mock *MockFilesHandlers
}

// NewMockFilesHandlers creates a new mock instance.
func NewMockFilesHandlers(ctrl *gomock.Controller) *MockFilesHandlers {
	mock := &MockFilesHandlers{ctrl: ctrl}
	mock.recorder = &MockFilesHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesHandlers) EXPECT() *MockFilesHandlersMockRecorder {
	return m.recorder
}

// get mocks base method.
func (m *MockFilesHandlers) get(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "get", c)
}

// get indicates an expected call of get.
func (mr *MockFilesHandlersMockRecorder) get(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "get", reflect.TypeOf((*MockFilesHandlers)(nil).get), c)
}

// MockFilesInteractor is a mock of FilesInteractor interface.
type MockFilesInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockFilesInteractorMockRecorder
	isgomock struct{}
}

// MockFilesInteractorMockRecorder is the mock recorder for MockFilesInteractor.
type MockFilesInteractorMockRecorder struct {
	mock *MockFilesInteractor
}

// NewMockFilesInteractor creates a new mock instance.
func NewMockFilesInteractor(ctrl *gomock.Controller) *MockFilesInteractor {
	mock := &MockFilesInteractor{ctrl: ctrl}
	mock.recorder = &MockFilesInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesInteractor) EXPECT() *MockFilesInteractorMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockFilesInteractor) Get(ctx context.Context, fileId uuid.UUID) (*file.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, fileId)
	ret0, _ := ret[0].(*file.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockFilesInteractorMockRecorder) Get(ctx, fileId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFilesInteractor)(nil).Get), ctx, fileId)
}

// MockEmployeesPresenter is a mock of EmployeesPresenter interface.
type MockEmployeesPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeesPresenterMockRecorder
	isgomock struct{}
}

// MockEmployeesPresenterMockRecorder is the mock recorder for MockEmployeesPresenter.
type MockEmployeesPresenterMockRecorder struct {
	mock *MockEmployeesPresenter
}

// NewMockEmployeesPresenter creates a new mock instance.
func NewMockEmployeesPresenter(ctrl *gomock.Controller) *MockEmployeesPresenter {
	mock := &MockEmployeesPresenter{ctrl: ctrl}
	mock.recorder = &MockEmployeesPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeesPresenter) EXPECT() *MockEmployeesPresenterMockRecorder {
	return m.recorder
}

// EmployeeToView mocks base method.
func (m *MockEmployeesPresenter) EmployeeToView(composite *employee.Employee) *employees.Employee {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmployeeToView", composite)
	ret0, _ := ret[0].(*employees.Employee)
	return ret0
}

// EmployeeToView indicates an expected call of EmployeeToView.
func (mr *MockEmployeesPresenterMockRecorder) EmployeeToView(composite any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmployeeToView", reflect.TypeOf((*MockEmployeesPresenter)(nil).EmployeeToView), composite)
}

// MockAnalyticsHandlers is a mock of AnalyticsHandlers interface.
type MockAnalyticsHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockAnalyticsHandlersMockRecorder
	isgomock struct{}
}

// MockAnalyticsHandlersMockRecorder is the mock recorder for MockAnalyticsHandlers.
type MockAnalyticsHandlersMockRecorder struct {
	mock *MockAnalyticsHandlers
}

// NewMockAnalyticsHandlers creates a new mock instance.
func NewMockAnalyticsHandlers(ctrl *gomock.Controller) *MockAnalyticsHandlers {
	mock := &MockAnalyticsHandlers{ctrl: ctrl}
	mock.recorder = &MockAnalyticsHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnalyticsHandlers) EXPECT() *MockAnalyticsHandlersMockRecorder {
	return m.recorder
}

// addMetrics mocks base method.
func (m *MockAnalyticsHandlers) addMetrics(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "addMetrics", c)
}

// addMetrics indicates an expected call of addMetrics.
func (mr *MockAnalyticsHandlersMockRecorder) addMetrics(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addMetrics", reflect.TypeOf((*MockAnalyticsHandlers)(nil).addMetrics), c)
}

// MockAnalyticsInteractor is a mock of AnalyticsInteractor interface.
type MockAnalyticsInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockAnalyticsInteractorMockRecorder
	isgomock struct{}
}

// MockAnalyticsInteractorMockRecorder is the mock recorder for MockAnalyticsInteractor.
type MockAnalyticsInteractorMockRecorder struct {
	mock *MockAnalyticsInteractor
}

// NewMockAnalyticsInteractor creates a new mock instance.
func NewMockAnalyticsInteractor(ctrl *gomock.Controller) *MockAnalyticsInteractor {
	mock := &MockAnalyticsInteractor{ctrl: ctrl}
	mock.recorder = &MockAnalyticsInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnalyticsInteractor) EXPECT() *MockAnalyticsInteractorMockRecorder {
	return m.recorder
}

// AddMetrics mocks base method.
func (m *MockAnalyticsInteractor) AddMetrics(ctx context.Context, headers analytics.XCFCUserAgentHeader, body []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMetrics", ctx, headers, body)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMetrics indicates an expected call of AddMetrics.
func (mr *MockAnalyticsInteractorMockRecorder) AddMetrics(ctx, headers, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMetrics", reflect.TypeOf((*MockAnalyticsInteractor)(nil).AddMetrics), ctx, headers, body)
}

// MockPortalsV2Presenter is a mock of PortalsV2Presenter interface.
type MockPortalsV2Presenter struct {
	ctrl     *gomock.Controller
	recorder *MockPortalsV2PresenterMockRecorder
	isgomock struct{}
}

// MockPortalsV2PresenterMockRecorder is the mock recorder for MockPortalsV2Presenter.
type MockPortalsV2PresenterMockRecorder struct {
	mock *MockPortalsV2Presenter
}

// NewMockPortalsV2Presenter creates a new mock instance.
func NewMockPortalsV2Presenter(ctrl *gomock.Controller) *MockPortalsV2Presenter {
	mock := &MockPortalsV2Presenter{ctrl: ctrl}
	mock.recorder = &MockPortalsV2PresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalsV2Presenter) EXPECT() *MockPortalsV2PresenterMockRecorder {
	return m.recorder
}

// PortalsFilterToEntity mocks base method.
func (m *MockPortalsV2Presenter) PortalsFilterToEntity(filter *portalsv2.PortalsFilterRequest) *portalv2.FilterPortalsFilters {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PortalsFilterToEntity", filter)
	ret0, _ := ret[0].(*portalv2.FilterPortalsFilters)
	return ret0
}

// PortalsFilterToEntity indicates an expected call of PortalsFilterToEntity.
func (mr *MockPortalsV2PresenterMockRecorder) PortalsFilterToEntity(filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortalsFilterToEntity", reflect.TypeOf((*MockPortalsV2Presenter)(nil).PortalsFilterToEntity), filter)
}

// PortalsWithCountToView mocks base method.
func (m *MockPortalsV2Presenter) PortalsWithCountToView(portalsWithCounts []*portalv2.PortalWithCounts) []*portalsv2.Portal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PortalsWithCountToView", portalsWithCounts)
	ret0, _ := ret[0].([]*portalsv2.Portal)
	return ret0
}

// PortalsWithCountToView indicates an expected call of PortalsWithCountToView.
func (mr *MockPortalsV2PresenterMockRecorder) PortalsWithCountToView(portalsWithCounts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortalsWithCountToView", reflect.TypeOf((*MockPortalsV2Presenter)(nil).PortalsWithCountToView), portalsWithCounts)
}

// MockComplexesV2Presenter is a mock of ComplexesV2Presenter interface.
type MockComplexesV2Presenter struct {
	ctrl     *gomock.Controller
	recorder *MockComplexesV2PresenterMockRecorder
	isgomock struct{}
}

// MockComplexesV2PresenterMockRecorder is the mock recorder for MockComplexesV2Presenter.
type MockComplexesV2PresenterMockRecorder struct {
	mock *MockComplexesV2Presenter
}

// NewMockComplexesV2Presenter creates a new mock instance.
func NewMockComplexesV2Presenter(ctrl *gomock.Controller) *MockComplexesV2Presenter {
	mock := &MockComplexesV2Presenter{ctrl: ctrl}
	mock.recorder = &MockComplexesV2PresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComplexesV2Presenter) EXPECT() *MockComplexesV2PresenterMockRecorder {
	return m.recorder
}

// ComplexesToView mocks base method.
func (m *MockComplexesV2Presenter) ComplexesToView(complexes []*portalv2.Complex) []*portalsv2.Complex {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComplexesToView", complexes)
	ret0, _ := ret[0].([]*portalsv2.Complex)
	return ret0
}

// ComplexesToView indicates an expected call of ComplexesToView.
func (mr *MockComplexesV2PresenterMockRecorder) ComplexesToView(complexes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComplexesToView", reflect.TypeOf((*MockComplexesV2Presenter)(nil).ComplexesToView), complexes)
}

// MockPortalsV2Interactor is a mock of PortalsV2Interactor interface.
type MockPortalsV2Interactor struct {
	ctrl     *gomock.Controller
	recorder *MockPortalsV2InteractorMockRecorder
	isgomock struct{}
}

// MockPortalsV2InteractorMockRecorder is the mock recorder for MockPortalsV2Interactor.
type MockPortalsV2InteractorMockRecorder struct {
	mock *MockPortalsV2Interactor
}

// NewMockPortalsV2Interactor creates a new mock instance.
func NewMockPortalsV2Interactor(ctrl *gomock.Controller) *MockPortalsV2Interactor {
	mock := &MockPortalsV2Interactor{ctrl: ctrl}
	mock.recorder = &MockPortalsV2InteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalsV2Interactor) EXPECT() *MockPortalsV2InteractorMockRecorder {
	return m.recorder
}

// Filter mocks base method.
func (m *MockPortalsV2Interactor) Filter(ctx context.Context, filters *portalv2.FilterPortalsFilters, options *portalv2.FilterPortalsOptions) ([]*portalv2.PortalWithCounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", ctx, filters, options)
	ret0, _ := ret[0].([]*portalv2.PortalWithCounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter.
func (mr *MockPortalsV2InteractorMockRecorder) Filter(ctx, filters, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockPortalsV2Interactor)(nil).Filter), ctx, filters, options)
}

// MockComplexesV2Interactor is a mock of ComplexesV2Interactor interface.
type MockComplexesV2Interactor struct {
	ctrl     *gomock.Controller
	recorder *MockComplexesV2InteractorMockRecorder
	isgomock struct{}
}

// MockComplexesV2InteractorMockRecorder is the mock recorder for MockComplexesV2Interactor.
type MockComplexesV2InteractorMockRecorder struct {
	mock *MockComplexesV2Interactor
}

// NewMockComplexesV2Interactor creates a new mock instance.
func NewMockComplexesV2Interactor(ctrl *gomock.Controller) *MockComplexesV2Interactor {
	mock := &MockComplexesV2Interactor{ctrl: ctrl}
	mock.recorder = &MockComplexesV2InteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComplexesV2Interactor) EXPECT() *MockComplexesV2InteractorMockRecorder {
	return m.recorder
}

// Filter mocks base method.
func (m *MockComplexesV2Interactor) Filter(ctx context.Context, filters *portalv2.FilterComplexesFilters, options *portalv2.FilterComplexesOptions) ([]*portalv2.Complex, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", ctx, filters, options)
	ret0, _ := ret[0].([]*portalv2.Complex)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter.
func (mr *MockComplexesV2InteractorMockRecorder) Filter(ctx, filters, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockComplexesV2Interactor)(nil).Filter), ctx, filters, options)
}

// MockPortalsV2Handlers is a mock of PortalsV2Handlers interface.
type MockPortalsV2Handlers struct {
	ctrl     *gomock.Controller
	recorder *MockPortalsV2HandlersMockRecorder
	isgomock struct{}
}

// MockPortalsV2HandlersMockRecorder is the mock recorder for MockPortalsV2Handlers.
type MockPortalsV2HandlersMockRecorder struct {
	mock *MockPortalsV2Handlers
}

// NewMockPortalsV2Handlers creates a new mock instance.
func NewMockPortalsV2Handlers(ctrl *gomock.Controller) *MockPortalsV2Handlers {
	mock := &MockPortalsV2Handlers{ctrl: ctrl}
	mock.recorder = &MockPortalsV2HandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalsV2Handlers) EXPECT() *MockPortalsV2HandlersMockRecorder {
	return m.recorder
}

// getComplexes mocks base method.
func (m *MockPortalsV2Handlers) getComplexes(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getComplexes", c)
}

// getComplexes indicates an expected call of getComplexes.
func (mr *MockPortalsV2HandlersMockRecorder) getComplexes(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getComplexes", reflect.TypeOf((*MockPortalsV2Handlers)(nil).getComplexes), c)
}

// getPortals mocks base method.
func (m *MockPortalsV2Handlers) getPortals(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getPortals", c)
}

// getPortals indicates an expected call of getPortals.
func (mr *MockPortalsV2HandlersMockRecorder) getPortals(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getPortals", reflect.TypeOf((*MockPortalsV2Handlers)(nil).getPortals), c)
}

// MockNewsCategoryInteractor is a mock of NewsCategoryInteractor interface.
type MockNewsCategoryInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockNewsCategoryInteractorMockRecorder
	isgomock struct{}
}

// MockNewsCategoryInteractorMockRecorder is the mock recorder for MockNewsCategoryInteractor.
type MockNewsCategoryInteractorMockRecorder struct {
	mock *MockNewsCategoryInteractor
}

// NewMockNewsCategoryInteractor creates a new mock instance.
func NewMockNewsCategoryInteractor(ctrl *gomock.Controller) *MockNewsCategoryInteractor {
	mock := &MockNewsCategoryInteractor{ctrl: ctrl}
	mock.recorder = &MockNewsCategoryInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNewsCategoryInteractor) EXPECT() *MockNewsCategoryInteractorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockNewsCategoryInteractor) Create(ctx context.Context, nc *news0.NewCategory) (*news1.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, nc)
	ret0, _ := ret[0].(*news1.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockNewsCategoryInteractorMockRecorder) Create(ctx, nc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNewsCategoryInteractor)(nil).Create), ctx, nc)
}

// Delete mocks base method.
func (m *MockNewsCategoryInteractor) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockNewsCategoryInteractorMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNewsCategoryInteractor)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockNewsCategoryInteractor) Get(ctx context.Context, id uuid.UUID) (*news1.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*news1.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockNewsCategoryInteractorMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNewsCategoryInteractor)(nil).Get), ctx, id)
}

// Search mocks base method.
func (m *MockNewsCategoryInteractor) Search(crx context.Context, c *news0.SearchCategory) (*news1.CategoriesWithPagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", crx, c)
	ret0, _ := ret[0].(*news1.CategoriesWithPagination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockNewsCategoryInteractorMockRecorder) Search(crx, c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockNewsCategoryInteractor)(nil).Search), crx, c)
}

// Update mocks base method.
func (m *MockNewsCategoryInteractor) Update(ctx context.Context, c *news0.UpdateCategory) (*news1.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, c)
	ret0, _ := ret[0].(*news1.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockNewsCategoryInteractorMockRecorder) Update(ctx, c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNewsCategoryInteractor)(nil).Update), ctx, c)
}

// MockNewsCommentsInteractor is a mock of NewsCommentsInteractor interface.
type MockNewsCommentsInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockNewsCommentsInteractorMockRecorder
	isgomock struct{}
}

// MockNewsCommentsInteractorMockRecorder is the mock recorder for MockNewsCommentsInteractor.
type MockNewsCommentsInteractorMockRecorder struct {
	mock *MockNewsCommentsInteractor
}

// NewMockNewsCommentsInteractor creates a new mock instance.
func NewMockNewsCommentsInteractor(ctrl *gomock.Controller) *MockNewsCommentsInteractor {
	mock := &MockNewsCommentsInteractor{ctrl: ctrl}
	mock.recorder = &MockNewsCommentsInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNewsCommentsInteractor) EXPECT() *MockNewsCommentsInteractorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockNewsCommentsInteractor) Create(ctx context.Context, in news0.NewComment) (uuid.UUID, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockNewsCommentsInteractorMockRecorder) Create(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNewsCommentsInteractor)(nil).Create), ctx, in)
}

// List mocks base method.
func (m *MockNewsCommentsInteractor) List(ctx context.Context, params *news0.FilterComments) ([]*news1.NewsComment, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, params)
	ret0, _ := ret[0].([]*news1.NewsComment)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockNewsCommentsInteractorMockRecorder) List(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNewsCommentsInteractor)(nil).List), ctx, params)
}

// MockNewsAdminInteractor is a mock of NewsAdminInteractor interface.
type MockNewsAdminInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockNewsAdminInteractorMockRecorder
	isgomock struct{}
}

// MockNewsAdminInteractorMockRecorder is the mock recorder for MockNewsAdminInteractor.
type MockNewsAdminInteractorMockRecorder struct {
	mock *MockNewsAdminInteractor
}

// NewMockNewsAdminInteractor creates a new mock instance.
func NewMockNewsAdminInteractor(ctrl *gomock.Controller) *MockNewsAdminInteractor {
	mock := &MockNewsAdminInteractor{ctrl: ctrl}
	mock.recorder = &MockNewsAdminInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNewsAdminInteractor) EXPECT() *MockNewsAdminInteractorMockRecorder {
	return m.recorder
}

// ChangeStatus mocks base method.
func (m *MockNewsAdminInteractor) ChangeStatus(ctx context.Context, id uuid.UUID, status news1.NewsStatus) (*news1.News, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeStatus", ctx, id, status)
	ret0, _ := ret[0].(*news1.News)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeStatus indicates an expected call of ChangeStatus.
func (mr *MockNewsAdminInteractorMockRecorder) ChangeStatus(ctx, id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeStatus", reflect.TypeOf((*MockNewsAdminInteractor)(nil).ChangeStatus), ctx, id, status)
}

// Create mocks base method.
func (m *MockNewsAdminInteractor) Create(ctx context.Context, news *news0.NewNews) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, news)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockNewsAdminInteractorMockRecorder) Create(ctx, news any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNewsAdminInteractor)(nil).Create), ctx, news)
}

// Delete mocks base method.
func (m *MockNewsAdminInteractor) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockNewsAdminInteractorMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNewsAdminInteractor)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockNewsAdminInteractor) Get(ctx context.Context, id uuid.UUID) (*news1.NewsFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*news1.NewsFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockNewsAdminInteractorMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNewsAdminInteractor)(nil).Get), ctx, id)
}

// Search mocks base method.
func (m *MockNewsAdminInteractor) Search(ctx context.Context, search *news0.SearchNews) (*news0.SearchNewsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, search)
	ret0, _ := ret[0].(*news0.SearchNewsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockNewsAdminInteractorMockRecorder) Search(ctx, search any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockNewsAdminInteractor)(nil).Search), ctx, search)
}

// Update mocks base method.
func (m *MockNewsAdminInteractor) Update(ctx context.Context, id uuid.UUID, updateNews *news0.UpdateNews) (*news1.News, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, updateNews)
	ret0, _ := ret[0].(*news1.News)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockNewsAdminInteractorMockRecorder) Update(ctx, id, updateNews any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNewsAdminInteractor)(nil).Update), ctx, id, updateNews)
}

// UpdateFlags mocks base method.
func (m *MockNewsAdminInteractor) UpdateFlags(ctx context.Context, id uuid.UUID, updateNews *news0.UpdateFlags) (*news1.News, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlags", ctx, id, updateNews)
	ret0, _ := ret[0].(*news1.News)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFlags indicates an expected call of UpdateFlags.
func (mr *MockNewsAdminInteractorMockRecorder) UpdateFlags(ctx, id, updateNews any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlags", reflect.TypeOf((*MockNewsAdminInteractor)(nil).UpdateFlags), ctx, id, updateNews)
}

// MockNewsInteractor is a mock of NewsInteractor interface.
type MockNewsInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockNewsInteractorMockRecorder
	isgomock struct{}
}

// MockNewsInteractorMockRecorder is the mock recorder for MockNewsInteractor.
type MockNewsInteractorMockRecorder struct {
	mock *MockNewsInteractor
}

// NewMockNewsInteractor creates a new mock instance.
func NewMockNewsInteractor(ctrl *gomock.Controller) *MockNewsInteractor {
	mock := &MockNewsInteractor{ctrl: ctrl}
	mock.recorder = &MockNewsInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNewsInteractor) EXPECT() *MockNewsInteractorMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockNewsInteractor) Get(ctx context.Context, slug string) (*news1.NewsFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, slug)
	ret0, _ := ret[0].(*news1.NewsFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockNewsInteractorMockRecorder) Get(ctx, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNewsInteractor)(nil).Get), ctx, slug)
}

// Search mocks base method.
func (m *MockNewsInteractor) Search(ctx context.Context, search *news0.SearchNews) (*news0.SearchNewsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, search)
	ret0, _ := ret[0].(*news0.SearchNewsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockNewsInteractorMockRecorder) Search(ctx, search any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockNewsInteractor)(nil).Search), ctx, search)
}

// MockNewsAdminPresenter is a mock of NewsAdminPresenter interface.
type MockNewsAdminPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockNewsAdminPresenterMockRecorder
	isgomock struct{}
}

// MockNewsAdminPresenterMockRecorder is the mock recorder for MockNewsAdminPresenter.
type MockNewsAdminPresenterMockRecorder struct {
	mock *MockNewsAdminPresenter
}

// NewMockNewsAdminPresenter creates a new mock instance.
func NewMockNewsAdminPresenter(ctrl *gomock.Controller) *MockNewsAdminPresenter {
	mock := &MockNewsAdminPresenter{ctrl: ctrl}
	mock.recorder = &MockNewsAdminPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNewsAdminPresenter) EXPECT() *MockNewsAdminPresenterMockRecorder {
	return m.recorder
}

// AuthorToView mocks base method.
func (m *MockNewsAdminPresenter) AuthorToView(author news1.Author) news.Author {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorToView", author)
	ret0, _ := ret[0].(news.Author)
	return ret0
}

// AuthorToView indicates an expected call of AuthorToView.
func (mr *MockNewsAdminPresenterMockRecorder) AuthorToView(author any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorToView", reflect.TypeOf((*MockNewsAdminPresenter)(nil).AuthorToView), author)
}

// CategoryToResult mocks base method.
func (m *MockNewsAdminPresenter) CategoryToResult(c *news1.Category) *news.CategoryResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CategoryToResult", c)
	ret0, _ := ret[0].(*news.CategoryResult)
	return ret0
}

// CategoryToResult indicates an expected call of CategoryToResult.
func (mr *MockNewsAdminPresenterMockRecorder) CategoryToResult(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CategoryToResult", reflect.TypeOf((*MockNewsAdminPresenter)(nil).CategoryToResult), c)
}

// CategoryToView mocks base method.
func (m *MockNewsAdminPresenter) CategoryToView(c *news1.Category) *news.Category {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CategoryToView", c)
	ret0, _ := ret[0].(*news.Category)
	return ret0
}

// CategoryToView indicates an expected call of CategoryToView.
func (mr *MockNewsAdminPresenterMockRecorder) CategoryToView(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CategoryToView", reflect.TypeOf((*MockNewsAdminPresenter)(nil).CategoryToView), c)
}

// CommentsToView mocks base method.
func (m *MockNewsAdminPresenter) CommentsToView(list []*news1.NewsComment) []*news.NewsComment {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommentsToView", list)
	ret0, _ := ret[0].([]*news.NewsComment)
	return ret0
}

// CommentsToView indicates an expected call of CommentsToView.
func (mr *MockNewsAdminPresenterMockRecorder) CommentsToView(list any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommentsToView", reflect.TypeOf((*MockNewsAdminPresenter)(nil).CommentsToView), list)
}

// FullNewsToSearchItem mocks base method.
func (m *MockNewsAdminPresenter) FullNewsToSearchItem(n *news1.NewsFull) *news.SearchNewsResponseItem {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullNewsToSearchItem", n)
	ret0, _ := ret[0].(*news.SearchNewsResponseItem)
	return ret0
}

// FullNewsToSearchItem indicates an expected call of FullNewsToSearchItem.
func (mr *MockNewsAdminPresenterMockRecorder) FullNewsToSearchItem(n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullNewsToSearchItem", reflect.TypeOf((*MockNewsAdminPresenter)(nil).FullNewsToSearchItem), n)
}

// FullNewsToSearchItems mocks base method.
func (m *MockNewsAdminPresenter) FullNewsToSearchItems(n []*news1.NewsFull) []*news.SearchNewsResponseItem {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullNewsToSearchItems", n)
	ret0, _ := ret[0].([]*news.SearchNewsResponseItem)
	return ret0
}

// FullNewsToSearchItems indicates an expected call of FullNewsToSearchItems.
func (mr *MockNewsAdminPresenterMockRecorder) FullNewsToSearchItems(n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullNewsToSearchItems", reflect.TypeOf((*MockNewsAdminPresenter)(nil).FullNewsToSearchItems), n)
}

// FullNewsToView mocks base method.
func (m *MockNewsAdminPresenter) FullNewsToView(n *news1.NewsFull) *news.News {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullNewsToView", n)
	ret0, _ := ret[0].(*news.News)
	return ret0
}

// FullNewsToView indicates an expected call of FullNewsToView.
func (mr *MockNewsAdminPresenterMockRecorder) FullNewsToView(n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullNewsToView", reflect.TypeOf((*MockNewsAdminPresenter)(nil).FullNewsToView), n)
}

// NewCategoryToDTO mocks base method.
func (m *MockNewsAdminPresenter) NewCategoryToDTO(nc *news.NewCategory) *news0.NewCategory {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCategoryToDTO", nc)
	ret0, _ := ret[0].(*news0.NewCategory)
	return ret0
}

// NewCategoryToDTO indicates an expected call of NewCategoryToDTO.
func (mr *MockNewsAdminPresenterMockRecorder) NewCategoryToDTO(nc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCategoryToDTO", reflect.TypeOf((*MockNewsAdminPresenter)(nil).NewCategoryToDTO), nc)
}

// NewCommentToDTO mocks base method.
func (m *MockNewsAdminPresenter) NewCommentToDTO(newsID uuid.UUID, v *news.NewNewsComment) news0.NewComment {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCommentToDTO", newsID, v)
	ret0, _ := ret[0].(news0.NewComment)
	return ret0
}

// NewCommentToDTO indicates an expected call of NewCommentToDTO.
func (mr *MockNewsAdminPresenterMockRecorder) NewCommentToDTO(newsID, v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCommentToDTO", reflect.TypeOf((*MockNewsAdminPresenter)(nil).NewCommentToDTO), newsID, v)
}

// NewNewsToDTO mocks base method.
func (m *MockNewsAdminPresenter) NewNewsToDTO(news *news.NewNews) *news0.NewNews {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewNewsToDTO", news)
	ret0, _ := ret[0].(*news0.NewNews)
	return ret0
}

// NewNewsToDTO indicates an expected call of NewNewsToDTO.
func (mr *MockNewsAdminPresenterMockRecorder) NewNewsToDTO(news any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewNewsToDTO", reflect.TypeOf((*MockNewsAdminPresenter)(nil).NewNewsToDTO), news)
}

// NewsCategoryToView mocks base method.
func (m *MockNewsAdminPresenter) NewsCategoryToView(category *news1.Category) *news.NewsCategory {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewsCategoryToView", category)
	ret0, _ := ret[0].(*news.NewsCategory)
	return ret0
}

// NewsCategoryToView indicates an expected call of NewsCategoryToView.
func (mr *MockNewsAdminPresenterMockRecorder) NewsCategoryToView(category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewsCategoryToView", reflect.TypeOf((*MockNewsAdminPresenter)(nil).NewsCategoryToView), category)
}

// NewsOrganizationToView mocks base method.
func (m *MockNewsAdminPresenter) NewsOrganizationToView(organization *news1.NewsOrganization) *news.NewsOrganization {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewsOrganizationToView", organization)
	ret0, _ := ret[0].(*news.NewsOrganization)
	return ret0
}

// NewsOrganizationToView indicates an expected call of NewsOrganizationToView.
func (mr *MockNewsAdminPresenterMockRecorder) NewsOrganizationToView(organization any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewsOrganizationToView", reflect.TypeOf((*MockNewsAdminPresenter)(nil).NewsOrganizationToView), organization)
}

// NewsProductToView mocks base method.
func (m *MockNewsAdminPresenter) NewsProductToView(product *news1.NewsProduct) *news.NewsProduct {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewsProductToView", product)
	ret0, _ := ret[0].(*news.NewsProduct)
	return ret0
}

// NewsProductToView indicates an expected call of NewsProductToView.
func (mr *MockNewsAdminPresenterMockRecorder) NewsProductToView(product any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewsProductToView", reflect.TypeOf((*MockNewsAdminPresenter)(nil).NewsProductToView), product)
}

// ParticipantToView mocks base method.
func (m *MockNewsAdminPresenter) ParticipantToView(participant *news1.Participant) *news.NewsParticipants {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParticipantToView", participant)
	ret0, _ := ret[0].(*news.NewsParticipants)
	return ret0
}

// ParticipantToView indicates an expected call of ParticipantToView.
func (mr *MockNewsAdminPresenterMockRecorder) ParticipantToView(participant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParticipantToView", reflect.TypeOf((*MockNewsAdminPresenter)(nil).ParticipantToView), participant)
}

// ParticipantsToView mocks base method.
func (m *MockNewsAdminPresenter) ParticipantsToView(participants []*news1.Participant) []*news.NewsParticipants {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParticipantsToView", participants)
	ret0, _ := ret[0].([]*news.NewsParticipants)
	return ret0
}

// ParticipantsToView indicates an expected call of ParticipantsToView.
func (mr *MockNewsAdminPresenterMockRecorder) ParticipantsToView(participants any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParticipantsToView", reflect.TypeOf((*MockNewsAdminPresenter)(nil).ParticipantsToView), participants)
}

// SearchNewsToDTO mocks base method.
func (m *MockNewsAdminPresenter) SearchNewsToDTO(search *news.SearchNewsRequest) *news0.SearchNews {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchNewsToDTO", search)
	ret0, _ := ret[0].(*news0.SearchNews)
	return ret0
}

// SearchNewsToDTO indicates an expected call of SearchNewsToDTO.
func (mr *MockNewsAdminPresenterMockRecorder) SearchNewsToDTO(search any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchNewsToDTO", reflect.TypeOf((*MockNewsAdminPresenter)(nil).SearchNewsToDTO), search)
}

// StatusToEntity mocks base method.
func (m *MockNewsAdminPresenter) StatusToEntity(status news.NewsStatus) news1.NewsStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusToEntity", status)
	ret0, _ := ret[0].(news1.NewsStatus)
	return ret0
}

// StatusToEntity indicates an expected call of StatusToEntity.
func (mr *MockNewsAdminPresenterMockRecorder) StatusToEntity(status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusToEntity", reflect.TypeOf((*MockNewsAdminPresenter)(nil).StatusToEntity), status)
}

// StatusToView mocks base method.
func (m *MockNewsAdminPresenter) StatusToView(status news1.NewsStatus) news.NewsStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusToView", status)
	ret0, _ := ret[0].(news.NewsStatus)
	return ret0
}

// StatusToView indicates an expected call of StatusToView.
func (mr *MockNewsAdminPresenterMockRecorder) StatusToView(status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusToView", reflect.TypeOf((*MockNewsAdminPresenter)(nil).StatusToView), status)
}

// UpdateCategoryToDTO mocks base method.
func (m *MockNewsAdminPresenter) UpdateCategoryToDTO(c *news.UpdateCategory) *news0.UpdateCategory {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategoryToDTO", c)
	ret0, _ := ret[0].(*news0.UpdateCategory)
	return ret0
}

// UpdateCategoryToDTO indicates an expected call of UpdateCategoryToDTO.
func (mr *MockNewsAdminPresenterMockRecorder) UpdateCategoryToDTO(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategoryToDTO", reflect.TypeOf((*MockNewsAdminPresenter)(nil).UpdateCategoryToDTO), c)
}

// UpdateFlagsToDTO mocks base method.
func (m *MockNewsAdminPresenter) UpdateFlagsToDTO(n *news.UpdateNewsFlags) *news0.UpdateFlags {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlagsToDTO", n)
	ret0, _ := ret[0].(*news0.UpdateFlags)
	return ret0
}

// UpdateFlagsToDTO indicates an expected call of UpdateFlagsToDTO.
func (mr *MockNewsAdminPresenterMockRecorder) UpdateFlagsToDTO(n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlagsToDTO", reflect.TypeOf((*MockNewsAdminPresenter)(nil).UpdateFlagsToDTO), n)
}

// UpdateNewsToDTO mocks base method.
func (m *MockNewsAdminPresenter) UpdateNewsToDTO(updateNews *news.UpdateNews) *news0.UpdateNews {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNewsToDTO", updateNews)
	ret0, _ := ret[0].(*news0.UpdateNews)
	return ret0
}

// UpdateNewsToDTO indicates an expected call of UpdateNewsToDTO.
func (mr *MockNewsAdminPresenterMockRecorder) UpdateNewsToDTO(updateNews any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNewsToDTO", reflect.TypeOf((*MockNewsAdminPresenter)(nil).UpdateNewsToDTO), updateNews)
}

// MockNewsCategoryPresenter is a mock of NewsCategoryPresenter interface.
type MockNewsCategoryPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockNewsCategoryPresenterMockRecorder
	isgomock struct{}
}

// MockNewsCategoryPresenterMockRecorder is the mock recorder for MockNewsCategoryPresenter.
type MockNewsCategoryPresenterMockRecorder struct {
	mock *MockNewsCategoryPresenter
}

// NewMockNewsCategoryPresenter creates a new mock instance.
func NewMockNewsCategoryPresenter(ctrl *gomock.Controller) *MockNewsCategoryPresenter {
	mock := &MockNewsCategoryPresenter{ctrl: ctrl}
	mock.recorder = &MockNewsCategoryPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNewsCategoryPresenter) EXPECT() *MockNewsCategoryPresenterMockRecorder {
	return m.recorder
}

// CategoryToResult mocks base method.
func (m *MockNewsCategoryPresenter) CategoryToResult(c *news1.Category) *news.CategoryResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CategoryToResult", c)
	ret0, _ := ret[0].(*news.CategoryResult)
	return ret0
}

// CategoryToResult indicates an expected call of CategoryToResult.
func (mr *MockNewsCategoryPresenterMockRecorder) CategoryToResult(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CategoryToResult", reflect.TypeOf((*MockNewsCategoryPresenter)(nil).CategoryToResult), c)
}

// CategoryToView mocks base method.
func (m *MockNewsCategoryPresenter) CategoryToView(c *news1.Category) *news.Category {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CategoryToView", c)
	ret0, _ := ret[0].(*news.Category)
	return ret0
}

// CategoryToView indicates an expected call of CategoryToView.
func (mr *MockNewsCategoryPresenterMockRecorder) CategoryToView(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CategoryToView", reflect.TypeOf((*MockNewsCategoryPresenter)(nil).CategoryToView), c)
}

// NewCategoryToDTO mocks base method.
func (m *MockNewsCategoryPresenter) NewCategoryToDTO(nc *news.NewCategory) *news0.NewCategory {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCategoryToDTO", nc)
	ret0, _ := ret[0].(*news0.NewCategory)
	return ret0
}

// NewCategoryToDTO indicates an expected call of NewCategoryToDTO.
func (mr *MockNewsCategoryPresenterMockRecorder) NewCategoryToDTO(nc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCategoryToDTO", reflect.TypeOf((*MockNewsCategoryPresenter)(nil).NewCategoryToDTO), nc)
}

// UpdateCategoryToDTO mocks base method.
func (m *MockNewsCategoryPresenter) UpdateCategoryToDTO(c *news.UpdateCategory) *news0.UpdateCategory {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategoryToDTO", c)
	ret0, _ := ret[0].(*news0.UpdateCategory)
	return ret0
}

// UpdateCategoryToDTO indicates an expected call of UpdateCategoryToDTO.
func (mr *MockNewsCategoryPresenterMockRecorder) UpdateCategoryToDTO(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategoryToDTO", reflect.TypeOf((*MockNewsCategoryPresenter)(nil).UpdateCategoryToDTO), c)
}

// MockNewsCommentsPresenter is a mock of NewsCommentsPresenter interface.
type MockNewsCommentsPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockNewsCommentsPresenterMockRecorder
	isgomock struct{}
}

// MockNewsCommentsPresenterMockRecorder is the mock recorder for MockNewsCommentsPresenter.
type MockNewsCommentsPresenterMockRecorder struct {
	mock *MockNewsCommentsPresenter
}

// NewMockNewsCommentsPresenter creates a new mock instance.
func NewMockNewsCommentsPresenter(ctrl *gomock.Controller) *MockNewsCommentsPresenter {
	mock := &MockNewsCommentsPresenter{ctrl: ctrl}
	mock.recorder = &MockNewsCommentsPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNewsCommentsPresenter) EXPECT() *MockNewsCommentsPresenterMockRecorder {
	return m.recorder
}

// CommentsToView mocks base method.
func (m *MockNewsCommentsPresenter) CommentsToView(list []*news1.NewsComment) []*news.NewsComment {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommentsToView", list)
	ret0, _ := ret[0].([]*news.NewsComment)
	return ret0
}

// CommentsToView indicates an expected call of CommentsToView.
func (mr *MockNewsCommentsPresenterMockRecorder) CommentsToView(list any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommentsToView", reflect.TypeOf((*MockNewsCommentsPresenter)(nil).CommentsToView), list)
}

// NewCommentToDTO mocks base method.
func (m *MockNewsCommentsPresenter) NewCommentToDTO(newsID uuid.UUID, v *news.NewNewsComment) news0.NewComment {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCommentToDTO", newsID, v)
	ret0, _ := ret[0].(news0.NewComment)
	return ret0
}

// NewCommentToDTO indicates an expected call of NewCommentToDTO.
func (mr *MockNewsCommentsPresenterMockRecorder) NewCommentToDTO(newsID, v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCommentToDTO", reflect.TypeOf((*MockNewsCommentsPresenter)(nil).NewCommentToDTO), newsID, v)
}

// MockNewsAdminHandlers is a mock of NewsAdminHandlers interface.
type MockNewsAdminHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockNewsAdminHandlersMockRecorder
	isgomock struct{}
}

// MockNewsAdminHandlersMockRecorder is the mock recorder for MockNewsAdminHandlers.
type MockNewsAdminHandlersMockRecorder struct {
	mock *MockNewsAdminHandlers
}

// NewMockNewsAdminHandlers creates a new mock instance.
func NewMockNewsAdminHandlers(ctrl *gomock.Controller) *MockNewsAdminHandlers {
	mock := &MockNewsAdminHandlers{ctrl: ctrl}
	mock.recorder = &MockNewsAdminHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNewsAdminHandlers) EXPECT() *MockNewsAdminHandlersMockRecorder {
	return m.recorder
}

// createCategory mocks base method.
func (m *MockNewsAdminHandlers) createCategory(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "createCategory", c)
}

// createCategory indicates an expected call of createCategory.
func (mr *MockNewsAdminHandlersMockRecorder) createCategory(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createCategory", reflect.TypeOf((*MockNewsAdminHandlers)(nil).createCategory), c)
}

// createNews mocks base method.
func (m *MockNewsAdminHandlers) createNews(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "createNews", c)
}

// createNews indicates an expected call of createNews.
func (mr *MockNewsAdminHandlersMockRecorder) createNews(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createNews", reflect.TypeOf((*MockNewsAdminHandlers)(nil).createNews), c)
}

// deleteCategory mocks base method.
func (m *MockNewsAdminHandlers) deleteCategory(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "deleteCategory", c)
}

// deleteCategory indicates an expected call of deleteCategory.
func (mr *MockNewsAdminHandlersMockRecorder) deleteCategory(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteCategory", reflect.TypeOf((*MockNewsAdminHandlers)(nil).deleteCategory), c)
}

// deleteNews mocks base method.
func (m *MockNewsAdminHandlers) deleteNews(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "deleteNews", c)
}

// deleteNews indicates an expected call of deleteNews.
func (mr *MockNewsAdminHandlersMockRecorder) deleteNews(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteNews", reflect.TypeOf((*MockNewsAdminHandlers)(nil).deleteNews), c)
}

// getCategory mocks base method.
func (m *MockNewsAdminHandlers) getCategory(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getCategory", c)
}

// getCategory indicates an expected call of getCategory.
func (mr *MockNewsAdminHandlersMockRecorder) getCategory(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getCategory", reflect.TypeOf((*MockNewsAdminHandlers)(nil).getCategory), c)
}

// getNews mocks base method.
func (m *MockNewsAdminHandlers) getNews(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getNews", c)
}

// getNews indicates an expected call of getNews.
func (mr *MockNewsAdminHandlersMockRecorder) getNews(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getNews", reflect.TypeOf((*MockNewsAdminHandlers)(nil).getNews), c)
}

// searchCategory mocks base method.
func (m *MockNewsAdminHandlers) searchCategory(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "searchCategory", c)
}

// searchCategory indicates an expected call of searchCategory.
func (mr *MockNewsAdminHandlersMockRecorder) searchCategory(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "searchCategory", reflect.TypeOf((*MockNewsAdminHandlers)(nil).searchCategory), c)
}

// searchNews mocks base method.
func (m *MockNewsAdminHandlers) searchNews(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "searchNews", c)
}

// searchNews indicates an expected call of searchNews.
func (mr *MockNewsAdminHandlersMockRecorder) searchNews(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "searchNews", reflect.TypeOf((*MockNewsAdminHandlers)(nil).searchNews), c)
}

// setFlagsNews mocks base method.
func (m *MockNewsAdminHandlers) setFlagsNews(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setFlagsNews", c)
}

// setFlagsNews indicates an expected call of setFlagsNews.
func (mr *MockNewsAdminHandlersMockRecorder) setFlagsNews(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setFlagsNews", reflect.TypeOf((*MockNewsAdminHandlers)(nil).setFlagsNews), c)
}

// setStatusNews mocks base method.
func (m *MockNewsAdminHandlers) setStatusNews(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setStatusNews", c)
}

// setStatusNews indicates an expected call of setStatusNews.
func (mr *MockNewsAdminHandlersMockRecorder) setStatusNews(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setStatusNews", reflect.TypeOf((*MockNewsAdminHandlers)(nil).setStatusNews), c)
}

// updateCategory mocks base method.
func (m *MockNewsAdminHandlers) updateCategory(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "updateCategory", c)
}

// updateCategory indicates an expected call of updateCategory.
func (mr *MockNewsAdminHandlersMockRecorder) updateCategory(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateCategory", reflect.TypeOf((*MockNewsAdminHandlers)(nil).updateCategory), c)
}

// updateNews mocks base method.
func (m *MockNewsAdminHandlers) updateNews(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "updateNews", c)
}

// updateNews indicates an expected call of updateNews.
func (mr *MockNewsAdminHandlersMockRecorder) updateNews(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateNews", reflect.TypeOf((*MockNewsAdminHandlers)(nil).updateNews), c)
}

// MockNewsHandlers is a mock of NewsHandlers interface.
type MockNewsHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockNewsHandlersMockRecorder
	isgomock struct{}
}

// MockNewsHandlersMockRecorder is the mock recorder for MockNewsHandlers.
type MockNewsHandlersMockRecorder struct {
	mock *MockNewsHandlers
}

// NewMockNewsHandlers creates a new mock instance.
func NewMockNewsHandlers(ctrl *gomock.Controller) *MockNewsHandlers {
	mock := &MockNewsHandlers{ctrl: ctrl}
	mock.recorder = &MockNewsHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNewsHandlers) EXPECT() *MockNewsHandlersMockRecorder {
	return m.recorder
}

// createComment mocks base method.
func (m *MockNewsHandlers) createComment(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "createComment", c)
}

// createComment indicates an expected call of createComment.
func (mr *MockNewsHandlersMockRecorder) createComment(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createComment", reflect.TypeOf((*MockNewsHandlers)(nil).createComment), c)
}

// getNews mocks base method.
func (m *MockNewsHandlers) getNews(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getNews", c)
}

// getNews indicates an expected call of getNews.
func (mr *MockNewsHandlersMockRecorder) getNews(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getNews", reflect.TypeOf((*MockNewsHandlers)(nil).getNews), c)
}

// listComments mocks base method.
func (m *MockNewsHandlers) listComments(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "listComments", c)
}

// listComments indicates an expected call of listComments.
func (mr *MockNewsHandlersMockRecorder) listComments(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "listComments", reflect.TypeOf((*MockNewsHandlers)(nil).listComments), c)
}

// searchNews mocks base method.
func (m *MockNewsHandlers) searchNews(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "searchNews", c)
}

// searchNews indicates an expected call of searchNews.
func (mr *MockNewsHandlersMockRecorder) searchNews(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "searchNews", reflect.TypeOf((*MockNewsHandlers)(nil).searchNews), c)
}

// MockBannersHandlers is a mock of BannersHandlers interface.
type MockBannersHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockBannersHandlersMockRecorder
	isgomock struct{}
}

// MockBannersHandlersMockRecorder is the mock recorder for MockBannersHandlers.
type MockBannersHandlersMockRecorder struct {
	mock *MockBannersHandlers
}

// NewMockBannersHandlers creates a new mock instance.
func NewMockBannersHandlers(ctrl *gomock.Controller) *MockBannersHandlers {
	mock := &MockBannersHandlers{ctrl: ctrl}
	mock.recorder = &MockBannersHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBannersHandlers) EXPECT() *MockBannersHandlersMockRecorder {
	return m.recorder
}

// list mocks base method.
func (m *MockBannersHandlers) list(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "list", c)
}

// list indicates an expected call of list.
func (mr *MockBannersHandlersMockRecorder) list(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "list", reflect.TypeOf((*MockBannersHandlers)(nil).list), c)
}

// set mocks base method.
func (m *MockBannersHandlers) set(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "set", c)
}

// set indicates an expected call of set.
func (mr *MockBannersHandlersMockRecorder) set(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "set", reflect.TypeOf((*MockBannersHandlers)(nil).set), c)
}

// MockBannersPresenter is a mock of BannersPresenter interface.
type MockBannersPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockBannersPresenterMockRecorder
	isgomock struct{}
}

// MockBannersPresenterMockRecorder is the mock recorder for MockBannersPresenter.
type MockBannersPresenterMockRecorder struct {
	mock *MockBannersPresenter
}

// NewMockBannersPresenter creates a new mock instance.
func NewMockBannersPresenter(ctrl *gomock.Controller) *MockBannersPresenter {
	mock := &MockBannersPresenter{ctrl: ctrl}
	mock.recorder = &MockBannersPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBannersPresenter) EXPECT() *MockBannersPresenterMockRecorder {
	return m.recorder
}

// BannerInfoToView mocks base method.
func (m *MockBannersPresenter) BannerInfoToView(banner *entityBanners.BannerInfo) *viewBanners.BannerInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BannerInfoToView", banner)
	ret0, _ := ret[0].(*viewBanners.BannerInfo)
	return ret0
}

// BannerInfoToView indicates an expected call of BannerInfoToView.
func (mr *MockBannersPresenterMockRecorder) BannerInfoToView(banner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BannerInfoToView", reflect.TypeOf((*MockBannersPresenter)(nil).BannerInfoToView), banner)
}

// BannerInfosToViews mocks base method.
func (m *MockBannersPresenter) BannerInfosToViews(banners []*entityBanners.BannerInfo) []*viewBanners.BannerInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BannerInfosToViews", banners)
	ret0, _ := ret[0].([]*viewBanners.BannerInfo)
	return ret0
}

// BannerInfosToViews indicates an expected call of BannerInfosToViews.
func (mr *MockBannersPresenterMockRecorder) BannerInfosToViews(banners any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BannerInfosToViews", reflect.TypeOf((*MockBannersPresenter)(nil).BannerInfosToViews), banners)
}

// BannerToView mocks base method.
func (m *MockBannersPresenter) BannerToView(banner *entityBanners.Banner) *viewBanners.Banner {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BannerToView", banner)
	ret0, _ := ret[0].(*viewBanners.Banner)
	return ret0
}

// BannerToView indicates an expected call of BannerToView.
func (mr *MockBannersPresenterMockRecorder) BannerToView(banner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BannerToView", reflect.TypeOf((*MockBannersPresenter)(nil).BannerToView), banner)
}

// BannerTypeToEntity mocks base method.
func (m *MockBannersPresenter) BannerTypeToEntity(t viewBanners.BannerType) entityBanners.BannerType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BannerTypeToEntity", t)
	ret0, _ := ret[0].(entityBanners.BannerType)
	return ret0
}

// BannerTypeToEntity indicates an expected call of BannerTypeToEntity.
func (mr *MockBannersPresenterMockRecorder) BannerTypeToEntity(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BannerTypeToEntity", reflect.TypeOf((*MockBannersPresenter)(nil).BannerTypeToEntity), t)
}

// BannerTypeToView mocks base method.
func (m *MockBannersPresenter) BannerTypeToView(t entityBanners.BannerType) viewBanners.BannerType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BannerTypeToView", t)
	ret0, _ := ret[0].(viewBanners.BannerType)
	return ret0
}

// BannerTypeToView indicates an expected call of BannerTypeToView.
func (mr *MockBannersPresenterMockRecorder) BannerTypeToView(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BannerTypeToView", reflect.TypeOf((*MockBannersPresenter)(nil).BannerTypeToView), t)
}

// BannersToViews mocks base method.
func (m *MockBannersPresenter) BannersToViews(banner []*entityBanners.Banner) []*viewBanners.Banner {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BannersToViews", banner)
	ret0, _ := ret[0].([]*viewBanners.Banner)
	return ret0
}

// BannersToViews indicates an expected call of BannersToViews.
func (mr *MockBannersPresenterMockRecorder) BannersToViews(banner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BannersToViews", reflect.TypeOf((*MockBannersPresenter)(nil).BannersToViews), banner)
}

// ContentToView mocks base method.
func (m *MockBannersPresenter) ContentToView(content entityBanners.Content) viewBanners.Content {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContentToView", content)
	ret0, _ := ret[0].(viewBanners.Content)
	return ret0
}

// ContentToView indicates an expected call of ContentToView.
func (mr *MockBannersPresenterMockRecorder) ContentToView(content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContentToView", reflect.TypeOf((*MockBannersPresenter)(nil).ContentToView), content)
}

// SetBannerToDTO mocks base method.
func (m *MockBannersPresenter) SetBannerToDTO(view *viewBanners.SetBanner) *dtoBanners.SetBanner {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBannerToDTO", view)
	ret0, _ := ret[0].(*dtoBanners.SetBanner)
	return ret0
}

// SetBannerToDTO indicates an expected call of SetBannerToDTO.
func (mr *MockBannersPresenterMockRecorder) SetBannerToDTO(view any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBannerToDTO", reflect.TypeOf((*MockBannersPresenter)(nil).SetBannerToDTO), view)
}

// SetBannersToDTOs mocks base method.
func (m *MockBannersPresenter) SetBannersToDTOs(view *viewBanners.SetBanners) []*dtoBanners.SetBanner {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBannersToDTOs", view)
	ret0, _ := ret[0].([]*dtoBanners.SetBanner)
	return ret0
}

// SetBannersToDTOs indicates an expected call of SetBannersToDTOs.
func (mr *MockBannersPresenterMockRecorder) SetBannersToDTOs(view any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBannersToDTOs", reflect.TypeOf((*MockBannersPresenter)(nil).SetBannersToDTOs), view)
}

// MockBannersInteractor is a mock of BannersInteractor interface.
type MockBannersInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockBannersInteractorMockRecorder
	isgomock struct{}
}

// MockBannersInteractorMockRecorder is the mock recorder for MockBannersInteractor.
type MockBannersInteractorMockRecorder struct {
	mock *MockBannersInteractor
}

// NewMockBannersInteractor creates a new mock instance.
func NewMockBannersInteractor(ctrl *gomock.Controller) *MockBannersInteractor {
	mock := &MockBannersInteractor{ctrl: ctrl}
	mock.recorder = &MockBannersInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBannersInteractor) EXPECT() *MockBannersInteractorMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockBannersInteractor) List(ctx context.Context) ([]*entityBanners.Banner, []*entityBanners.Banner, []*entityBanners.Banner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]*entityBanners.Banner)
	ret1, _ := ret[1].([]*entityBanners.Banner)
	ret2, _ := ret[2].([]*entityBanners.Banner)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// List indicates an expected call of List.
func (mr *MockBannersInteractorMockRecorder) List(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockBannersInteractor)(nil).List), ctx)
}

// Set mocks base method.
func (m *MockBannersInteractor) Set(ctx context.Context, banners []*dtoBanners.SetBanner) ([]*entityBanners.BannerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, banners)
	ret0, _ := ret[0].([]*entityBanners.BannerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set.
func (mr *MockBannersInteractorMockRecorder) Set(ctx, banners any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockBannersInteractor)(nil).Set), ctx, banners)
}
