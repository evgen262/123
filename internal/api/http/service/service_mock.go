// Code generated by MockGen. DO NOT EDIT.
// Source: server.go
//
// Generated by this command:
//
//	mockgen -source=server.go -destination=./service_mock.go -package=service
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHTTPSrv is a mock of HTTPSrv interface.
type MockHTTPSrv struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPSrvMockRecorder
	isgomock struct{}
}

// MockHTTPSrvMockRecorder is the mock recorder for MockHTTPSrv.
type MockHTTPSrvMockRecorder struct {
	mock *MockHTTPSrv
}

// NewMockHTTPSrv creates a new mock instance.
func NewMockHTTPSrv(ctrl *gomock.Controller) *MockHTTPSrv {
	mock := &MockHTTPSrv{ctrl: ctrl}
	mock.recorder = &MockHTTPSrvMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPSrv) EXPECT() *MockHTTPSrvMockRecorder {
	return m.recorder
}

// ListenAndServe mocks base method.
func (m *MockHTTPSrv) ListenAndServe(addr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenAndServe", addr)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListenAndServe indicates an expected call of ListenAndServe.
func (mr *MockHTTPSrvMockRecorder) ListenAndServe(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenAndServe", reflect.TypeOf((*MockHTTPSrv)(nil).ListenAndServe), addr)
}

// Shutdown mocks base method.
func (m *MockHTTPSrv) Shutdown() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockHTTPSrvMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockHTTPSrv)(nil).Shutdown))
}

// ShutdownWithContext mocks base method.
func (m *MockHTTPSrv) ShutdownWithContext(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShutdownWithContext", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShutdownWithContext indicates an expected call of ShutdownWithContext.
func (mr *MockHTTPSrvMockRecorder) ShutdownWithContext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShutdownWithContext", reflect.TypeOf((*MockHTTPSrv)(nil).ShutdownWithContext), ctx)
}
