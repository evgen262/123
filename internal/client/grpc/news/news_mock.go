// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=./news_mock.go -package=news
//

// Package news is a generated GoMock package.
package news

import (
	reflect "reflect"
	time "time"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// MockSharedMapper is a mock of SharedMapper interface.
type MockSharedMapper struct {
	ctrl     *gomock.Controller
	recorder *MockSharedMapperMockRecorder
	isgomock struct{}
}

// MockSharedMapperMockRecorder is the mock recorder for MockSharedMapper.
type MockSharedMapperMockRecorder struct {
	mock *MockSharedMapper
}

// NewMockSharedMapper creates a new mock instance.
func NewMockSharedMapper(ctrl *gomock.Controller) *MockSharedMapper {
	mock := &MockSharedMapper{ctrl: ctrl}
	mock.recorder = &MockSharedMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSharedMapper) EXPECT() *MockSharedMapperMockRecorder {
	return m.recorder
}

// BoolValue mocks base method.
func (m *MockSharedMapper) BoolValue(b *bool) *wrapperspb.BoolValue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BoolValue", b)
	ret0, _ := ret[0].(*wrapperspb.BoolValue)
	return ret0
}

// BoolValue indicates an expected call of BoolValue.
func (mr *MockSharedMapperMockRecorder) BoolValue(b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BoolValue", reflect.TypeOf((*MockSharedMapper)(nil).BoolValue), b)
}

// BytesValue mocks base method.
func (m *MockSharedMapper) BytesValue(b []byte) *wrapperspb.BytesValue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BytesValue", b)
	ret0, _ := ret[0].(*wrapperspb.BytesValue)
	return ret0
}

// BytesValue indicates an expected call of BytesValue.
func (mr *MockSharedMapperMockRecorder) BytesValue(b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BytesValue", reflect.TypeOf((*MockSharedMapper)(nil).BytesValue), b)
}

// Int32SliceToInt mocks base method.
func (m *MockSharedMapper) Int32SliceToInt(v []int32) []int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Int32SliceToInt", v)
	ret0, _ := ret[0].([]int)
	return ret0
}

// Int32SliceToInt indicates an expected call of Int32SliceToInt.
func (mr *MockSharedMapperMockRecorder) Int32SliceToInt(v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Int32SliceToInt", reflect.TypeOf((*MockSharedMapper)(nil).Int32SliceToInt), v)
}

// Int32Value mocks base method.
func (m *MockSharedMapper) Int32Value(i *int) *wrapperspb.Int32Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Int32Value", i)
	ret0, _ := ret[0].(*wrapperspb.Int32Value)
	return ret0
}

// Int32Value indicates an expected call of Int32Value.
func (mr *MockSharedMapperMockRecorder) Int32Value(i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Int32Value", reflect.TypeOf((*MockSharedMapper)(nil).Int32Value), i)
}

// Int64Value mocks base method.
func (m *MockSharedMapper) Int64Value(i *int64) *wrapperspb.Int64Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Int64Value", i)
	ret0, _ := ret[0].(*wrapperspb.Int64Value)
	return ret0
}

// Int64Value indicates an expected call of Int64Value.
func (mr *MockSharedMapperMockRecorder) Int64Value(i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Int64Value", reflect.TypeOf((*MockSharedMapper)(nil).Int64Value), i)
}

// IntSliceToInt32 mocks base method.
func (m *MockSharedMapper) IntSliceToInt32(v []int) []int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntSliceToInt32", v)
	ret0, _ := ret[0].([]int32)
	return ret0
}

// IntSliceToInt32 indicates an expected call of IntSliceToInt32.
func (mr *MockSharedMapperMockRecorder) IntSliceToInt32(v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntSliceToInt32", reflect.TypeOf((*MockSharedMapper)(nil).IntSliceToInt32), v)
}

// StringSliceToPtrUUID mocks base method.
func (m *MockSharedMapper) StringSliceToPtrUUID(v []string, skipZero bool) []*uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StringSliceToPtrUUID", v, skipZero)
	ret0, _ := ret[0].([]*uuid.UUID)
	return ret0
}

// StringSliceToPtrUUID indicates an expected call of StringSliceToPtrUUID.
func (mr *MockSharedMapperMockRecorder) StringSliceToPtrUUID(v, skipZero any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StringSliceToPtrUUID", reflect.TypeOf((*MockSharedMapper)(nil).StringSliceToPtrUUID), v, skipZero)
}

// StringSliceToUUID mocks base method.
func (m *MockSharedMapper) StringSliceToUUID(v []string, skipZero bool) []uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StringSliceToUUID", v, skipZero)
	ret0, _ := ret[0].([]uuid.UUID)
	return ret0
}

// StringSliceToUUID indicates an expected call of StringSliceToUUID.
func (mr *MockSharedMapperMockRecorder) StringSliceToUUID(v, skipZero any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StringSliceToUUID", reflect.TypeOf((*MockSharedMapper)(nil).StringSliceToUUID), v, skipZero)
}

// StringToStringPtr mocks base method.
func (m *MockSharedMapper) StringToStringPtr(v string, skipZero bool) *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StringToStringPtr", v, skipZero)
	ret0, _ := ret[0].(*string)
	return ret0
}

// StringToStringPtr indicates an expected call of StringToStringPtr.
func (mr *MockSharedMapperMockRecorder) StringToStringPtr(v, skipZero any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StringToStringPtr", reflect.TypeOf((*MockSharedMapper)(nil).StringToStringPtr), v, skipZero)
}

// StringToUUIDPtr mocks base method.
func (m *MockSharedMapper) StringToUUIDPtr(v string, skipZero bool) *uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StringToUUIDPtr", v, skipZero)
	ret0, _ := ret[0].(*uuid.UUID)
	return ret0
}

// StringToUUIDPtr indicates an expected call of StringToUUIDPtr.
func (mr *MockSharedMapperMockRecorder) StringToUUIDPtr(v, skipZero any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StringToUUIDPtr", reflect.TypeOf((*MockSharedMapper)(nil).StringToUUIDPtr), v, skipZero)
}

// StringValue mocks base method.
func (m *MockSharedMapper) StringValue(s *string) *wrapperspb.StringValue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StringValue", s)
	ret0, _ := ret[0].(*wrapperspb.StringValue)
	return ret0
}

// StringValue indicates an expected call of StringValue.
func (mr *MockSharedMapperMockRecorder) StringValue(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StringValue", reflect.TypeOf((*MockSharedMapper)(nil).StringValue), s)
}

// StringValueToStringPtr mocks base method.
func (m *MockSharedMapper) StringValueToStringPtr(v *wrapperspb.StringValue) *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StringValueToStringPtr", v)
	ret0, _ := ret[0].(*string)
	return ret0
}

// StringValueToStringPtr indicates an expected call of StringValueToStringPtr.
func (mr *MockSharedMapperMockRecorder) StringValueToStringPtr(v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StringValueToStringPtr", reflect.TypeOf((*MockSharedMapper)(nil).StringValueToStringPtr), v)
}

// StringValueToUUIDPtr mocks base method.
func (m *MockSharedMapper) StringValueToUUIDPtr(v *wrapperspb.StringValue, skipZero bool) *uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StringValueToUUIDPtr", v, skipZero)
	ret0, _ := ret[0].(*uuid.UUID)
	return ret0
}

// StringValueToUUIDPtr indicates an expected call of StringValueToUUIDPtr.
func (mr *MockSharedMapperMockRecorder) StringValueToUUIDPtr(v, skipZero any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StringValueToUUIDPtr", reflect.TypeOf((*MockSharedMapper)(nil).StringValueToUUIDPtr), v, skipZero)
}

// TimeToTimestamp mocks base method.
func (m *MockSharedMapper) TimeToTimestamp(t *time.Time) *timestamppb.Timestamp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TimeToTimestamp", t)
	ret0, _ := ret[0].(*timestamppb.Timestamp)
	return ret0
}

// TimeToTimestamp indicates an expected call of TimeToTimestamp.
func (mr *MockSharedMapperMockRecorder) TimeToTimestamp(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimeToTimestamp", reflect.TypeOf((*MockSharedMapper)(nil).TimeToTimestamp), t)
}

// TimestampToTime mocks base method.
func (m *MockSharedMapper) TimestampToTime(t *timestamppb.Timestamp) *time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TimestampToTime", t)
	ret0, _ := ret[0].(*time.Time)
	return ret0
}

// TimestampToTime indicates an expected call of TimestampToTime.
func (mr *MockSharedMapperMockRecorder) TimestampToTime(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimestampToTime", reflect.TypeOf((*MockSharedMapper)(nil).TimestampToTime), t)
}

// UUIDStringValue mocks base method.
func (m *MockSharedMapper) UUIDStringValue(u *uuid.UUID) *wrapperspb.StringValue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UUIDStringValue", u)
	ret0, _ := ret[0].(*wrapperspb.StringValue)
	return ret0
}

// UUIDStringValue indicates an expected call of UUIDStringValue.
func (mr *MockSharedMapperMockRecorder) UUIDStringValue(u any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UUIDStringValue", reflect.TypeOf((*MockSharedMapper)(nil).UUIDStringValue), u)
}
