// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=./oauth2_mock.go -package=sudir
//

// Package sudir is a generated GoMock package.
package sudir

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	oauth2 "golang.org/x/oauth2"
)

// MockOAuth2 is a mock of OAuth2 interface.
type MockOAuth2 struct {
	ctrl     *gomock.Controller
	recorder *MockOAuth2MockRecorder
	isgomock struct{}
}

// MockOAuth2MockRecorder is the mock recorder for MockOAuth2.
type MockOAuth2MockRecorder struct {
	mock *MockOAuth2
}

// NewMockOAuth2 creates a new mock instance.
func NewMockOAuth2(ctrl *gomock.Controller) *MockOAuth2 {
	mock := &MockOAuth2{ctrl: ctrl}
	mock.recorder = &MockOAuth2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOAuth2) EXPECT() *MockOAuth2MockRecorder {
	return m.recorder
}

// AuthCodeURL mocks base method.
func (m *MockOAuth2) AuthCodeURL(state string, opts ...oauth2.AuthCodeOption) string {
	m.ctrl.T.Helper()
	varargs := []any{state}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthCodeURL", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// AuthCodeURL indicates an expected call of AuthCodeURL.
func (mr *MockOAuth2MockRecorder) AuthCodeURL(state any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{state}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthCodeURL", reflect.TypeOf((*MockOAuth2)(nil).AuthCodeURL), varargs...)
}

// Exchange mocks base method.
func (m *MockOAuth2) Exchange(ctx context.Context, code string, opts ...oauth2.AuthCodeOption) (*oauth2.Token, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, code}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exchange", varargs...)
	ret0, _ := ret[0].(*oauth2.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exchange indicates an expected call of Exchange.
func (mr *MockOAuth2MockRecorder) Exchange(ctx, code any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, code}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exchange", reflect.TypeOf((*MockOAuth2)(nil).Exchange), varargs...)
}

// TokenSource mocks base method.
func (m *MockOAuth2) TokenSource(ctx context.Context, t *oauth2.Token) oauth2.TokenSource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenSource", ctx, t)
	ret0, _ := ret[0].(oauth2.TokenSource)
	return ret0
}

// TokenSource indicates an expected call of TokenSource.
func (mr *MockOAuth2MockRecorder) TokenSource(ctx, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenSource", reflect.TypeOf((*MockOAuth2)(nil).TokenSource), ctx, t)
}

// MockTokenSource is a mock of TokenSource interface.
type MockTokenSource struct {
	ctrl     *gomock.Controller
	recorder *MockTokenSourceMockRecorder
	isgomock struct{}
}

// MockTokenSourceMockRecorder is the mock recorder for MockTokenSource.
type MockTokenSourceMockRecorder struct {
	mock *MockTokenSource
}

// NewMockTokenSource creates a new mock instance.
func NewMockTokenSource(ctrl *gomock.Controller) *MockTokenSource {
	mock := &MockTokenSource{ctrl: ctrl}
	mock.recorder = &MockTokenSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenSource) EXPECT() *MockTokenSourceMockRecorder {
	return m.recorder
}

// Token mocks base method.
func (m *MockTokenSource) Token() (*oauth2.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Token")
	ret0, _ := ret[0].(*oauth2.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Token indicates an expected call of Token.
func (mr *MockTokenSourceMockRecorder) Token() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Token", reflect.TypeOf((*MockTokenSource)(nil).Token))
}
