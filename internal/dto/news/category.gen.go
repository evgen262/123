// Code generated by DIT Nil Getters Generator. !!! DO NOT EDIT !!!
// Source: category.go
package news

import (
    "time"
    "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity/news"
)

 
func (n *NewCategory) GetVisibilityPtr() *CategoryVisibility {
    if n == nil {
        return nil
    }
	return n.Visibility
}
 
func (u *UpdateCategory) GetUpdatedAtPtr() *time.Time {
    if u == nil {
        return nil
    }
	return u.UpdatedAt
}
 
func (u *UpdateCategory) GetVisibilityPtr() *CategoryVisibility {
    if u == nil {
        return nil
    }
	return u.Visibility
}
 
func (f *FilterCategory) GetNamePtr() *string {
    if f == nil {
        return nil
    }
	return f.Name
}
 
func (f *FilterCategory) GetPaginationPtr() *CategoryPagination {
    if f == nil {
        return nil
    }
	return f.Pagination
}
 
func (f *FilterCategory) GetVisitorPtr() *news.Visitor {
    if f == nil {
        return nil
    }
	return f.Visitor
}
 
func (c *CategoryPagination) GetLimitPtr() *int {
    if c == nil {
        return nil
    }
	return c.Limit
}



 
func (n *NewCategory) GetVisibility() (_Visibility CategoryVisibility) {
    if n == nil || n.Visibility == nil  {
        return 
    }
	return *n.Visibility
}
 
func (u *UpdateCategory) GetUpdatedAt() time.Time {
    if u == nil || u.UpdatedAt == nil  {
        return time.Time{}
    }
	return *u.UpdatedAt
}
 
func (u *UpdateCategory) GetVisibility() (_Visibility CategoryVisibility) {
    if u == nil || u.Visibility == nil  {
        return 
    }
	return *u.Visibility
}
 
func (f *FilterCategory) GetName() string {
    if f == nil || f.Name == nil  {
        return ""
    }
	return *f.Name
}
 
func (f *FilterCategory) GetPagination() (_Pagination CategoryPagination) {
    if f == nil || f.Pagination == nil  {
        return 
    }
	return *f.Pagination
}
 
func (f *FilterCategory) GetVisitor() (_Visitor news.Visitor) {
    if f == nil || f.Visitor == nil  {
        return 
    }
	return *f.Visitor
}
 
func (c *CategoryPagination) GetLimit() int {
    if c == nil || c.Limit == nil  {
        return 0
    }
	return *c.Limit
}



