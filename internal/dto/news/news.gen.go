// Code generated by DIT Nil Getters Generator. !!! DO NOT EDIT !!!
// Source: news.go
package news

import (
	"git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/dto"
	entityNews "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity/news"
	"github.com/google/uuid"
	"time"
)

func (n *NewNews) GetImageIDPtr() *uuid.UUID {
	if n == nil {
		return nil
	}
	return n.ImageID
}

func (n *NewNews) GetOrganizationIDPtr() *uuid.UUID {
	if n == nil {
		return nil
	}
	return n.OrganizationID
}

func (n *NewNews) GetProductIDPtr() *uuid.UUID {
	if n == nil {
		return nil
	}
	return n.ProductID
}

func (n *NewNews) GetPublicationAtPtr() *time.Time {
	if n == nil {
		return nil
	}
	return n.PublicationAt
}

func (n *NewNews) GetVisibilityPtr() *entityNews.NewsVisibility {
	if n == nil {
		return nil
	}
	return n.Visibility
}

func (a *Author) GetMiddleNamePtr() *string {
	if a == nil {
		return nil
	}
	return a.MiddleName
}

func (a *Author) GetImageIDPtr() *uuid.UUID {
	if a == nil {
		return nil
	}
	return a.ImageID
}

func (u *UpdateNews) GetTitlePtr() *string {
	if u == nil {
		return nil
	}
	return u.Title
}

func (u *UpdateNews) GetSlugPtr() *string {
	if u == nil {
		return nil
	}
	return u.Slug
}

func (u *UpdateNews) GetImageIDPtr() *uuid.UUID {
	if u == nil {
		return nil
	}
	return u.ImageID
}

func (u *UpdateNews) GetCategoryIDPtr() *uuid.UUID {
	if u == nil {
		return nil
	}
	return u.CategoryID
}

func (u *UpdateNews) GetOrganizationIDPtr() *uuid.UUID {
	if u == nil {
		return nil
	}
	return u.OrganizationID
}

func (u *UpdateNews) GetProductIDPtr() *uuid.UUID {
	if u == nil {
		return nil
	}
	return u.ProductID
}

func (u *UpdateNews) GetOnMainPtr() *bool {
	if u == nil {
		return nil
	}
	return u.OnMain
}

func (u *UpdateNews) GetPinnedPtr() *bool {
	if u == nil {
		return nil
	}
	return u.Pinned
}

func (u *UpdateNews) GetCanDisplayViewsPtr() *bool {
	if u == nil {
		return nil
	}
	return u.CanDisplayViews
}

func (u *UpdateNews) GetCanReactsPtr() *bool {
	if u == nil {
		return nil
	}
	return u.CanReacts
}

func (u *UpdateNews) GetCanCommentedPtr() *bool {
	if u == nil {
		return nil
	}
	return u.CanCommented
}

func (u *UpdateNews) GetPublicationAtPtr() *time.Time {
	if u == nil {
		return nil
	}
	return u.PublicationAt
}

func (u *UpdateNews) GetVisibilityPtr() *entityNews.NewsVisibility {
	if u == nil {
		return nil
	}
	return u.Visibility
}

func (u *UpdateNews) GetUpdatedAtPtr() *time.Time {
	if u == nil {
		return nil
	}
	return u.UpdatedAt
}

func (u *UpdateFlags) GetOnMainPtr() *bool {
	if u == nil {
		return nil
	}
	return u.OnMain
}

func (u *UpdateFlags) GetPinnedPtr() *bool {
	if u == nil {
		return nil
	}
	return u.Pinned
}

func (u *UpdateFlags) GetUpdatedAtPtr() *time.Time {
	if u == nil {
		return nil
	}
	return u.UpdatedAt
}

func (s *SearchNews) GetFilterPtr() *SearchNewsFilter {
	if s == nil {
		return nil
	}
	return s.Filter
}

func (s *SearchNews) GetVisitorPtr() *entityNews.Visitor {
	if s == nil {
		return nil
	}
	return s.Visitor
}

func (s *SearchNewsScroll) GetLastIDPtr() *uuid.UUID {
	if s == nil {
		return nil
	}
	return s.LastID
}

func (s *SearchNewsScroll) GetCreatedAtPtr() *time.Time {
	if s == nil {
		return nil
	}
	return s.CreatedAt
}

func (n *NewNews) GetTitle() string {
	if n == nil {
		return ""
	}
	return n.Title
}

func (n *NewNews) GetSlug() string {
	if n == nil {
		return ""
	}
	return n.Slug
}

func (n *NewNews) GetImageID() uuid.UUID {
	if n == nil || n.ImageID == nil {
		return uuid.Nil
	}
	return *n.ImageID
}

func (n *NewNews) GetCategoryID() uuid.UUID {
	if n == nil {
		return uuid.Nil
	}
	return n.CategoryID
}

func (n *NewNews) GetOrganizationID() uuid.UUID {
	if n == nil || n.OrganizationID == nil {
		return uuid.Nil
	}
	return *n.OrganizationID
}

func (n *NewNews) GetProductID() uuid.UUID {
	if n == nil || n.ProductID == nil {
		return uuid.Nil
	}
	return *n.ProductID
}

func (n *NewNews) GetParticipants() []*uuid.UUID {
	if n == nil {
		return nil
	}
	return n.Participants
}

func (n *NewNews) GetStatus() (_Status entityNews.NewsStatus) {
	if n == nil {
		return
	}
	return n.Status
}

func (n *NewNews) GetBody() []byte {
	if n == nil {
		return nil
	}
	return n.Body
}

func (n *NewNews) GetAuthor() Author {
	if n == nil {
		return Author{}
	}
	return n.Author
}

func (n *NewNews) GetOnMain() bool {
	if n == nil {
		return false
	}
	return n.OnMain
}

func (n *NewNews) GetPinned() bool {
	if n == nil {
		return false
	}
	return n.Pinned
}

func (n *NewNews) GetCanDisplayViews() bool {
	if n == nil {
		return false
	}
	return n.CanDisplayViews
}

func (n *NewNews) GetCanReacts() bool {
	if n == nil {
		return false
	}
	return n.CanReacts
}

func (n *NewNews) GetCanCommented() bool {
	if n == nil {
		return false
	}
	return n.CanCommented
}

func (n *NewNews) GetPublicationAt() time.Time {
	if n == nil || n.PublicationAt == nil {
		return time.Time{}
	}
	return *n.PublicationAt
}

func (n *NewNews) GetVisibility() (_Visibility entityNews.NewsVisibility) {
	if n == nil || n.Visibility == nil {
		return
	}
	return *n.Visibility
}

func (a *Author) GetID() uuid.UUID {
	if a == nil {
		return uuid.Nil
	}
	return a.ID
}

func (a *Author) GetLastName() string {
	if a == nil {
		return ""
	}
	return a.LastName
}

func (a *Author) GetFirstName() string {
	if a == nil {
		return ""
	}
	return a.FirstName
}

func (a *Author) GetMiddleName() string {
	if a == nil || a.MiddleName == nil {
		return ""
	}
	return *a.MiddleName
}

func (a *Author) GetImageID() uuid.UUID {
	if a == nil || a.ImageID == nil {
		return uuid.Nil
	}
	return *a.ImageID
}

func (u *UpdateNews) GetTitle() string {
	if u == nil || u.Title == nil {
		return ""
	}
	return *u.Title
}

func (u *UpdateNews) GetSlug() string {
	if u == nil || u.Slug == nil {
		return ""
	}
	return *u.Slug
}

func (u *UpdateNews) GetImageID() uuid.UUID {
	if u == nil || u.ImageID == nil {
		return uuid.Nil
	}
	return *u.ImageID
}

func (u *UpdateNews) GetCategoryID() uuid.UUID {
	if u == nil || u.CategoryID == nil {
		return uuid.Nil
	}
	return *u.CategoryID
}

func (u *UpdateNews) GetOrganizationID() uuid.UUID {
	if u == nil || u.OrganizationID == nil {
		return uuid.Nil
	}
	return *u.OrganizationID
}

func (u *UpdateNews) GetProductID() uuid.UUID {
	if u == nil || u.ProductID == nil {
		return uuid.Nil
	}
	return *u.ProductID
}

func (u *UpdateNews) GetParticipants() []*uuid.UUID {
	if u == nil {
		return nil
	}
	return u.Participants
}

func (u *UpdateNews) GetStatus() (_Status entityNews.NewsStatus) {
	if u == nil {
		return
	}
	return u.Status
}

func (u *UpdateNews) GetBody() []byte {
	if u == nil {
		return nil
	}
	return u.Body
}

func (u *UpdateNews) GetOnMain() bool {
	if u == nil || u.OnMain == nil {
		return false
	}
	return *u.OnMain
}

func (u *UpdateNews) GetPinned() bool {
	if u == nil || u.Pinned == nil {
		return false
	}
	return *u.Pinned
}

func (u *UpdateNews) GetCanDisplayViews() bool {
	if u == nil || u.CanDisplayViews == nil {
		return false
	}
	return *u.CanDisplayViews
}

func (u *UpdateNews) GetCanReacts() bool {
	if u == nil || u.CanReacts == nil {
		return false
	}
	return *u.CanReacts
}

func (u *UpdateNews) GetCanCommented() bool {
	if u == nil || u.CanCommented == nil {
		return false
	}
	return *u.CanCommented
}

func (u *UpdateNews) GetPublicationAt() time.Time {
	if u == nil || u.PublicationAt == nil {
		return time.Time{}
	}
	return *u.PublicationAt
}

func (u *UpdateNews) GetVisibility() (_Visibility entityNews.NewsVisibility) {
	if u == nil || u.Visibility == nil {
		return
	}
	return *u.Visibility
}

func (u *UpdateNews) GetUpdatedAt() time.Time {
	if u == nil || u.UpdatedAt == nil {
		return time.Time{}
	}
	return *u.UpdatedAt
}

func (u *UpdateFlags) GetOnMain() bool {
	if u == nil || u.OnMain == nil {
		return false
	}
	return *u.OnMain
}

func (u *UpdateFlags) GetPinned() bool {
	if u == nil || u.Pinned == nil {
		return false
	}
	return *u.Pinned
}

func (u *UpdateFlags) GetUpdatedAt() time.Time {
	if u == nil || u.UpdatedAt == nil {
		return time.Time{}
	}
	return *u.UpdatedAt
}

func (s *SearchNews) GetQuery() string {
	if s == nil {
		return ""
	}
	return s.Query
}

func (s *SearchNews) GetFilter() (_Filter SearchNewsFilter) {
	if s == nil || s.Filter == nil {
		return
	}
	return *s.Filter
}

func (s *SearchNews) GetPagination() SearchNewsPagination {
	if s == nil {
		return SearchNewsPagination{}
	}
	return s.Pagination
}

func (s *SearchNews) GetOrder() SearchNewsOrder {
	if s == nil {
		return SearchNewsOrder{}
	}
	return s.Order
}

func (s *SearchNews) GetVisitor() (_Visitor entityNews.Visitor) {
	if s == nil || s.Visitor == nil {
		return
	}
	return *s.Visitor
}

func (s *SearchNewsFilter) GetStatus() (_Status entityNews.NewsStatus) {
	if s == nil {
		return
	}
	return s.Status
}

func (s *SearchNewsFilter) GetProviderOrganizationsIds() []*uuid.UUID {
	if s == nil {
		return nil
	}
	return s.ProviderOrganizationsIds
}

func (s *SearchNewsFilter) GetProviderProductsNames() []string {
	if s == nil {
		return nil
	}
	return s.ProviderProductsNames
}

func (s *SearchNewsFilter) GetCategoriesNames() []string {
	if s == nil {
		return nil
	}
	return s.CategoriesNames
}

func (s *SearchNewsFilter) GetAuthorsNames() []string {
	if s == nil {
		return nil
	}
	return s.AuthorsNames
}

func (s *SearchNewsFilter) GetOnMainPage() bool {
	if s == nil {
		return false
	}
	return s.OnMainPage
}

func (s *SearchNewsFilter) GetIsPinnedOnMainPage() bool {
	if s == nil {
		return false
	}
	return s.IsPinnedOnMainPage
}

func (s *SearchNewsScroll) GetLastID() uuid.UUID {
	if s == nil || s.LastID == nil {
		return uuid.Nil
	}
	return *s.LastID
}

func (s *SearchNewsScroll) GetCreatedAt() time.Time {
	if s == nil || s.CreatedAt == nil {
		return time.Time{}
	}
	return *s.CreatedAt
}

func (s *SearchNewsScroll) GetLimit() int {
	if s == nil {
		return 0
	}
	return s.Limit
}

func (s *SearchNewsPagination) GetPage() int {
	if s == nil {
		return 0
	}
	return s.Page
}

func (s *SearchNewsPagination) GetLimit() int {
	if s == nil {
		return 0
	}
	return s.Limit
}

func (s *SearchNewsOrder) GetBy() (_By SearchNewsOrderBy) {
	if s == nil {
		return
	}
	return s.By
}

func (s *SearchNewsOrder) GetDirection() (_Direction dto.OrderDirection) {
	if s == nil {
		return
	}
	return s.Direction
}

func (s *SearchNewsResult) GetNews() []*entityNews.NewsFull {
	if s == nil {
		return nil
	}
	return s.News
}

func (s *SearchNewsResult) GetTotal() int {
	if s == nil {
		return 0
	}
	return s.Total
}
