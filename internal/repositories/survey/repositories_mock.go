// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=./repositories_mock.go -package=survey
//

// Package survey is a generated GoMock package.
package survey

import (
	reflect "reflect"

	answerv1 "git.mos.ru/buch-cloud/moscow-team-2.0/infrastructure/protolib.git/gen/infogorod/surveys/answer/v1"
	imagev1 "git.mos.ru/buch-cloud/moscow-team-2.0/infrastructure/protolib.git/gen/infogorod/surveys/image/v1"
	respondentv1 "git.mos.ru/buch-cloud/moscow-team-2.0/infrastructure/protolib.git/gen/infogorod/surveys/respondent/v1"
	sharedv1 "git.mos.ru/buch-cloud/moscow-team-2.0/infrastructure/protolib.git/gen/infogorod/surveys/shared/v1"
	surveyv1 "git.mos.ru/buch-cloud/moscow-team-2.0/infrastructure/protolib.git/gen/infogorod/surveys/survey/v1"
	entitySurveys "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity/survey"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockSurveyMapper is a mock of SurveyMapper interface.
type MockSurveyMapper struct {
	ctrl     *gomock.Controller
	recorder *MockSurveyMapperMockRecorder
	isgomock struct{}
}

// MockSurveyMapperMockRecorder is the mock recorder for MockSurveyMapper.
type MockSurveyMapperMockRecorder struct {
	mock *MockSurveyMapper
}

// NewMockSurveyMapper creates a new mock instance.
func NewMockSurveyMapper(ctrl *gomock.Controller) *MockSurveyMapper {
	mock := &MockSurveyMapper{ctrl: ctrl}
	mock.recorder = &MockSurveyMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSurveyMapper) EXPECT() *MockSurveyMapperMockRecorder {
	return m.recorder
}

// NewSurveyToPb mocks base method.
func (m *MockSurveyMapper) NewSurveyToPb(survey *entitySurveys.Survey) *surveyv1.AddRequest_Survey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSurveyToPb", survey)
	ret0, _ := ret[0].(*surveyv1.AddRequest_Survey)
	return ret0
}

// NewSurveyToPb indicates an expected call of NewSurveyToPb.
func (mr *MockSurveyMapperMockRecorder) NewSurveyToPb(survey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSurveyToPb", reflect.TypeOf((*MockSurveyMapper)(nil).NewSurveyToPb), survey)
}

// OptionsToPb mocks base method.
func (m *MockSurveyMapper) OptionsToPb(options *entitySurveys.SurveyFilterOptions) *sharedv1.Options {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OptionsToPb", options)
	ret0, _ := ret[0].(*sharedv1.Options)
	return ret0
}

// OptionsToPb indicates an expected call of OptionsToPb.
func (mr *MockSurveyMapperMockRecorder) OptionsToPb(options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OptionsToPb", reflect.TypeOf((*MockSurveyMapper)(nil).OptionsToPb), options)
}

// PaginationToEntity mocks base method.
func (m *MockSurveyMapper) PaginationToEntity(response *sharedv1.PaginationResponse) (*entitySurveys.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaginationToEntity", response)
	ret0, _ := ret[0].(*entitySurveys.Pagination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PaginationToEntity indicates an expected call of PaginationToEntity.
func (mr *MockSurveyMapperMockRecorder) PaginationToEntity(response any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaginationToEntity", reflect.TypeOf((*MockSurveyMapper)(nil).PaginationToEntity), response)
}

// PaginationToPb mocks base method.
func (m *MockSurveyMapper) PaginationToPb(pagination *entitySurveys.Pagination) *sharedv1.PaginationRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaginationToPb", pagination)
	ret0, _ := ret[0].(*sharedv1.PaginationRequest)
	return ret0
}

// PaginationToPb indicates an expected call of PaginationToPb.
func (mr *MockSurveyMapperMockRecorder) PaginationToPb(pagination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaginationToPb", reflect.TypeOf((*MockSurveyMapper)(nil).PaginationToPb), pagination)
}

// RespondentIDsToEntity mocks base method.
func (m *MockSurveyMapper) RespondentIDsToEntity(respondentIDs []string) (entitySurveys.RespondentIDs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RespondentIDsToEntity", respondentIDs)
	ret0, _ := ret[0].(entitySurveys.RespondentIDs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RespondentIDsToEntity indicates an expected call of RespondentIDsToEntity.
func (mr *MockSurveyMapperMockRecorder) RespondentIDsToEntity(respondentIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RespondentIDsToEntity", reflect.TypeOf((*MockSurveyMapper)(nil).RespondentIDsToEntity), respondentIDs)
}

// RespondentToEntity mocks base method.
func (m *MockSurveyMapper) RespondentToEntity(respondent *respondentv1.Respondent) (*entitySurveys.SurveyRespondent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RespondentToEntity", respondent)
	ret0, _ := ret[0].(*entitySurveys.SurveyRespondent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RespondentToEntity indicates an expected call of RespondentToEntity.
func (mr *MockSurveyMapperMockRecorder) RespondentToEntity(respondent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RespondentToEntity", reflect.TypeOf((*MockSurveyMapper)(nil).RespondentToEntity), respondent)
}

// RespondentToPb mocks base method.
func (m *MockSurveyMapper) RespondentToPb(respondent *entitySurveys.SurveyRespondent) *respondentv1.Respondent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RespondentToPb", respondent)
	ret0, _ := ret[0].(*respondentv1.Respondent)
	return ret0
}

// RespondentToPb indicates an expected call of RespondentToPb.
func (mr *MockSurveyMapperMockRecorder) RespondentToPb(respondent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RespondentToPb", reflect.TypeOf((*MockSurveyMapper)(nil).RespondentToPb), respondent)
}

// SurveyToEntity mocks base method.
func (m *MockSurveyMapper) SurveyToEntity(surveyPb *surveyv1.Survey) (*entitySurveys.Survey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SurveyToEntity", surveyPb)
	ret0, _ := ret[0].(*entitySurveys.Survey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SurveyToEntity indicates an expected call of SurveyToEntity.
func (mr *MockSurveyMapperMockRecorder) SurveyToEntity(surveyPb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SurveyToEntity", reflect.TypeOf((*MockSurveyMapper)(nil).SurveyToEntity), surveyPb)
}

// SurveyToPb mocks base method.
func (m *MockSurveyMapper) SurveyToPb(survey *entitySurveys.Survey) *surveyv1.Survey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SurveyToPb", survey)
	ret0, _ := ret[0].(*surveyv1.Survey)
	return ret0
}

// SurveyToPb indicates an expected call of SurveyToPb.
func (mr *MockSurveyMapperMockRecorder) SurveyToPb(survey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SurveyToPb", reflect.TypeOf((*MockSurveyMapper)(nil).SurveyToPb), survey)
}

// SurveysToEntities mocks base method.
func (m *MockSurveyMapper) SurveysToEntities(surveysArr []*surveyv1.Survey) ([]*entitySurveys.Survey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SurveysToEntities", surveysArr)
	ret0, _ := ret[0].([]*entitySurveys.Survey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SurveysToEntities indicates an expected call of SurveysToEntities.
func (mr *MockSurveyMapperMockRecorder) SurveysToEntities(surveysArr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SurveysToEntities", reflect.TypeOf((*MockSurveyMapper)(nil).SurveysToEntities), surveysArr)
}

// MockAnswerMapper is a mock of AnswerMapper interface.
type MockAnswerMapper struct {
	ctrl     *gomock.Controller
	recorder *MockAnswerMapperMockRecorder
	isgomock struct{}
}

// MockAnswerMapperMockRecorder is the mock recorder for MockAnswerMapper.
type MockAnswerMapperMockRecorder struct {
	mock *MockAnswerMapper
}

// NewMockAnswerMapper creates a new mock instance.
func NewMockAnswerMapper(ctrl *gomock.Controller) *MockAnswerMapper {
	mock := &MockAnswerMapper{ctrl: ctrl}
	mock.recorder = &MockAnswerMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnswerMapper) EXPECT() *MockAnswerMapperMockRecorder {
	return m.recorder
}

// AnswersToEntities mocks base method.
func (m *MockAnswerMapper) AnswersToEntities(answers []*answerv1.Answer) ([]*entitySurveys.RespondentAnswer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnswersToEntities", answers)
	ret0, _ := ret[0].([]*entitySurveys.RespondentAnswer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnswersToEntities indicates an expected call of AnswersToEntities.
func (mr *MockAnswerMapperMockRecorder) AnswersToEntities(answers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnswersToEntities", reflect.TypeOf((*MockAnswerMapper)(nil).AnswersToEntities), answers)
}

// IDsToUUIDs mocks base method.
func (m *MockAnswerMapper) IDsToUUIDs(answerIDs []string) ([]uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IDsToUUIDs", answerIDs)
	ret0, _ := ret[0].([]uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IDsToUUIDs indicates an expected call of IDsToUUIDs.
func (mr *MockAnswerMapperMockRecorder) IDsToUUIDs(answerIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IDsToUUIDs", reflect.TypeOf((*MockAnswerMapper)(nil).IDsToUUIDs), answerIDs)
}

// NewAnswersToPb mocks base method.
func (m *MockAnswerMapper) NewAnswersToPb(answers []*entitySurveys.RespondentAnswer) []*answerv1.AddRequest_Answer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAnswersToPb", answers)
	ret0, _ := ret[0].([]*answerv1.AddRequest_Answer)
	return ret0
}

// NewAnswersToPb indicates an expected call of NewAnswersToPb.
func (mr *MockAnswerMapperMockRecorder) NewAnswersToPb(answers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAnswersToPb", reflect.TypeOf((*MockAnswerMapper)(nil).NewAnswersToPb), answers)
}

// MockImageMapper is a mock of ImageMapper interface.
type MockImageMapper struct {
	ctrl     *gomock.Controller
	recorder *MockImageMapperMockRecorder
	isgomock struct{}
}

// MockImageMapperMockRecorder is the mock recorder for MockImageMapper.
type MockImageMapperMockRecorder struct {
	mock *MockImageMapper
}

// NewMockImageMapper creates a new mock instance.
func NewMockImageMapper(ctrl *gomock.Controller) *MockImageMapper {
	mock := &MockImageMapper{ctrl: ctrl}
	mock.recorder = &MockImageMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageMapper) EXPECT() *MockImageMapperMockRecorder {
	return m.recorder
}

// ImageToEntity mocks base method.
func (m *MockImageMapper) ImageToEntity(image *imagev1.Image) (*entitySurveys.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageToEntity", image)
	ret0, _ := ret[0].(*entitySurveys.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImageToEntity indicates an expected call of ImageToEntity.
func (mr *MockImageMapperMockRecorder) ImageToEntity(image any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageToEntity", reflect.TypeOf((*MockImageMapper)(nil).ImageToEntity), image)
}

// NewImageToPb mocks base method.
func (m *MockImageMapper) NewImageToPb(image *entitySurveys.Image) *imagev1.AddRequest_Image {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewImageToPb", image)
	ret0, _ := ret[0].(*imagev1.AddRequest_Image)
	return ret0
}

// NewImageToPb indicates an expected call of NewImageToPb.
func (mr *MockImageMapperMockRecorder) NewImageToPb(image any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewImageToPb", reflect.TypeOf((*MockImageMapper)(nil).NewImageToPb), image)
}
