// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=./auth_mock.go -package=auth
//

// Package auth is a generated GoMock package.
package auth

import (
	reflect "reflect"

	authv1 "git.mos.ru/buch-cloud/moscow-team-2.0/infrastructure/protolib.git/gen/infogorod/authfacade/auth/v1"
	redirectsessionv1 "git.mos.ru/buch-cloud/moscow-team-2.0/infrastructure/protolib.git/gen/infogorod/authfacade/redirectsession/v1"
	auth "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity/auth"
	gomock "go.uber.org/mock/gomock"
)

// MockMapperAuth is a mock of MapperAuth interface.
type MockMapperAuth struct {
	ctrl     *gomock.Controller
	recorder *MockMapperAuthMockRecorder
	isgomock struct{}
}

// MockMapperAuthMockRecorder is the mock recorder for MockMapperAuth.
type MockMapperAuthMockRecorder struct {
	mock *MockMapperAuth
}

// NewMockMapperAuth creates a new mock instance.
func NewMockMapperAuth(ctrl *gomock.Controller) *MockMapperAuth {
	mock := &MockMapperAuth{ctrl: ctrl}
	mock.recorder = &MockMapperAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMapperAuth) EXPECT() *MockMapperAuthMockRecorder {
	return m.recorder
}

// PortalsToEntity mocks base method.
func (m *MockMapperAuth) PortalsToEntity(portalsPb []*authv1.Portal) []*auth.Portal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PortalsToEntity", portalsPb)
	ret0, _ := ret[0].([]*auth.Portal)
	return ret0
}

// PortalsToEntity indicates an expected call of PortalsToEntity.
func (mr *MockMapperAuthMockRecorder) PortalsToEntity(portalsPb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortalsToEntity", reflect.TypeOf((*MockMapperAuth)(nil).PortalsToEntity), portalsPb)
}

// SessionToEntity mocks base method.
func (m *MockMapperAuth) SessionToEntity(session *authv1.Session) *auth.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionToEntity", session)
	ret0, _ := ret[0].(*auth.Session)
	return ret0
}

// SessionToEntity indicates an expected call of SessionToEntity.
func (mr *MockMapperAuthMockRecorder) SessionToEntity(session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionToEntity", reflect.TypeOf((*MockMapperAuth)(nil).SessionToEntity), session)
}

// SessionToPb mocks base method.
func (m *MockMapperAuth) SessionToPb(session *auth.Session) *authv1.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionToPb", session)
	ret0, _ := ret[0].(*authv1.Session)
	return ret0
}

// SessionToPb indicates an expected call of SessionToPb.
func (mr *MockMapperAuthMockRecorder) SessionToPb(session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionToPb", reflect.TypeOf((*MockMapperAuth)(nil).SessionToPb), session)
}

// UserToEntity mocks base method.
func (m *MockMapperAuth) UserToEntity(userPb *authv1.User) *auth.UserSudir {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserToEntity", userPb)
	ret0, _ := ret[0].(*auth.UserSudir)
	return ret0
}

// UserToEntity indicates an expected call of UserToEntity.
func (mr *MockMapperAuthMockRecorder) UserToEntity(userPb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserToEntity", reflect.TypeOf((*MockMapperAuth)(nil).UserToEntity), userPb)
}

// MockRedirectSessionMapper is a mock of RedirectSessionMapper interface.
type MockRedirectSessionMapper struct {
	ctrl     *gomock.Controller
	recorder *MockRedirectSessionMapperMockRecorder
	isgomock struct{}
}

// MockRedirectSessionMapperMockRecorder is the mock recorder for MockRedirectSessionMapper.
type MockRedirectSessionMapperMockRecorder struct {
	mock *MockRedirectSessionMapper
}

// NewMockRedirectSessionMapper creates a new mock instance.
func NewMockRedirectSessionMapper(ctrl *gomock.Controller) *MockRedirectSessionMapper {
	mock := &MockRedirectSessionMapper{ctrl: ctrl}
	mock.recorder = &MockRedirectSessionMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedirectSessionMapper) EXPECT() *MockRedirectSessionMapperMockRecorder {
	return m.recorder
}

// UserInfoToCreateRequestUserUnfoPb mocks base method.
func (m *MockRedirectSessionMapper) UserInfoToCreateRequestUserUnfoPb(userInfo *auth.RedirectSessionUserInfo) *redirectsessionv1.CreateSessionRequest_UserInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserInfoToCreateRequestUserUnfoPb", userInfo)
	ret0, _ := ret[0].(*redirectsessionv1.CreateSessionRequest_UserInfo)
	return ret0
}

// UserInfoToCreateRequestUserUnfoPb indicates an expected call of UserInfoToCreateRequestUserUnfoPb.
func (mr *MockRedirectSessionMapperMockRecorder) UserInfoToCreateRequestUserUnfoPb(userInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserInfoToCreateRequestUserUnfoPb", reflect.TypeOf((*MockRedirectSessionMapper)(nil).UserInfoToCreateRequestUserUnfoPb), userInfo)
}
