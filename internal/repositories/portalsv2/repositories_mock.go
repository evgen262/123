// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=./repositories_mock.go -package=portalsv2
//

// Package portalsv2 is a generated GoMock package.
package portalsv2

import (
	reflect "reflect"

	complexesv1 "git.mos.ru/buch-cloud/moscow-team-2.0/infrastructure/protolib.git/gen/infogorod/portalsfacade/complexes/v1"
	portalsv1 "git.mos.ru/buch-cloud/moscow-team-2.0/infrastructure/protolib.git/gen/infogorod/portalsfacade/portals/v1"
	portalv2 "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity/portalv2"
	gomock "go.uber.org/mock/gomock"
)

// MockPortalsMapper is a mock of PortalsMapper interface.
type MockPortalsMapper struct {
	ctrl     *gomock.Controller
	recorder *MockPortalsMapperMockRecorder
	isgomock struct{}
}

// MockPortalsMapperMockRecorder is the mock recorder for MockPortalsMapper.
type MockPortalsMapperMockRecorder struct {
	mock *MockPortalsMapper
}

// NewMockPortalsMapper creates a new mock instance.
func NewMockPortalsMapper(ctrl *gomock.Controller) *MockPortalsMapper {
	mock := &MockPortalsMapper{ctrl: ctrl}
	mock.recorder = &MockPortalsMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalsMapper) EXPECT() *MockPortalsMapperMockRecorder {
	return m.recorder
}

// PortalsFiltersToPb mocks base method.
func (m *MockPortalsMapper) PortalsFiltersToPb(filters *portalv2.FilterPortalsFilters) *portalsv1.FilterRequest_Filters {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PortalsFiltersToPb", filters)
	ret0, _ := ret[0].(*portalsv1.FilterRequest_Filters)
	return ret0
}

// PortalsFiltersToPb indicates an expected call of PortalsFiltersToPb.
func (mr *MockPortalsMapperMockRecorder) PortalsFiltersToPb(filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortalsFiltersToPb", reflect.TypeOf((*MockPortalsMapper)(nil).PortalsFiltersToPb), filters)
}

// PortalsOptionsToPb mocks base method.
func (m *MockPortalsMapper) PortalsOptionsToPb(options *portalv2.FilterPortalsOptions) *portalsv1.FilterRequest_Options {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PortalsOptionsToPb", options)
	ret0, _ := ret[0].(*portalsv1.FilterRequest_Options)
	return ret0
}

// PortalsOptionsToPb indicates an expected call of PortalsOptionsToPb.
func (mr *MockPortalsMapperMockRecorder) PortalsOptionsToPb(options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortalsOptionsToPb", reflect.TypeOf((*MockPortalsMapper)(nil).PortalsOptionsToPb), options)
}

// PortalsWithCountsToEntity mocks base method.
func (m *MockPortalsMapper) PortalsWithCountsToEntity(portalsWithCountsPb []*portalsv1.PortalWithCounts) []*portalv2.PortalWithCounts {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PortalsWithCountsToEntity", portalsWithCountsPb)
	ret0, _ := ret[0].([]*portalv2.PortalWithCounts)
	return ret0
}

// PortalsWithCountsToEntity indicates an expected call of PortalsWithCountsToEntity.
func (mr *MockPortalsMapperMockRecorder) PortalsWithCountsToEntity(portalsWithCountsPb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortalsWithCountsToEntity", reflect.TypeOf((*MockPortalsMapper)(nil).PortalsWithCountsToEntity), portalsWithCountsPb)
}

// MockComplexesMapper is a mock of ComplexesMapper interface.
type MockComplexesMapper struct {
	ctrl     *gomock.Controller
	recorder *MockComplexesMapperMockRecorder
	isgomock struct{}
}

// MockComplexesMapperMockRecorder is the mock recorder for MockComplexesMapper.
type MockComplexesMapperMockRecorder struct {
	mock *MockComplexesMapper
}

// NewMockComplexesMapper creates a new mock instance.
func NewMockComplexesMapper(ctrl *gomock.Controller) *MockComplexesMapper {
	mock := &MockComplexesMapper{ctrl: ctrl}
	mock.recorder = &MockComplexesMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComplexesMapper) EXPECT() *MockComplexesMapperMockRecorder {
	return m.recorder
}

// ComplexesFiltersToPb mocks base method.
func (m *MockComplexesMapper) ComplexesFiltersToPb(filters *portalv2.FilterComplexesFilters) *complexesv1.FilterRequest_Filters {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComplexesFiltersToPb", filters)
	ret0, _ := ret[0].(*complexesv1.FilterRequest_Filters)
	return ret0
}

// ComplexesFiltersToPb indicates an expected call of ComplexesFiltersToPb.
func (mr *MockComplexesMapperMockRecorder) ComplexesFiltersToPb(filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComplexesFiltersToPb", reflect.TypeOf((*MockComplexesMapper)(nil).ComplexesFiltersToPb), filters)
}

// ComplexesOptionsToPb mocks base method.
func (m *MockComplexesMapper) ComplexesOptionsToPb(options *portalv2.FilterComplexesOptions) *complexesv1.FilterRequest_Options {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComplexesOptionsToPb", options)
	ret0, _ := ret[0].(*complexesv1.FilterRequest_Options)
	return ret0
}

// ComplexesOptionsToPb indicates an expected call of ComplexesOptionsToPb.
func (mr *MockComplexesMapperMockRecorder) ComplexesOptionsToPb(options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComplexesOptionsToPb", reflect.TypeOf((*MockComplexesMapper)(nil).ComplexesOptionsToPb), options)
}

// ComplexesToEntity mocks base method.
func (m *MockComplexesMapper) ComplexesToEntity(complexesPb []*complexesv1.Complex) []*portalv2.Complex {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComplexesToEntity", complexesPb)
	ret0, _ := ret[0].([]*portalv2.Complex)
	return ret0
}

// ComplexesToEntity indicates an expected call of ComplexesToEntity.
func (mr *MockComplexesMapperMockRecorder) ComplexesToEntity(complexesPb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComplexesToEntity", reflect.TypeOf((*MockComplexesMapper)(nil).ComplexesToEntity), complexesPb)
}
