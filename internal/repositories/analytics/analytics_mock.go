// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=./analytics_mock.go -package=analytics
//

// Package analytics is a generated GoMock package.
package analytics

import (
	reflect "reflect"

	metricsv1 "git.mos.ru/buch-cloud/moscow-team-2.0/infrastructure/protolib.git/gen/infogorod/analytics/metrics/v1"
	analytics "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity/analytics"
	gomock "go.uber.org/mock/gomock"
)

// MockMetricsMapper is a mock of MetricsMapper interface.
type MockMetricsMapper struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMapperMockRecorder
	isgomock struct{}
}

// MockMetricsMapperMockRecorder is the mock recorder for MockMetricsMapper.
type MockMetricsMapperMockRecorder struct {
	mock *MockMetricsMapper
}

// NewMockMetricsMapper creates a new mock instance.
func NewMockMetricsMapper(ctrl *gomock.Controller) *MockMetricsMapper {
	mock := &MockMetricsMapper{ctrl: ctrl}
	mock.recorder = &MockMetricsMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsMapper) EXPECT() *MockMetricsMapperMockRecorder {
	return m.recorder
}

// MetricsCFCHeadersToPb mocks base method.
func (m *MockMetricsMapper) MetricsCFCHeadersToPb(headers analytics.CFCHeaders) *metricsv1.AddRequest_CFCHeaders {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetricsCFCHeadersToPb", headers)
	ret0, _ := ret[0].(*metricsv1.AddRequest_CFCHeaders)
	return ret0
}

// MetricsCFCHeadersToPb indicates an expected call of MetricsCFCHeadersToPb.
func (mr *MockMetricsMapperMockRecorder) MetricsCFCHeadersToPb(headers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetricsCFCHeadersToPb", reflect.TypeOf((*MockMetricsMapper)(nil).MetricsCFCHeadersToPb), headers)
}
