// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=./banners_mock.go -package=repositoryBanners
//

// Package repositoryBanners is a generated GoMock package.
package repositoryBanners

import (
	reflect "reflect"

	bannersv1 "git.mos.ru/buch-cloud/moscow-team-2.0/infrastructure/protolib.git/gen/infogorod/banners/banners/v1"
	dtoBanners "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/dto/banners"
	entityBanners "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity/banners"
	gomock "go.uber.org/mock/gomock"
)

// MockBannersMapper is a mock of BannersMapper interface.
type MockBannersMapper struct {
	ctrl     *gomock.Controller
	recorder *MockBannersMapperMockRecorder
	isgomock struct{}
}

// MockBannersMapperMockRecorder is the mock recorder for MockBannersMapper.
type MockBannersMapperMockRecorder struct {
	mock *MockBannersMapper
}

// NewMockBannersMapper creates a new mock instance.
func NewMockBannersMapper(ctrl *gomock.Controller) *MockBannersMapper {
	mock := &MockBannersMapper{ctrl: ctrl}
	mock.recorder = &MockBannersMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBannersMapper) EXPECT() *MockBannersMapperMockRecorder {
	return m.recorder
}

// BannerInfoToEntity mocks base method.
func (m *MockBannersMapper) BannerInfoToEntity(info *bannersv1.SetResponse_Banner) *entityBanners.BannerInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BannerInfoToEntity", info)
	ret0, _ := ret[0].(*entityBanners.BannerInfo)
	return ret0
}

// BannerInfoToEntity indicates an expected call of BannerInfoToEntity.
func (mr *MockBannersMapperMockRecorder) BannerInfoToEntity(info any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BannerInfoToEntity", reflect.TypeOf((*MockBannersMapper)(nil).BannerInfoToEntity), info)
}

// BannerInfosToEntities mocks base method.
func (m *MockBannersMapper) BannerInfosToEntities(info []*bannersv1.SetResponse_Banner) []*entityBanners.BannerInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BannerInfosToEntities", info)
	ret0, _ := ret[0].([]*entityBanners.BannerInfo)
	return ret0
}

// BannerInfosToEntities indicates an expected call of BannerInfosToEntities.
func (mr *MockBannersMapperMockRecorder) BannerInfosToEntities(info any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BannerInfosToEntities", reflect.TypeOf((*MockBannersMapper)(nil).BannerInfosToEntities), info)
}

// BannerToEntity mocks base method.
func (m *MockBannersMapper) BannerToEntity(banner *bannersv1.Banner) *entityBanners.Banner {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BannerToEntity", banner)
	ret0, _ := ret[0].(*entityBanners.Banner)
	return ret0
}

// BannerToEntity indicates an expected call of BannerToEntity.
func (mr *MockBannersMapperMockRecorder) BannerToEntity(banner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BannerToEntity", reflect.TypeOf((*MockBannersMapper)(nil).BannerToEntity), banner)
}

// BannerToPb mocks base method.
func (m *MockBannersMapper) BannerToPb(banners *dtoBanners.SetBanner) *bannersv1.SetRequest_Banner {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BannerToPb", banners)
	ret0, _ := ret[0].(*bannersv1.SetRequest_Banner)
	return ret0
}

// BannerToPb indicates an expected call of BannerToPb.
func (mr *MockBannersMapperMockRecorder) BannerToPb(banners any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BannerToPb", reflect.TypeOf((*MockBannersMapper)(nil).BannerToPb), banners)
}

// BannersToEntities mocks base method.
func (m *MockBannersMapper) BannersToEntities(banners []*bannersv1.Banner) []*entityBanners.Banner {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BannersToEntities", banners)
	ret0, _ := ret[0].([]*entityBanners.Banner)
	return ret0
}

// BannersToEntities indicates an expected call of BannersToEntities.
func (mr *MockBannersMapperMockRecorder) BannersToEntities(banners any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BannersToEntities", reflect.TypeOf((*MockBannersMapper)(nil).BannersToEntities), banners)
}

// ContentToEntity mocks base method.
func (m *MockBannersMapper) ContentToEntity(content *bannersv1.Banner_Content) entityBanners.Content {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContentToEntity", content)
	ret0, _ := ret[0].(entityBanners.Content)
	return ret0
}

// ContentToEntity indicates an expected call of ContentToEntity.
func (mr *MockBannersMapperMockRecorder) ContentToEntity(content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContentToEntity", reflect.TypeOf((*MockBannersMapper)(nil).ContentToEntity), content)
}

// SetBannersToPb mocks base method.
func (m *MockBannersMapper) SetBannersToPb(authorID string, portalID int, banners []*dtoBanners.SetBanner) *bannersv1.SetRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBannersToPb", authorID, portalID, banners)
	ret0, _ := ret[0].(*bannersv1.SetRequest)
	return ret0
}

// SetBannersToPb indicates an expected call of SetBannersToPb.
func (mr *MockBannersMapperMockRecorder) SetBannersToPb(authorID, portalID, banners any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBannersToPb", reflect.TypeOf((*MockBannersMapper)(nil).SetBannersToPb), authorID, portalID, banners)
}
