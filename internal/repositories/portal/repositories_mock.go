// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=./repositories_mock.go -package=portal
//

// Package portal is a generated GoMock package.
package portal

import (
	reflect "reflect"

	featuresv1 "git.mos.ru/buch-cloud/moscow-team-2.0/infrastructure/protolib.git/gen/infogorod/portals/features/v1"
	imagesv1 "git.mos.ru/buch-cloud/moscow-team-2.0/infrastructure/protolib.git/gen/infogorod/portals/images/v1"
	organizationsv1 "git.mos.ru/buch-cloud/moscow-team-2.0/infrastructure/protolib.git/gen/infogorod/portals/organizations/v1"
	portalsv1 "git.mos.ru/buch-cloud/moscow-team-2.0/infrastructure/protolib.git/gen/infogorod/portals/portals/v1"
	questionsv1 "git.mos.ru/buch-cloud/moscow-team-2.0/infrastructure/protolib.git/gen/infogorod/portals/questions/v1"
	sharedv1 "git.mos.ru/buch-cloud/moscow-team-2.0/infrastructure/protolib.git/gen/infogorod/portals/shared/v1"
	entity "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity"
	portal "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity/portal"
	gomock "go.uber.org/mock/gomock"
)

// MockPortalsMapper is a mock of PortalsMapper interface.
type MockPortalsMapper struct {
	ctrl     *gomock.Controller
	recorder *MockPortalsMapperMockRecorder
	isgomock struct{}
}

// MockPortalsMapperMockRecorder is the mock recorder for MockPortalsMapper.
type MockPortalsMapperMockRecorder struct {
	mock *MockPortalsMapper
}

// NewMockPortalsMapper creates a new mock instance.
func NewMockPortalsMapper(ctrl *gomock.Controller) *MockPortalsMapper {
	mock := &MockPortalsMapper{ctrl: ctrl}
	mock.recorder = &MockPortalsMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalsMapper) EXPECT() *MockPortalsMapperMockRecorder {
	return m.recorder
}

// NewPortalToPb mocks base method.
func (m *MockPortalsMapper) NewPortalToPb(arg0 *portal.Portal) *portalsv1.AddRequest_Portal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewPortalToPb", arg0)
	ret0, _ := ret[0].(*portalsv1.AddRequest_Portal)
	return ret0
}

// NewPortalToPb indicates an expected call of NewPortalToPb.
func (mr *MockPortalsMapperMockRecorder) NewPortalToPb(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewPortalToPb", reflect.TypeOf((*MockPortalsMapper)(nil).NewPortalToPb), arg0)
}

// NewPortalsToPb mocks base method.
func (m *MockPortalsMapper) NewPortalsToPb(portals []*portal.Portal) []*portalsv1.AddRequest_Portal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewPortalsToPb", portals)
	ret0, _ := ret[0].([]*portalsv1.AddRequest_Portal)
	return ret0
}

// NewPortalsToPb indicates an expected call of NewPortalsToPb.
func (mr *MockPortalsMapperMockRecorder) NewPortalsToPb(portals any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewPortalsToPb", reflect.TypeOf((*MockPortalsMapper)(nil).NewPortalsToPb), portals)
}

// PortalOrganizationToEntity mocks base method.
func (m *MockPortalsMapper) PortalOrganizationToEntity(orgPb *portalsv1.Portal_Organization) *portal.PortalOrganization {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PortalOrganizationToEntity", orgPb)
	ret0, _ := ret[0].(*portal.PortalOrganization)
	return ret0
}

// PortalOrganizationToEntity indicates an expected call of PortalOrganizationToEntity.
func (mr *MockPortalsMapperMockRecorder) PortalOrganizationToEntity(orgPb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortalOrganizationToEntity", reflect.TypeOf((*MockPortalsMapper)(nil).PortalOrganizationToEntity), orgPb)
}

// PortalOrganizationToPb mocks base method.
func (m *MockPortalsMapper) PortalOrganizationToPb(org *portal.PortalOrganization) *portalsv1.Portal_Organization {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PortalOrganizationToPb", org)
	ret0, _ := ret[0].(*portalsv1.Portal_Organization)
	return ret0
}

// PortalOrganizationToPb indicates an expected call of PortalOrganizationToPb.
func (mr *MockPortalsMapperMockRecorder) PortalOrganizationToPb(org any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortalOrganizationToPb", reflect.TypeOf((*MockPortalsMapper)(nil).PortalOrganizationToPb), org)
}

// PortalOrganizationsToEntity mocks base method.
func (m *MockPortalsMapper) PortalOrganizationsToEntity(orgsPb []*portalsv1.Portal_Organization) []*portal.PortalOrganization {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PortalOrganizationsToEntity", orgsPb)
	ret0, _ := ret[0].([]*portal.PortalOrganization)
	return ret0
}

// PortalOrganizationsToEntity indicates an expected call of PortalOrganizationsToEntity.
func (mr *MockPortalsMapperMockRecorder) PortalOrganizationsToEntity(orgsPb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortalOrganizationsToEntity", reflect.TypeOf((*MockPortalsMapper)(nil).PortalOrganizationsToEntity), orgsPb)
}

// PortalOrganizationsToPb mocks base method.
func (m *MockPortalsMapper) PortalOrganizationsToPb(orgs []*portal.PortalOrganization) []*portalsv1.Portal_Organization {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PortalOrganizationsToPb", orgs)
	ret0, _ := ret[0].([]*portalsv1.Portal_Organization)
	return ret0
}

// PortalOrganizationsToPb indicates an expected call of PortalOrganizationsToPb.
func (mr *MockPortalsMapperMockRecorder) PortalOrganizationsToPb(orgs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortalOrganizationsToPb", reflect.TypeOf((*MockPortalsMapper)(nil).PortalOrganizationsToPb), orgs)
}

// PortalToEntity mocks base method.
func (m *MockPortalsMapper) PortalToEntity(portalPb *portalsv1.Portal) *portal.Portal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PortalToEntity", portalPb)
	ret0, _ := ret[0].(*portal.Portal)
	return ret0
}

// PortalToEntity indicates an expected call of PortalToEntity.
func (mr *MockPortalsMapperMockRecorder) PortalToEntity(portalPb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortalToEntity", reflect.TypeOf((*MockPortalsMapper)(nil).PortalToEntity), portalPb)
}

// PortalToPb mocks base method.
func (m *MockPortalsMapper) PortalToPb(arg0 *portal.Portal) *portalsv1.Portal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PortalToPb", arg0)
	ret0, _ := ret[0].(*portalsv1.Portal)
	return ret0
}

// PortalToPb indicates an expected call of PortalToPb.
func (mr *MockPortalsMapperMockRecorder) PortalToPb(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortalToPb", reflect.TypeOf((*MockPortalsMapper)(nil).PortalToPb), arg0)
}

// PortalsToEntity mocks base method.
func (m *MockPortalsMapper) PortalsToEntity(portalsPb []*portalsv1.Portal) []*portal.Portal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PortalsToEntity", portalsPb)
	ret0, _ := ret[0].([]*portal.Portal)
	return ret0
}

// PortalsToEntity indicates an expected call of PortalsToEntity.
func (mr *MockPortalsMapperMockRecorder) PortalsToEntity(portalsPb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortalsToEntity", reflect.TypeOf((*MockPortalsMapper)(nil).PortalsToEntity), portalsPb)
}

// PortalsToPb mocks base method.
func (m *MockPortalsMapper) PortalsToPb(portals []*portal.Portal) []*portalsv1.Portal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PortalsToPb", portals)
	ret0, _ := ret[0].([]*portalsv1.Portal)
	return ret0
}

// PortalsToPb indicates an expected call of PortalsToPb.
func (mr *MockPortalsMapperMockRecorder) PortalsToPb(portals any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortalsToPb", reflect.TypeOf((*MockPortalsMapper)(nil).PortalsToPb), portals)
}

// MockQuestionsMapper is a mock of QuestionsMapper interface.
type MockQuestionsMapper struct {
	ctrl     *gomock.Controller
	recorder *MockQuestionsMapperMockRecorder
	isgomock struct{}
}

// MockQuestionsMapperMockRecorder is the mock recorder for MockQuestionsMapper.
type MockQuestionsMapperMockRecorder struct {
	mock *MockQuestionsMapper
}

// NewMockQuestionsMapper creates a new mock instance.
func NewMockQuestionsMapper(ctrl *gomock.Controller) *MockQuestionsMapper {
	mock := &MockQuestionsMapper{ctrl: ctrl}
	mock.recorder = &MockQuestionsMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuestionsMapper) EXPECT() *MockQuestionsMapperMockRecorder {
	return m.recorder
}

// NewQuestionToPb mocks base method.
func (m *MockQuestionsMapper) NewQuestionToPb(question *portal.Question) *questionsv1.AddRequest_Question {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewQuestionToPb", question)
	ret0, _ := ret[0].(*questionsv1.AddRequest_Question)
	return ret0
}

// NewQuestionToPb indicates an expected call of NewQuestionToPb.
func (mr *MockQuestionsMapperMockRecorder) NewQuestionToPb(question any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewQuestionToPb", reflect.TypeOf((*MockQuestionsMapper)(nil).NewQuestionToPb), question)
}

// NewQuestionsToPb mocks base method.
func (m *MockQuestionsMapper) NewQuestionsToPb(questions []*portal.Question) []*questionsv1.AddRequest_Question {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewQuestionsToPb", questions)
	ret0, _ := ret[0].([]*questionsv1.AddRequest_Question)
	return ret0
}

// NewQuestionsToPb indicates an expected call of NewQuestionsToPb.
func (mr *MockQuestionsMapperMockRecorder) NewQuestionsToPb(questions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewQuestionsToPb", reflect.TypeOf((*MockQuestionsMapper)(nil).NewQuestionsToPb), questions)
}

// QuestionToEntity mocks base method.
func (m *MockQuestionsMapper) QuestionToEntity(questionPb *questionsv1.Question) *portal.Question {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuestionToEntity", questionPb)
	ret0, _ := ret[0].(*portal.Question)
	return ret0
}

// QuestionToEntity indicates an expected call of QuestionToEntity.
func (mr *MockQuestionsMapperMockRecorder) QuestionToEntity(questionPb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuestionToEntity", reflect.TypeOf((*MockQuestionsMapper)(nil).QuestionToEntity), questionPb)
}

// QuestionToPb mocks base method.
func (m *MockQuestionsMapper) QuestionToPb(question *portal.Question) *questionsv1.Question {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuestionToPb", question)
	ret0, _ := ret[0].(*questionsv1.Question)
	return ret0
}

// QuestionToPb indicates an expected call of QuestionToPb.
func (mr *MockQuestionsMapperMockRecorder) QuestionToPb(question any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuestionToPb", reflect.TypeOf((*MockQuestionsMapper)(nil).QuestionToPb), question)
}

// QuestionsToEntity mocks base method.
func (m *MockQuestionsMapper) QuestionsToEntity(questionsPb []*questionsv1.Question) []*portal.Question {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuestionsToEntity", questionsPb)
	ret0, _ := ret[0].([]*portal.Question)
	return ret0
}

// QuestionsToEntity indicates an expected call of QuestionsToEntity.
func (mr *MockQuestionsMapperMockRecorder) QuestionsToEntity(questionsPb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuestionsToEntity", reflect.TypeOf((*MockQuestionsMapper)(nil).QuestionsToEntity), questionsPb)
}

// QuestionsToPb mocks base method.
func (m *MockQuestionsMapper) QuestionsToPb(questions []*portal.Question) []*questionsv1.Question {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuestionsToPb", questions)
	ret0, _ := ret[0].([]*questionsv1.Question)
	return ret0
}

// QuestionsToPb indicates an expected call of QuestionsToPb.
func (mr *MockQuestionsMapperMockRecorder) QuestionsToPb(questions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuestionsToPb", reflect.TypeOf((*MockQuestionsMapper)(nil).QuestionsToPb), questions)
}

// MockFeaturesMapper is a mock of FeaturesMapper interface.
type MockFeaturesMapper struct {
	ctrl     *gomock.Controller
	recorder *MockFeaturesMapperMockRecorder
	isgomock struct{}
}

// MockFeaturesMapperMockRecorder is the mock recorder for MockFeaturesMapper.
type MockFeaturesMapperMockRecorder struct {
	mock *MockFeaturesMapper
}

// NewMockFeaturesMapper creates a new mock instance.
func NewMockFeaturesMapper(ctrl *gomock.Controller) *MockFeaturesMapper {
	mock := &MockFeaturesMapper{ctrl: ctrl}
	mock.recorder = &MockFeaturesMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeaturesMapper) EXPECT() *MockFeaturesMapperMockRecorder {
	return m.recorder
}

// FeatureToEntity mocks base method.
func (m *MockFeaturesMapper) FeatureToEntity(featurePb *featuresv1.Feature) *portal.Feature {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeatureToEntity", featurePb)
	ret0, _ := ret[0].(*portal.Feature)
	return ret0
}

// FeatureToEntity indicates an expected call of FeatureToEntity.
func (mr *MockFeaturesMapperMockRecorder) FeatureToEntity(featurePb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeatureToEntity", reflect.TypeOf((*MockFeaturesMapper)(nil).FeatureToEntity), featurePb)
}

// FeatureToPb mocks base method.
func (m *MockFeaturesMapper) FeatureToPb(feature *portal.Feature) *featuresv1.Feature {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeatureToPb", feature)
	ret0, _ := ret[0].(*featuresv1.Feature)
	return ret0
}

// FeatureToPb indicates an expected call of FeatureToPb.
func (mr *MockFeaturesMapperMockRecorder) FeatureToPb(feature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeatureToPb", reflect.TypeOf((*MockFeaturesMapper)(nil).FeatureToPb), feature)
}

// FeaturesToEntity mocks base method.
func (m *MockFeaturesMapper) FeaturesToEntity(featuresPb []*featuresv1.Feature) []*portal.Feature {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeaturesToEntity", featuresPb)
	ret0, _ := ret[0].([]*portal.Feature)
	return ret0
}

// FeaturesToEntity indicates an expected call of FeaturesToEntity.
func (mr *MockFeaturesMapperMockRecorder) FeaturesToEntity(featuresPb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeaturesToEntity", reflect.TypeOf((*MockFeaturesMapper)(nil).FeaturesToEntity), featuresPb)
}

// FeaturesToPb mocks base method.
func (m *MockFeaturesMapper) FeaturesToPb(features []*portal.Feature) []*featuresv1.Feature {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeaturesToPb", features)
	ret0, _ := ret[0].([]*featuresv1.Feature)
	return ret0
}

// FeaturesToPb indicates an expected call of FeaturesToPb.
func (mr *MockFeaturesMapperMockRecorder) FeaturesToPb(features any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeaturesToPb", reflect.TypeOf((*MockFeaturesMapper)(nil).FeaturesToPb), features)
}

// NewFeatureToPb mocks base method.
func (m *MockFeaturesMapper) NewFeatureToPb(feature *portal.Feature) *featuresv1.AddRequest_Feature {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewFeatureToPb", feature)
	ret0, _ := ret[0].(*featuresv1.AddRequest_Feature)
	return ret0
}

// NewFeatureToPb indicates an expected call of NewFeatureToPb.
func (mr *MockFeaturesMapperMockRecorder) NewFeatureToPb(feature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewFeatureToPb", reflect.TypeOf((*MockFeaturesMapper)(nil).NewFeatureToPb), feature)
}

// NewFeaturesToPb mocks base method.
func (m *MockFeaturesMapper) NewFeaturesToPb(features []*portal.Feature) []*featuresv1.AddRequest_Feature {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewFeaturesToPb", features)
	ret0, _ := ret[0].([]*featuresv1.AddRequest_Feature)
	return ret0
}

// NewFeaturesToPb indicates an expected call of NewFeaturesToPb.
func (mr *MockFeaturesMapperMockRecorder) NewFeaturesToPb(features any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewFeaturesToPb", reflect.TypeOf((*MockFeaturesMapper)(nil).NewFeaturesToPb), features)
}

// MockOrganizationsMapper is a mock of OrganizationsMapper interface.
type MockOrganizationsMapper struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationsMapperMockRecorder
	isgomock struct{}
}

// MockOrganizationsMapperMockRecorder is the mock recorder for MockOrganizationsMapper.
type MockOrganizationsMapperMockRecorder struct {
	mock *MockOrganizationsMapper
}

// NewMockOrganizationsMapper creates a new mock instance.
func NewMockOrganizationsMapper(ctrl *gomock.Controller) *MockOrganizationsMapper {
	mock := &MockOrganizationsMapper{ctrl: ctrl}
	mock.recorder = &MockOrganizationsMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationsMapper) EXPECT() *MockOrganizationsMapperMockRecorder {
	return m.recorder
}

// GrbsToEntity mocks base method.
func (m *MockOrganizationsMapper) GrbsToEntity(grbsPb []*organizationsv1.Organization_Grbs) []*portal.OrganizationGrbs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrbsToEntity", grbsPb)
	ret0, _ := ret[0].([]*portal.OrganizationGrbs)
	return ret0
}

// GrbsToEntity indicates an expected call of GrbsToEntity.
func (mr *MockOrganizationsMapperMockRecorder) GrbsToEntity(grbsPb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrbsToEntity", reflect.TypeOf((*MockOrganizationsMapper)(nil).GrbsToEntity), grbsPb)
}

// OnceGrbsToEntity mocks base method.
func (m *MockOrganizationsMapper) OnceGrbsToEntity(onceGrbsPb *organizationsv1.Organization_Grbs) *portal.OrganizationGrbs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnceGrbsToEntity", onceGrbsPb)
	ret0, _ := ret[0].(*portal.OrganizationGrbs)
	return ret0
}

// OnceGrbsToEntity indicates an expected call of OnceGrbsToEntity.
func (mr *MockOrganizationsMapperMockRecorder) OnceGrbsToEntity(onceGrbsPb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnceGrbsToEntity", reflect.TypeOf((*MockOrganizationsMapper)(nil).OnceGrbsToEntity), onceGrbsPb)
}

// OptionsToPb mocks base method.
func (m *MockOrganizationsMapper) OptionsToPb(options portal.OrganizationsFilterOptions) *organizationsv1.OrganizationFilterOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OptionsToPb", options)
	ret0, _ := ret[0].(*organizationsv1.OrganizationFilterOptions)
	return ret0
}

// OptionsToPb indicates an expected call of OptionsToPb.
func (mr *MockOrganizationsMapperMockRecorder) OptionsToPb(options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OptionsToPb", reflect.TypeOf((*MockOrganizationsMapper)(nil).OptionsToPb), options)
}

// OrganizationToEntity mocks base method.
func (m *MockOrganizationsMapper) OrganizationToEntity(organizationPb *organizationsv1.Organization) *portal.Organization {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationToEntity", organizationPb)
	ret0, _ := ret[0].(*portal.Organization)
	return ret0
}

// OrganizationToEntity indicates an expected call of OrganizationToEntity.
func (mr *MockOrganizationsMapperMockRecorder) OrganizationToEntity(organizationPb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationToEntity", reflect.TypeOf((*MockOrganizationsMapper)(nil).OrganizationToEntity), organizationPb)
}

// OrganizationsToEntity mocks base method.
func (m *MockOrganizationsMapper) OrganizationsToEntity(organizationsPb []*organizationsv1.Organization) []*portal.Organization {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationsToEntity", organizationsPb)
	ret0, _ := ret[0].([]*portal.Organization)
	return ret0
}

// OrganizationsToEntity indicates an expected call of OrganizationsToEntity.
func (mr *MockOrganizationsMapperMockRecorder) OrganizationsToEntity(organizationsPb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationsToEntity", reflect.TypeOf((*MockOrganizationsMapper)(nil).OrganizationsToEntity), organizationsPb)
}

// PaginationToEntity mocks base method.
func (m *MockOrganizationsMapper) PaginationToEntity(paginationPb *sharedv1.PaginationResponse) *entity.StringPagination {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaginationToEntity", paginationPb)
	ret0, _ := ret[0].(*entity.StringPagination)
	return ret0
}

// PaginationToEntity indicates an expected call of PaginationToEntity.
func (mr *MockOrganizationsMapperMockRecorder) PaginationToEntity(paginationPb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaginationToEntity", reflect.TypeOf((*MockOrganizationsMapper)(nil).PaginationToEntity), paginationPb)
}

// PaginationToPb mocks base method.
func (m *MockOrganizationsMapper) PaginationToPb(pagination *entity.StringPagination) *sharedv1.PaginationRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaginationToPb", pagination)
	ret0, _ := ret[0].(*sharedv1.PaginationRequest)
	return ret0
}

// PaginationToPb indicates an expected call of PaginationToPb.
func (mr *MockOrganizationsMapperMockRecorder) PaginationToPb(pagination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaginationToPb", reflect.TypeOf((*MockOrganizationsMapper)(nil).PaginationToPb), pagination)
}

// MockImagesMapper is a mock of ImagesMapper interface.
type MockImagesMapper struct {
	ctrl     *gomock.Controller
	recorder *MockImagesMapperMockRecorder
	isgomock struct{}
}

// MockImagesMapperMockRecorder is the mock recorder for MockImagesMapper.
type MockImagesMapperMockRecorder struct {
	mock *MockImagesMapper
}

// NewMockImagesMapper creates a new mock instance.
func NewMockImagesMapper(ctrl *gomock.Controller) *MockImagesMapper {
	mock := &MockImagesMapper{ctrl: ctrl}
	mock.recorder = &MockImagesMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImagesMapper) EXPECT() *MockImagesMapperMockRecorder {
	return m.recorder
}

// ImageToEntity mocks base method.
func (m *MockImagesMapper) ImageToEntity(imagePb *imagesv1.Image) *portal.Image {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageToEntity", imagePb)
	ret0, _ := ret[0].(*portal.Image)
	return ret0
}

// ImageToEntity indicates an expected call of ImageToEntity.
func (mr *MockImagesMapperMockRecorder) ImageToEntity(imagePb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageToEntity", reflect.TypeOf((*MockImagesMapper)(nil).ImageToEntity), imagePb)
}

// ImageToPb mocks base method.
func (m *MockImagesMapper) ImageToPb(image *portal.Image) *imagesv1.Image {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageToPb", image)
	ret0, _ := ret[0].(*imagesv1.Image)
	return ret0
}

// ImageToPb indicates an expected call of ImageToPb.
func (mr *MockImagesMapperMockRecorder) ImageToPb(image any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageToPb", reflect.TypeOf((*MockImagesMapper)(nil).ImageToPb), image)
}

// ImagesToEntity mocks base method.
func (m *MockImagesMapper) ImagesToEntity(imagesPb []*imagesv1.Image) []*portal.Image {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImagesToEntity", imagesPb)
	ret0, _ := ret[0].([]*portal.Image)
	return ret0
}

// ImagesToEntity indicates an expected call of ImagesToEntity.
func (mr *MockImagesMapperMockRecorder) ImagesToEntity(imagesPb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImagesToEntity", reflect.TypeOf((*MockImagesMapper)(nil).ImagesToEntity), imagesPb)
}

// ImagesToPb mocks base method.
func (m *MockImagesMapper) ImagesToPb(images []*portal.Image) []*imagesv1.Image {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImagesToPb", images)
	ret0, _ := ret[0].([]*imagesv1.Image)
	return ret0
}

// ImagesToPb indicates an expected call of ImagesToPb.
func (mr *MockImagesMapperMockRecorder) ImagesToPb(images any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImagesToPb", reflect.TypeOf((*MockImagesMapper)(nil).ImagesToPb), images)
}

// NewImageToPb mocks base method.
func (m *MockImagesMapper) NewImageToPb(image *portal.Image) *imagesv1.AddRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewImageToPb", image)
	ret0, _ := ret[0].(*imagesv1.AddRequest)
	return ret0
}

// NewImageToPb indicates an expected call of NewImageToPb.
func (mr *MockImagesMapperMockRecorder) NewImageToPb(image any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewImageToPb", reflect.TypeOf((*MockImagesMapper)(nil).NewImageToPb), image)
}
