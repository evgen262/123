// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=./proxy_mock.go -package=proxy
//

// Package proxy is a generated GoMock package.
package proxy

import (
	reflect "reflect"

	bannerv1 "git.mos.ru/buch-cloud/moscow-team-2.0/infrastructure/protolib.git/gen/infogorod/proxyfacade/banner/v1"
	eventv1 "git.mos.ru/buch-cloud/moscow-team-2.0/infrastructure/protolib.git/gen/infogorod/proxyfacade/event/v1"
	banner "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity/banner"
	event "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity/event"
	gomock "go.uber.org/mock/gomock"
)

// MockProxyMapper is a mock of ProxyMapper interface.
type MockProxyMapper struct {
	ctrl     *gomock.Controller
	recorder *MockProxyMapperMockRecorder
	isgomock struct{}
}

// MockProxyMapperMockRecorder is the mock recorder for MockProxyMapper.
type MockProxyMapperMockRecorder struct {
	mock *MockProxyMapper
}

// NewMockProxyMapper creates a new mock instance.
func NewMockProxyMapper(ctrl *gomock.Controller) *MockProxyMapper {
	mock := &MockProxyMapper{ctrl: ctrl}
	mock.recorder = &MockProxyMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProxyMapper) EXPECT() *MockProxyMapperMockRecorder {
	return m.recorder
}

// BannersListToEntity mocks base method.
func (m *MockProxyMapper) BannersListToEntity(banners *bannerv1.ListHomeBannersResponse) *banner.BannersList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BannersListToEntity", banners)
	ret0, _ := ret[0].(*banner.BannersList)
	return ret0
}

// BannersListToEntity indicates an expected call of BannersListToEntity.
func (mr *MockProxyMapperMockRecorder) BannersListToEntity(banners any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BannersListToEntity", reflect.TypeOf((*MockProxyMapper)(nil).BannersListToEntity), banners)
}

// CalendarEventsLinksToEntity mocks base method.
func (m *MockProxyMapper) CalendarEventsLinksToEntity(list *eventv1.ListCalendarEventsLinksResponse) []*event.CalendarEventLink {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalendarEventsLinksToEntity", list)
	ret0, _ := ret[0].([]*event.CalendarEventLink)
	return ret0
}

// CalendarEventsLinksToEntity indicates an expected call of CalendarEventsLinksToEntity.
func (mr *MockProxyMapperMockRecorder) CalendarEventsLinksToEntity(list any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalendarEventsLinksToEntity", reflect.TypeOf((*MockProxyMapper)(nil).CalendarEventsLinksToEntity), list)
}

// CalendarEventsListToEntity mocks base method.
func (m *MockProxyMapper) CalendarEventsListToEntity(list *eventv1.ListCalendarEventsResponse) *event.CalendarEventsList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalendarEventsListToEntity", list)
	ret0, _ := ret[0].(*event.CalendarEventsList)
	return ret0
}

// CalendarEventsListToEntity indicates an expected call of CalendarEventsListToEntity.
func (mr *MockProxyMapperMockRecorder) CalendarEventsListToEntity(list any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalendarEventsListToEntity", reflect.TypeOf((*MockProxyMapper)(nil).CalendarEventsListToEntity), list)
}
