// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=./repositories_mock.go -package=employees_search
//

// Package employees_search is a generated GoMock package.
package employees_search

import (
	reflect "reflect"

	searchv1 "git.mos.ru/buch-cloud/moscow-team-2.0/infrastructure/protolib.git/gen/infogorod/employeessearch/search/v1"
	sharedv1 "git.mos.ru/buch-cloud/moscow-team-2.0/infrastructure/protolib.git/gen/infogorod/employeessearch/shared/v1"
	entity "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity"
	employees_search "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity/employees-search"
	gomock "go.uber.org/mock/gomock"
)

// MockEmployeesSearchMapper is a mock of EmployeesSearchMapper interface.
type MockEmployeesSearchMapper struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeesSearchMapperMockRecorder
	isgomock struct{}
}

// MockEmployeesSearchMapperMockRecorder is the mock recorder for MockEmployeesSearchMapper.
type MockEmployeesSearchMapperMockRecorder struct {
	mock *MockEmployeesSearchMapper
}

// NewMockEmployeesSearchMapper creates a new mock instance.
func NewMockEmployeesSearchMapper(ctrl *gomock.Controller) *MockEmployeesSearchMapper {
	mock := &MockEmployeesSearchMapper{ctrl: ctrl}
	mock.recorder = &MockEmployeesSearchMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeesSearchMapper) EXPECT() *MockEmployeesSearchMapperMockRecorder {
	return m.recorder
}

// AggregationAbsenceToPb mocks base method.
func (m *MockEmployeesSearchMapper) AggregationAbsenceToPb(absence *employees_search.SearchAbsence) *searchv1.AggregationsRequest_Absence {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregationAbsenceToPb", absence)
	ret0, _ := ret[0].(*searchv1.AggregationsRequest_Absence)
	return ret0
}

// AggregationAbsenceToPb indicates an expected call of AggregationAbsenceToPb.
func (mr *MockEmployeesSearchMapperMockRecorder) AggregationAbsenceToPb(absence any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregationAbsenceToPb", reflect.TypeOf((*MockEmployeesSearchMapper)(nil).AggregationAbsenceToPb), absence)
}

// AggregationAbsencesToPb mocks base method.
func (m *MockEmployeesSearchMapper) AggregationAbsencesToPb(absences []*employees_search.SearchAbsence) []*searchv1.AggregationsRequest_Absence {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregationAbsencesToPb", absences)
	ret0, _ := ret[0].([]*searchv1.AggregationsRequest_Absence)
	return ret0
}

// AggregationAbsencesToPb indicates an expected call of AggregationAbsencesToPb.
func (mr *MockEmployeesSearchMapperMockRecorder) AggregationAbsencesToPb(absences any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregationAbsencesToPb", reflect.TypeOf((*MockEmployeesSearchMapper)(nil).AggregationAbsencesToPb), absences)
}

// GenderToEntity mocks base method.
func (m *MockEmployeesSearchMapper) GenderToEntity(gender sharedv1.Gender) entity.Gender {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenderToEntity", gender)
	ret0, _ := ret[0].(entity.Gender)
	return ret0
}

// GenderToEntity indicates an expected call of GenderToEntity.
func (mr *MockEmployeesSearchMapperMockRecorder) GenderToEntity(gender any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenderToEntity", reflect.TypeOf((*MockEmployeesSearchMapper)(nil).GenderToEntity), gender)
}

// GenderToPb mocks base method.
func (m *MockEmployeesSearchMapper) GenderToPb(gender entity.Gender) sharedv1.Gender {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenderToPb", gender)
	ret0, _ := ret[0].(sharedv1.Gender)
	return ret0
}

// GenderToPb indicates an expected call of GenderToPb.
func (mr *MockEmployeesSearchMapperMockRecorder) GenderToPb(gender any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenderToPb", reflect.TypeOf((*MockEmployeesSearchMapper)(nil).GenderToPb), gender)
}

// GendersToEntity mocks base method.
func (m *MockEmployeesSearchMapper) GendersToEntity(genders []sharedv1.Gender) []entity.Gender {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GendersToEntity", genders)
	ret0, _ := ret[0].([]entity.Gender)
	return ret0
}

// GendersToEntity indicates an expected call of GendersToEntity.
func (mr *MockEmployeesSearchMapperMockRecorder) GendersToEntity(genders any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GendersToEntity", reflect.TypeOf((*MockEmployeesSearchMapper)(nil).GendersToEntity), genders)
}

// GendersToPb mocks base method.
func (m *MockEmployeesSearchMapper) GendersToPb(genders []entity.Gender) []sharedv1.Gender {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GendersToPb", genders)
	ret0, _ := ret[0].([]sharedv1.Gender)
	return ret0
}

// GendersToPb indicates an expected call of GendersToPb.
func (mr *MockEmployeesSearchMapperMockRecorder) GendersToPb(genders any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GendersToPb", reflect.TypeOf((*MockEmployeesSearchMapper)(nil).GendersToPb), genders)
}

// SearchAbsenceToPb mocks base method.
func (m *MockEmployeesSearchMapper) SearchAbsenceToPb(absence *employees_search.SearchAbsence) *searchv1.SearchRequest_Filters_Absence {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAbsenceToPb", absence)
	ret0, _ := ret[0].(*searchv1.SearchRequest_Filters_Absence)
	return ret0
}

// SearchAbsenceToPb indicates an expected call of SearchAbsenceToPb.
func (mr *MockEmployeesSearchMapperMockRecorder) SearchAbsenceToPb(absence any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAbsenceToPb", reflect.TypeOf((*MockEmployeesSearchMapper)(nil).SearchAbsenceToPb), absence)
}

// SearchAbsencesToPb mocks base method.
func (m *MockEmployeesSearchMapper) SearchAbsencesToPb(absences []*employees_search.SearchAbsence) []*searchv1.SearchRequest_Filters_Absence {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAbsencesToPb", absences)
	ret0, _ := ret[0].([]*searchv1.SearchRequest_Filters_Absence)
	return ret0
}

// SearchAbsencesToPb indicates an expected call of SearchAbsencesToPb.
func (mr *MockEmployeesSearchMapperMockRecorder) SearchAbsencesToPb(absences any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAbsencesToPb", reflect.TypeOf((*MockEmployeesSearchMapper)(nil).SearchAbsencesToPb), absences)
}
