// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=./news_mock.go -package=news
//

// Package news is a generated GoMock package.
package news

import (
	reflect "reflect"

	commentv1 "git.mos.ru/buch-cloud/moscow-team-2.0/infrastructure/protolib.git/gen/infogorod/newsfacade/comment/v1"
	newsv1 "git.mos.ru/buch-cloud/moscow-team-2.0/infrastructure/protolib.git/gen/infogorod/newsfacade/news/v1"
	news "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/dto/news"
	news0 "git.mos.ru/buch-cloud/moscow-team-2.0/backend/web-api.git/internal/entity/news"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockNewsMapper is a mock of NewsMapper interface.
type MockNewsMapper struct {
	ctrl     *gomock.Controller
	recorder *MockNewsMapperMockRecorder
	isgomock struct{}
}

// MockNewsMapperMockRecorder is the mock recorder for MockNewsMapper.
type MockNewsMapperMockRecorder struct {
	mock *MockNewsMapper
}

// NewMockNewsMapper creates a new mock instance.
func NewMockNewsMapper(ctrl *gomock.Controller) *MockNewsMapper {
	mock := &MockNewsMapper{ctrl: ctrl}
	mock.recorder = &MockNewsMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNewsMapper) EXPECT() *MockNewsMapperMockRecorder {
	return m.recorder
}

// CommentToEntity mocks base method.
func (m *MockNewsMapper) CommentToEntity(comment *newsv1.Comment) *news0.NewsComment {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommentToEntity", comment)
	ret0, _ := ret[0].(*news0.NewsComment)
	return ret0
}

// CommentToEntity indicates an expected call of CommentToEntity.
func (mr *MockNewsMapperMockRecorder) CommentToEntity(comment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommentToEntity", reflect.TypeOf((*MockNewsMapper)(nil).CommentToEntity), comment)
}

// CommentsToEntity mocks base method.
func (m *MockNewsMapper) CommentsToEntity(commentsPb []*newsv1.Comment) []*news0.NewsComment {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommentsToEntity", commentsPb)
	ret0, _ := ret[0].([]*news0.NewsComment)
	return ret0
}

// CommentsToEntity indicates an expected call of CommentsToEntity.
func (mr *MockNewsMapperMockRecorder) CommentsToEntity(commentsPb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommentsToEntity", reflect.TypeOf((*MockNewsMapper)(nil).CommentsToEntity), commentsPb)
}

// NewCommentToPb mocks base method.
func (m *MockNewsMapper) NewCommentToPb(comment *news.NewComment) *newsv1.Comment {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCommentToPb", comment)
	ret0, _ := ret[0].(*newsv1.Comment)
	return ret0
}

// NewCommentToPb indicates an expected call of NewCommentToPb.
func (mr *MockNewsMapperMockRecorder) NewCommentToPb(comment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCommentToPb", reflect.TypeOf((*MockNewsMapper)(nil).NewCommentToPb), comment)
}

// NewsFullToEntity mocks base method.
func (m *MockNewsMapper) NewsFullToEntity(newsPb []*newsv1.News) []*news0.NewsFull {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewsFullToEntity", newsPb)
	ret0, _ := ret[0].([]*news0.NewsFull)
	return ret0
}

// NewsFullToEntity indicates an expected call of NewsFullToEntity.
func (mr *MockNewsMapperMockRecorder) NewsFullToEntity(newsPb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewsFullToEntity", reflect.TypeOf((*MockNewsMapper)(nil).NewsFullToEntity), newsPb)
}

// NewsToEntity mocks base method.
func (m *MockNewsMapper) NewsToEntity(newsPb []*newsv1.News) []*news0.News {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewsToEntity", newsPb)
	ret0, _ := ret[0].([]*news0.News)
	return ret0
}

// NewsToEntity indicates an expected call of NewsToEntity.
func (mr *MockNewsMapperMockRecorder) NewsToEntity(newsPb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewsToEntity", reflect.TypeOf((*MockNewsMapper)(nil).NewsToEntity), newsPb)
}

// OnceNewsFullToEntity mocks base method.
func (m *MockNewsMapper) OnceNewsFullToEntity(newsPb *newsv1.News) *news0.NewsFull {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnceNewsFullToEntity", newsPb)
	ret0, _ := ret[0].(*news0.NewsFull)
	return ret0
}

// OnceNewsFullToEntity indicates an expected call of OnceNewsFullToEntity.
func (mr *MockNewsMapperMockRecorder) OnceNewsFullToEntity(newsPb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnceNewsFullToEntity", reflect.TypeOf((*MockNewsMapper)(nil).OnceNewsFullToEntity), newsPb)
}

// OnceNewsToEntity mocks base method.
func (m *MockNewsMapper) OnceNewsToEntity(newsPb *newsv1.News) *news0.News {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnceNewsToEntity", newsPb)
	ret0, _ := ret[0].(*news0.News)
	return ret0
}

// OnceNewsToEntity indicates an expected call of OnceNewsToEntity.
func (mr *MockNewsMapperMockRecorder) OnceNewsToEntity(newsPb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnceNewsToEntity", reflect.TypeOf((*MockNewsMapper)(nil).OnceNewsToEntity), newsPb)
}

// ParticipantsIdsToPb mocks base method.
func (m *MockNewsMapper) ParticipantsIdsToPb(participants []*uuid.UUID) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParticipantsIdsToPb", participants)
	ret0, _ := ret[0].([]string)
	return ret0
}

// ParticipantsIdsToPb indicates an expected call of ParticipantsIdsToPb.
func (mr *MockNewsMapperMockRecorder) ParticipantsIdsToPb(participants any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParticipantsIdsToPb", reflect.TypeOf((*MockNewsMapper)(nil).ParticipantsIdsToPb), participants)
}

// StatusToEntity mocks base method.
func (m *MockNewsMapper) StatusToEntity(statusPb newsv1.NewsStatus) news0.NewsStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusToEntity", statusPb)
	ret0, _ := ret[0].(news0.NewsStatus)
	return ret0
}

// StatusToEntity indicates an expected call of StatusToEntity.
func (mr *MockNewsMapperMockRecorder) StatusToEntity(statusPb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusToEntity", reflect.TypeOf((*MockNewsMapper)(nil).StatusToEntity), statusPb)
}

// StatusToPb mocks base method.
func (m *MockNewsMapper) StatusToPb(status news0.NewsStatus) newsv1.NewsStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusToPb", status)
	ret0, _ := ret[0].(newsv1.NewsStatus)
	return ret0
}

// StatusToPb indicates an expected call of StatusToPb.
func (mr *MockNewsMapperMockRecorder) StatusToPb(status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusToPb", reflect.TypeOf((*MockNewsMapper)(nil).StatusToPb), status)
}

// VisibilityToPb mocks base method.
func (m *MockNewsMapper) VisibilityToPb(vis *news0.NewsVisibility) *newsv1.Visibility {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VisibilityToPb", vis)
	ret0, _ := ret[0].(*newsv1.Visibility)
	return ret0
}

// VisibilityToPb indicates an expected call of VisibilityToPb.
func (mr *MockNewsMapperMockRecorder) VisibilityToPb(vis any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VisibilityToPb", reflect.TypeOf((*MockNewsMapper)(nil).VisibilityToPb), vis)
}

// MockCommentMapper is a mock of CommentMapper interface.
type MockCommentMapper struct {
	ctrl     *gomock.Controller
	recorder *MockCommentMapperMockRecorder
	isgomock struct{}
}

// MockCommentMapperMockRecorder is the mock recorder for MockCommentMapper.
type MockCommentMapperMockRecorder struct {
	mock *MockCommentMapper
}

// NewMockCommentMapper creates a new mock instance.
func NewMockCommentMapper(ctrl *gomock.Controller) *MockCommentMapper {
	mock := &MockCommentMapper{ctrl: ctrl}
	mock.recorder = &MockCommentMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentMapper) EXPECT() *MockCommentMapperMockRecorder {
	return m.recorder
}

// CommentToEntity mocks base method.
func (m *MockCommentMapper) CommentToEntity(comment *commentv1.Comment) *news0.NewsComment {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommentToEntity", comment)
	ret0, _ := ret[0].(*news0.NewsComment)
	return ret0
}

// CommentToEntity indicates an expected call of CommentToEntity.
func (mr *MockCommentMapperMockRecorder) CommentToEntity(comment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommentToEntity", reflect.TypeOf((*MockCommentMapper)(nil).CommentToEntity), comment)
}

// CommentsToEntity mocks base method.
func (m *MockCommentMapper) CommentsToEntity(commentsPb []*commentv1.Comment) []*news0.NewsComment {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommentsToEntity", commentsPb)
	ret0, _ := ret[0].([]*news0.NewsComment)
	return ret0
}

// CommentsToEntity indicates an expected call of CommentsToEntity.
func (mr *MockCommentMapperMockRecorder) CommentsToEntity(commentsPb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommentsToEntity", reflect.TypeOf((*MockCommentMapper)(nil).CommentsToEntity), commentsPb)
}
