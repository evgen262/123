// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package repositories is a generated GoMock package.
package repositories

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockCacheSource is a mock of CacheSource interface.
type MockCacheSource struct {
	ctrl     *gomock.Controller
	recorder *MockCacheSourceMockRecorder
}

// MockCacheSourceMockRecorder is the mock recorder for MockCacheSource.
type MockCacheSourceMockRecorder struct {
	mock *MockCacheSource
}

// NewMockCacheSource creates a new mock instance.
func NewMockCacheSource(ctrl *gomock.Controller) *MockCacheSource {
	mock := &MockCacheSource{ctrl: ctrl}
	mock.recorder = &MockCacheSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheSource) EXPECT() *MockCacheSourceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockCacheSource) Delete(ctx context.Context, keys ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCacheSourceMockRecorder) Delete(ctx interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCacheSource)(nil).Delete), varargs...)
}

// Exists mocks base method.
func (m *MockCacheSource) Exists(ctx context.Context, keys ...string) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exists", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockCacheSourceMockRecorder) Exists(ctx interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockCacheSource)(nil).Exists), varargs...)
}

// Get mocks base method.
func (m *MockCacheSource) Get(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheSourceMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCacheSource)(nil).Get), ctx, key)
}

// SetEx mocks base method.
func (m *MockCacheSource) SetEx(ctx context.Context, key string, value interface{}, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEx", ctx, key, value, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetEx indicates an expected call of SetEx.
func (mr *MockCacheSourceMockRecorder) SetEx(ctx, key, value, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEx", reflect.TypeOf((*MockCacheSource)(nil).SetEx), ctx, key, value, ttl)
}
